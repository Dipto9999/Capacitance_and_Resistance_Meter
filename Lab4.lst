0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Feb 28 18:42:31 2024
0000              5   ;--------------------------------------------------------
                  5   $name Lab4
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Check_Mode_Button
0000             30            public _calculate_resistance_k0hms
0000             31            public _calculate_capacitance_nF
0000             32            public _calculate_freq_Hz
0000             33            public _calculate_period_s
0000             34            public _display_resistance_kOhms
0000             35            public _display_capacitance_nF
0000             36            public _display_freq_kHz
0000             37            public _display_period
0000             38            public _display_rx
0000             39            public _write_rx
0000             40            public _LCDprint
0000             41            public _LCD_4BIT
0000             42            public _WriteCommand
0000             43            public _WriteData
0000             44            public _LCD_byte
0000             45            public _LCD_pulse
0000             46            public _Serial_Init
0000             47            public _TIMER0_Init
0000             48            public _waitms
0000             49            public _Timer3us
0000             50            public _Volts_at_Pin
0000             51            public _ADC_at_Pin
0000             52            public _InitPinADC
0000             53            public _InitADC
0000             54            public __c51_external_startup
0000             55            public _LCDprint_PARM_3
0000             56            public _calculate_period_s_PARM_3
0000             57            public _calculate_period_s_PARM_2
0000             58            public _display_rx_PARM_2
0000             59            public _write_rx_PARM_2
0000             60            public _LCDprint_PARM_2
0000             61            public _LCD_BUFF
0000             62            public _overflow_count
0000             63   ;--------------------------------------------------------
0000             64   ; Special Function Registers
0000             65   ;--------------------------------------------------------
0000             66   _ACC            DATA 0xe0
0000             67   _ADC0ASAH       DATA 0xb6
0000             68   _ADC0ASAL       DATA 0xb5
0000             69   _ADC0ASCF       DATA 0xa1
0000             70   _ADC0ASCT       DATA 0xc7
0000             71   _ADC0CF0        DATA 0xbc
0000             72   _ADC0CF1        DATA 0xb9
0000             73   _ADC0CF2        DATA 0xdf
0000             74   _ADC0CN0        DATA 0xe8
0000             75   _ADC0CN1        DATA 0xb2
0000             76   _ADC0CN2        DATA 0xb3
0000             77   _ADC0GTH        DATA 0xc4
0000             78   _ADC0GTL        DATA 0xc3
0000             79   _ADC0H          DATA 0xbe
0000             80   _ADC0L          DATA 0xbd
0000             81   _ADC0LTH        DATA 0xc6
0000             82   _ADC0LTL        DATA 0xc5
0000             83   _ADC0MX         DATA 0xbb
0000             84   _B              DATA 0xf0
0000             85   _CKCON0         DATA 0x8e
0000             86   _CKCON1         DATA 0xa6
0000             87   _CLEN0          DATA 0xc6
0000             88   _CLIE0          DATA 0xc7
0000             89   _CLIF0          DATA 0xe8
0000             90   _CLKSEL         DATA 0xa9
0000             91   _CLOUT0         DATA 0xd1
0000             92   _CLU0CF         DATA 0xb1
0000             93   _CLU0FN         DATA 0xaf
0000             94   _CLU0MX         DATA 0x84
0000             95   _CLU1CF         DATA 0xb3
0000             96   _CLU1FN         DATA 0xb2
0000             97   _CLU1MX         DATA 0x85
0000             98   _CLU2CF         DATA 0xb6
0000             99   _CLU2FN         DATA 0xb5
0000            100   _CLU2MX         DATA 0x91
0000            101   _CLU3CF         DATA 0xbf
0000            102   _CLU3FN         DATA 0xbe
0000            103   _CLU3MX         DATA 0xae
0000            104   _CMP0CN0        DATA 0x9b
0000            105   _CMP0CN1        DATA 0x99
0000            106   _CMP0MD         DATA 0x9d
0000            107   _CMP0MX         DATA 0x9f
0000            108   _CMP1CN0        DATA 0xbf
0000            109   _CMP1CN1        DATA 0xac
0000            110   _CMP1MD         DATA 0xab
0000            111   _CMP1MX         DATA 0xaa
0000            112   _CRC0CN0        DATA 0xce
0000            113   _CRC0CN1        DATA 0x86
0000            114   _CRC0CNT        DATA 0xd3
0000            115   _CRC0DAT        DATA 0xcb
0000            116   _CRC0FLIP       DATA 0xcf
0000            117   _CRC0IN         DATA 0xca
0000            118   _CRC0ST         DATA 0xd2
0000            119   _DAC0CF0        DATA 0x91
0000            120   _DAC0CF1        DATA 0x92
0000            121   _DAC0H          DATA 0x85
0000            122   _DAC0L          DATA 0x84
0000            123   _DAC1CF0        DATA 0x93
0000            124   _DAC1CF1        DATA 0x94
0000            125   _DAC1H          DATA 0x8a
0000            126   _DAC1L          DATA 0x89
0000            127   _DAC2CF0        DATA 0x95
0000            128   _DAC2CF1        DATA 0x96
0000            129   _DAC2H          DATA 0x8c
0000            130   _DAC2L          DATA 0x8b
0000            131   _DAC3CF0        DATA 0x9a
0000            132   _DAC3CF1        DATA 0x9c
0000            133   _DAC3H          DATA 0x8e
0000            134   _DAC3L          DATA 0x8d
0000            135   _DACGCF0        DATA 0x88
0000            136   _DACGCF1        DATA 0x98
0000            137   _DACGCF2        DATA 0xa2
0000            138   _DERIVID        DATA 0xad
0000            139   _DEVICEID       DATA 0xb5
0000            140   _DPH            DATA 0x83
0000            141   _DPL            DATA 0x82
0000            142   _EIE1           DATA 0xe6
0000            143   _EIE2           DATA 0xf3
0000            144   _EIP1           DATA 0xbb
0000            145   _EIP1H          DATA 0xee
0000            146   _EIP2           DATA 0xed
0000            147   _EIP2H          DATA 0xf6
0000            148   _EMI0CN         DATA 0xe7
0000            149   _FLKEY          DATA 0xb7
0000            150   _HFO0CAL        DATA 0xc7
0000            151   _HFO1CAL        DATA 0xd6
0000            152   _HFOCN          DATA 0xef
0000            153   _I2C0ADM        DATA 0xff
0000            154   _I2C0CN0        DATA 0xba
0000            155   _I2C0DIN        DATA 0xbc
0000            156   _I2C0DOUT       DATA 0xbb
0000            157   _I2C0FCN0       DATA 0xad
0000            158   _I2C0FCN1       DATA 0xab
0000            159   _I2C0FCT        DATA 0xf5
0000            160   _I2C0SLAD       DATA 0xbd
0000            161   _I2C0STAT       DATA 0xb9
0000            162   _IE             DATA 0xa8
0000            163   _IP             DATA 0xb8
0000            164   _IPH            DATA 0xf2
0000            165   _IT01CF         DATA 0xe4
0000            166   _LFO0CN         DATA 0xb1
0000            167   _P0             DATA 0x80
0000            168   _P0MASK         DATA 0xfe
0000            169   _P0MAT          DATA 0xfd
0000            170   _P0MDIN         DATA 0xf1
0000            171   _P0MDOUT        DATA 0xa4
0000            172   _P0SKIP         DATA 0xd4
0000            173   _P1             DATA 0x90
0000            174   _P1MASK         DATA 0xee
0000            175   _P1MAT          DATA 0xed
0000            176   _P1MDIN         DATA 0xf2
0000            177   _P1MDOUT        DATA 0xa5
0000            178   _P1SKIP         DATA 0xd5
0000            179   _P2             DATA 0xa0
0000            180   _P2MASK         DATA 0xfc
0000            181   _P2MAT          DATA 0xfb
0000            182   _P2MDIN         DATA 0xf3
0000            183   _P2MDOUT        DATA 0xa6
0000            184   _P2SKIP         DATA 0xcc
0000            185   _P3             DATA 0xb0
0000            186   _P3MDIN         DATA 0xf4
0000            187   _P3MDOUT        DATA 0x9c
0000            188   _PCA0CENT       DATA 0x9e
0000            189   _PCA0CLR        DATA 0x9c
0000            190   _PCA0CN0        DATA 0xd8
0000            191   _PCA0CPH0       DATA 0xfc
0000            192   _PCA0CPH1       DATA 0xea
0000            193   _PCA0CPH2       DATA 0xec
0000            194   _PCA0CPH3       DATA 0xf5
0000            195   _PCA0CPH4       DATA 0x85
0000            196   _PCA0CPH5       DATA 0xde
0000            197   _PCA0CPL0       DATA 0xfb
0000            198   _PCA0CPL1       DATA 0xe9
0000            199   _PCA0CPL2       DATA 0xeb
0000            200   _PCA0CPL3       DATA 0xf4
0000            201   _PCA0CPL4       DATA 0x84
0000            202   _PCA0CPL5       DATA 0xdd
0000            203   _PCA0CPM0       DATA 0xda
0000            204   _PCA0CPM1       DATA 0xdb
0000            205   _PCA0CPM2       DATA 0xdc
0000            206   _PCA0CPM3       DATA 0xae
0000            207   _PCA0CPM4       DATA 0xaf
0000            208   _PCA0CPM5       DATA 0xcc
0000            209   _PCA0H          DATA 0xfa
0000            210   _PCA0L          DATA 0xf9
0000            211   _PCA0MD         DATA 0xd9
0000            212   _PCA0POL        DATA 0x96
0000            213   _PCA0PWM        DATA 0xf7
0000            214   _PCON0          DATA 0x87
0000            215   _PCON1          DATA 0xcd
0000            216   _PFE0CN         DATA 0xc1
0000            217   _PRTDRV         DATA 0xf6
0000            218   _PSCTL          DATA 0x8f
0000            219   _PSTAT0         DATA 0xaa
0000            220   _PSW            DATA 0xd0
0000            221   _REF0CN         DATA 0xd1
0000            222   _REG0CN         DATA 0xc9
0000            223   _REVID          DATA 0xb6
0000            224   _RSTSRC         DATA 0xef
0000            225   _SBCON1         DATA 0x94
0000            226   _SBRLH1         DATA 0x96
0000            227   _SBRLL1         DATA 0x95
0000            228   _SBUF           DATA 0x99
0000            229   _SBUF0          DATA 0x99
0000            230   _SBUF1          DATA 0x92
0000            231   _SCON           DATA 0x98
0000            232   _SCON0          DATA 0x98
0000            233   _SCON1          DATA 0xc8
0000            234   _SFRPAGE        DATA 0xa7
0000            235   _SFRPGCN        DATA 0xbc
0000            236   _SFRSTACK       DATA 0xd7
0000            237   _SMB0ADM        DATA 0xd6
0000            238   _SMB0ADR        DATA 0xd7
0000            239   _SMB0CF         DATA 0xc1
0000            240   _SMB0CN0        DATA 0xc0
0000            241   _SMB0DAT        DATA 0xc2
0000            242   _SMB0FCN0       DATA 0xc3
0000            243   _SMB0FCN1       DATA 0xc4
0000            244   _SMB0FCT        DATA 0xef
0000            245   _SMB0RXLN       DATA 0xc5
0000            246   _SMB0TC         DATA 0xac
0000            247   _SMOD1          DATA 0x93
0000            248   _SP             DATA 0x81
0000            249   _SPI0CFG        DATA 0xa1
0000            250   _SPI0CKR        DATA 0xa2
0000            251   _SPI0CN0        DATA 0xf8
0000            252   _SPI0DAT        DATA 0xa3
0000            253   _SPI0FCN0       DATA 0x9a
0000            254   _SPI0FCN1       DATA 0x9b
0000            255   _SPI0FCT        DATA 0xf7
0000            256   _SPI0PCF        DATA 0xdf
0000            257   _TCON           DATA 0x88
0000            258   _TH0            DATA 0x8c
0000            259   _TH1            DATA 0x8d
0000            260   _TL0            DATA 0x8a
0000            261   _TL1            DATA 0x8b
0000            262   _TMOD           DATA 0x89
0000            263   _TMR2CN0        DATA 0xc8
0000            264   _TMR2CN1        DATA 0xfd
0000            265   _TMR2H          DATA 0xcf
0000            266   _TMR2L          DATA 0xce
0000            267   _TMR2RLH        DATA 0xcb
0000            268   _TMR2RLL        DATA 0xca
0000            269   _TMR3CN0        DATA 0x91
0000            270   _TMR3CN1        DATA 0xfe
0000            271   _TMR3H          DATA 0x95
0000            272   _TMR3L          DATA 0x94
0000            273   _TMR3RLH        DATA 0x93
0000            274   _TMR3RLL        DATA 0x92
0000            275   _TMR4CN0        DATA 0x98
0000            276   _TMR4CN1        DATA 0xff
0000            277   _TMR4H          DATA 0xa5
0000            278   _TMR4L          DATA 0xa4
0000            279   _TMR4RLH        DATA 0xa3
0000            280   _TMR4RLL        DATA 0xa2
0000            281   _TMR5CN0        DATA 0xc0
0000            282   _TMR5CN1        DATA 0xf1
0000            283   _TMR5H          DATA 0xd5
0000            284   _TMR5L          DATA 0xd4
0000            285   _TMR5RLH        DATA 0xd3
0000            286   _TMR5RLL        DATA 0xd2
0000            287   _UART0PCF       DATA 0xd9
0000            288   _UART1FCN0      DATA 0x9d
0000            289   _UART1FCN1      DATA 0xd8
0000            290   _UART1FCT       DATA 0xfa
0000            291   _UART1LIN       DATA 0x9e
0000            292   _UART1PCF       DATA 0xda
0000            293   _VDM0CN         DATA 0xff
0000            294   _WDTCN          DATA 0x97
0000            295   _XBR0           DATA 0xe1
0000            296   _XBR1           DATA 0xe2
0000            297   _XBR2           DATA 0xe3
0000            298   _XOSC0CN        DATA 0x86
0000            299   _DPTR           DATA 0x8382
0000            300   _TMR2RL         DATA 0xcbca
0000            301   _TMR3RL         DATA 0x9392
0000            302   _TMR4RL         DATA 0xa3a2
0000            303   _TMR5RL         DATA 0xd3d2
0000            304   _TMR0           DATA 0x8c8a
0000            305   _TMR1           DATA 0x8d8b
0000            306   _TMR2           DATA 0xcfce
0000            307   _TMR3           DATA 0x9594
0000            308   _TMR4           DATA 0xa5a4
0000            309   _TMR5           DATA 0xd5d4
0000            310   _SBRL1          DATA 0x9695
0000            311   _PCA0           DATA 0xfaf9
0000            312   _PCA0CP0        DATA 0xfcfb
0000            313   _PCA0CP1        DATA 0xeae9
0000            314   _PCA0CP2        DATA 0xeceb
0000            315   _PCA0CP3        DATA 0xf5f4
0000            316   _PCA0CP4        DATA 0x8584
0000            317   _PCA0CP5        DATA 0xdedd
0000            318   _ADC0ASA        DATA 0xb6b5
0000            319   _ADC0GT         DATA 0xc4c3
0000            320   _ADC0           DATA 0xbebd
0000            321   _ADC0LT         DATA 0xc6c5
0000            322   _DAC0           DATA 0x8584
0000            323   _DAC1           DATA 0x8a89
0000            324   _DAC2           DATA 0x8c8b
0000            325   _DAC3           DATA 0x8e8d
0000            326   ;--------------------------------------------------------
0000            327   ; special function bits
0000            328   ;--------------------------------------------------------
0000            329   _ACC_0          BIT 0xe0
0000            330   _ACC_1          BIT 0xe1
0000            331   _ACC_2          BIT 0xe2
0000            332   _ACC_3          BIT 0xe3
0000            333   _ACC_4          BIT 0xe4
0000            334   _ACC_5          BIT 0xe5
0000            335   _ACC_6          BIT 0xe6
0000            336   _ACC_7          BIT 0xe7
0000            337   _TEMPE          BIT 0xe8
0000            338   _ADGN0          BIT 0xe9
0000            339   _ADGN1          BIT 0xea
0000            340   _ADWINT         BIT 0xeb
0000            341   _ADBUSY         BIT 0xec
0000            342   _ADINT          BIT 0xed
0000            343   _IPOEN          BIT 0xee
0000            344   _ADEN           BIT 0xef
0000            345   _B_0            BIT 0xf0
0000            346   _B_1            BIT 0xf1
0000            347   _B_2            BIT 0xf2
0000            348   _B_3            BIT 0xf3
0000            349   _B_4            BIT 0xf4
0000            350   _B_5            BIT 0xf5
0000            351   _B_6            BIT 0xf6
0000            352   _B_7            BIT 0xf7
0000            353   _C0FIF          BIT 0xe8
0000            354   _C0RIF          BIT 0xe9
0000            355   _C1FIF          BIT 0xea
0000            356   _C1RIF          BIT 0xeb
0000            357   _C2FIF          BIT 0xec
0000            358   _C2RIF          BIT 0xed
0000            359   _C3FIF          BIT 0xee
0000            360   _C3RIF          BIT 0xef
0000            361   _D1SRC0         BIT 0x88
0000            362   _D1SRC1         BIT 0x89
0000            363   _D1AMEN         BIT 0x8a
0000            364   _D01REFSL       BIT 0x8b
0000            365   _D3SRC0         BIT 0x8c
0000            366   _D3SRC1         BIT 0x8d
0000            367   _D3AMEN         BIT 0x8e
0000            368   _D23REFSL       BIT 0x8f
0000            369   _D0UDIS         BIT 0x98
0000            370   _D1UDIS         BIT 0x99
0000            371   _D2UDIS         BIT 0x9a
0000            372   _D3UDIS         BIT 0x9b
0000            373   _EX0            BIT 0xa8
0000            374   _ET0            BIT 0xa9
0000            375   _EX1            BIT 0xaa
0000            376   _ET1            BIT 0xab
0000            377   _ES0            BIT 0xac
0000            378   _ET2            BIT 0xad
0000            379   _ESPI0          BIT 0xae
0000            380   _EA             BIT 0xaf
0000            381   _PX0            BIT 0xb8
0000            382   _PT0            BIT 0xb9
0000            383   _PX1            BIT 0xba
0000            384   _PT1            BIT 0xbb
0000            385   _PS0            BIT 0xbc
0000            386   _PT2            BIT 0xbd
0000            387   _PSPI0          BIT 0xbe
0000            388   _P0_0           BIT 0x80
0000            389   _P0_1           BIT 0x81
0000            390   _P0_2           BIT 0x82
0000            391   _P0_3           BIT 0x83
0000            392   _P0_4           BIT 0x84
0000            393   _P0_5           BIT 0x85
0000            394   _P0_6           BIT 0x86
0000            395   _P0_7           BIT 0x87
0000            396   _P1_0           BIT 0x90
0000            397   _P1_1           BIT 0x91
0000            398   _P1_2           BIT 0x92
0000            399   _P1_3           BIT 0x93
0000            400   _P1_4           BIT 0x94
0000            401   _P1_5           BIT 0x95
0000            402   _P1_6           BIT 0x96
0000            403   _P1_7           BIT 0x97
0000            404   _P2_0           BIT 0xa0
0000            405   _P2_1           BIT 0xa1
0000            406   _P2_2           BIT 0xa2
0000            407   _P2_3           BIT 0xa3
0000            408   _P2_4           BIT 0xa4
0000            409   _P2_5           BIT 0xa5
0000            410   _P2_6           BIT 0xa6
0000            411   _P3_0           BIT 0xb0
0000            412   _P3_1           BIT 0xb1
0000            413   _P3_2           BIT 0xb2
0000            414   _P3_3           BIT 0xb3
0000            415   _P3_4           BIT 0xb4
0000            416   _P3_7           BIT 0xb7
0000            417   _CCF0           BIT 0xd8
0000            418   _CCF1           BIT 0xd9
0000            419   _CCF2           BIT 0xda
0000            420   _CCF3           BIT 0xdb
0000            421   _CCF4           BIT 0xdc
0000            422   _CCF5           BIT 0xdd
0000            423   _CR             BIT 0xde
0000            424   _CF             BIT 0xdf
0000            425   _PARITY         BIT 0xd0
0000            426   _F1             BIT 0xd1
0000            427   _OV             BIT 0xd2
0000            428   _RS0            BIT 0xd3
0000            429   _RS1            BIT 0xd4
0000            430   _F0             BIT 0xd5
0000            431   _AC             BIT 0xd6
0000            432   _CY             BIT 0xd7
0000            433   _RI             BIT 0x98
0000            434   _TI             BIT 0x99
0000            435   _RB8            BIT 0x9a
0000            436   _TB8            BIT 0x9b
0000            437   _REN            BIT 0x9c
0000            438   _CE             BIT 0x9d
0000            439   _SMODE          BIT 0x9e
0000            440   _RI1            BIT 0xc8
0000            441   _TI1            BIT 0xc9
0000            442   _RBX1           BIT 0xca
0000            443   _TBX1           BIT 0xcb
0000            444   _REN1           BIT 0xcc
0000            445   _PERR1          BIT 0xcd
0000            446   _OVR1           BIT 0xce
0000            447   _SI             BIT 0xc0
0000            448   _ACK            BIT 0xc1
0000            449   _ARBLOST        BIT 0xc2
0000            450   _ACKRQ          BIT 0xc3
0000            451   _STO            BIT 0xc4
0000            452   _STA            BIT 0xc5
0000            453   _TXMODE         BIT 0xc6
0000            454   _MASTER         BIT 0xc7
0000            455   _SPIEN          BIT 0xf8
0000            456   _TXNF           BIT 0xf9
0000            457   _NSSMD0         BIT 0xfa
0000            458   _NSSMD1         BIT 0xfb
0000            459   _RXOVRN         BIT 0xfc
0000            460   _MODF           BIT 0xfd
0000            461   _WCOL           BIT 0xfe
0000            462   _SPIF           BIT 0xff
0000            463   _IT0            BIT 0x88
0000            464   _IE0            BIT 0x89
0000            465   _IT1            BIT 0x8a
0000            466   _IE1            BIT 0x8b
0000            467   _TR0            BIT 0x8c
0000            468   _TF0            BIT 0x8d
0000            469   _TR1            BIT 0x8e
0000            470   _TF1            BIT 0x8f
0000            471   _T2XCLK0        BIT 0xc8
0000            472   _T2XCLK1        BIT 0xc9
0000            473   _TR2            BIT 0xca
0000            474   _T2SPLIT        BIT 0xcb
0000            475   _TF2CEN         BIT 0xcc
0000            476   _TF2LEN         BIT 0xcd
0000            477   _TF2L           BIT 0xce
0000            478   _TF2H           BIT 0xcf
0000            479   _T4XCLK0        BIT 0x98
0000            480   _T4XCLK1        BIT 0x99
0000            481   _TR4            BIT 0x9a
0000            482   _T4SPLIT        BIT 0x9b
0000            483   _TF4CEN         BIT 0x9c
0000            484   _TF4LEN         BIT 0x9d
0000            485   _TF4L           BIT 0x9e
0000            486   _TF4H           BIT 0x9f
0000            487   _T5XCLK0        BIT 0xc0
0000            488   _T5XCLK1        BIT 0xc1
0000            489   _TR5            BIT 0xc2
0000            490   _T5SPLIT        BIT 0xc3
0000            491   _TF5CEN         BIT 0xc4
0000            492   _TF5LEN         BIT 0xc5
0000            493   _TF5L           BIT 0xc6
0000            494   _TF5H           BIT 0xc7
0000            495   _RIE            BIT 0xd8
0000            496   _RXTO0          BIT 0xd9
0000            497   _RXTO1          BIT 0xda
0000            498   _RFRQ           BIT 0xdb
0000            499   _TIE            BIT 0xdc
0000            500   _TXHOLD         BIT 0xdd
0000            501   _TXNF1          BIT 0xde
0000            502   _TFRQ           BIT 0xdf
0000            503   ;--------------------------------------------------------
0000            504   ; overlayable register banks
0000            505   ;--------------------------------------------------------
0000            506            rbank0 segment data overlay
0000            507   ;--------------------------------------------------------
0000            508   ; internal ram data
0000            509   ;--------------------------------------------------------
0000            510            rseg R_DSEG
0000            511   _overflow_count:
0000            512            ds 1
0001            513   _LCD_BUFF:
0001            514            ds 16
0011            515   _LCDprint_PARM_2:
0011            516            ds 1
0012            517   _write_rx_PARM_2:
0012            518            ds 2
0014            519   _write_rx_buff_1_55:
0014            520            ds 3
0017            521   _write_rx_sloc0_1_0:
0017            522            ds 2
0019            523   _display_rx_PARM_2:
0019            524            ds 2
001B            525   _calculate_period_s_PARM_2:
001B            526            ds 2
001D            527   _calculate_period_s_PARM_3:
001D            528            ds 2
001F            529   _main_mode_1_85:
001F            530            ds 2
0021            531   _main_V_R_1_85:
0021            532            ds 4
0025            533   _main_R_kOhms_1_85:
0025            534            ds 4
0029            535   _main_period_s_1_85:
0029            536            ds 4
002D            537   _main_capacitance_nF_1_85:
002D            538            ds 4
0031            539   _main_success_count_1_85:
0031            540            ds 2
0033            541   ;--------------------------------------------------------
0033            542   ; overlayable items in internal ram 
0033            543   ;--------------------------------------------------------
0000            544            rseg    R_OSEG
0000            545   _InitPinADC_PARM_2:
0000            546            ds 1
0001            547            rseg    R_OSEG
0001            548            rseg    R_OSEG
0001            549   ;--------------------------------------------------------
0001            550   ; indirectly addressable internal ram data
0001            551   ;--------------------------------------------------------
0000            552            rseg R_ISEG
0000            553   ;--------------------------------------------------------
0000            554   ; absolute internal ram data
0000            555   ;--------------------------------------------------------
0000            556            DSEG
0000            557   ;--------------------------------------------------------
0000            558   ; bit data
0000            559   ;--------------------------------------------------------
0000            560            rseg R_BSEG
0000            561   _LCDprint_PARM_3:
0000            562            DBIT    1
0001            563   ;--------------------------------------------------------
0001            564   ; paged external ram data
0001            565   ;--------------------------------------------------------
0000            566            rseg R_PSEG
0000            567   ;--------------------------------------------------------
0000            568   ; external ram data
0000            569   ;--------------------------------------------------------
0000            570            rseg R_XSEG
0000            571   ;--------------------------------------------------------
0000            572   ; absolute external ram data
0000            573   ;--------------------------------------------------------
0000            574            XSEG
0000            575   ;--------------------------------------------------------
0000            576   ; external initialized ram data
0000            577   ;--------------------------------------------------------
0000            578            rseg R_IXSEG
0000            579            rseg R_HOME
0000            580            rseg R_GSINIT
0000            581            rseg R_CSEG
0000            582   ;--------------------------------------------------------
0000            583   ; Reset entry point and interrupt vectors
0000            584   ;--------------------------------------------------------
0000            585            CSEG at 0x0000
0000 020000     586            ljmp    _crt0
0003            587   ;--------------------------------------------------------
0003            588   ; global & static initialisations
0003            589   ;--------------------------------------------------------
0000            590            rseg R_HOME
0000            591            rseg R_GSINIT
0000            592            rseg R_GSINIT
0000            593   ;--------------------------------------------------------
0000            594   ; data variables initialization
0000            595   ;--------------------------------------------------------
0000            596            rseg R_DINIT
0000            597            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            598   ;--------------------------------------------------------
0000            599   ; code
0000            600   ;--------------------------------------------------------
0000            601            rseg R_CSEG
0000            602   ;------------------------------------------------------------
0000            603   ;Allocation info for local variables in function '_c51_external_startup'
0000            604   ;------------------------------------------------------------
0000            605   ;------------------------------------------------------------
0000            606   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:67: char _c51_external_startup(void) {
0000            607   ;        -----------------------------------------
0000            608   ;         function _c51_external_startup
0000            609   ;        -----------------------------------------
0000            610   __c51_external_startup:
0000            611            using   0
0000            612   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:69: SFRPAGE = 0x00;
0000 75A700     613            mov     _SFRPAGE,#0x00
0003            614   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:70: WDTCN = 0xDE; // First Key
0003 7597DE     615            mov     _WDTCN,#0xDE
0006            616   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:71: WDTCN = 0xAD; // Second Key
0006 7597AD     617            mov     _WDTCN,#0xAD
0009            618   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:73: VDM0CN |= 0x80;
0009 43FF80     619            orl     _VDM0CN,#0x80
000C            620   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:74: RSTSRC=0x02|0x04;  // Enable Reset on Missing Clock Detector and VDD
000C 75EF06     621            mov     _RSTSRC,#0x06
000F            622   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:82: SFRPAGE = 0x10;
000F 75A710     623            mov     _SFRPAGE,#0x10
0012            624   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:83: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     625            mov     _PFE0CN,#0x20
0015            626   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:84: SFRPAGE = 0x00;
0015 75A700     627            mov     _SFRPAGE,#0x00
0018            628   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:106: CLKSEL = 0x00;
0018 75A900     629            mov     _CLKSEL,#0x00
001B            630   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:107: CLKSEL = 0x00;
001B 75A900     631            mov     _CLKSEL,#0x00
001E            632   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:108: while ((CLKSEL & 0x80) == 0);
001E            633   L002001?:
001E E5A9       634            mov     a,_CLKSEL
0020 30E738     635            jnb     acc.7,L002001?
0023            636   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:109: CLKSEL = 0x03;
0023 75A903     637            mov     _CLKSEL,#0x03
0026            638   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:110: CLKSEL = 0x03;
0026 75A903     639            mov     _CLKSEL,#0x03
0029            640   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:111: while ((CLKSEL & 0x80) == 0);
0029            641   L002004?:
0029 E5A9       642            mov     a,_CLKSEL
002B 30E7B8     643            jnb     acc.7,L002004?
002E            644   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:116: P0MDOUT |= 0x10; // Enable UART0 TX As Push-Pull Output
002E 43A410     645            orl     _P0MDOUT,#0x10
0031            646   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:117: XBR0     = 0x01; // Enable UART0 on P0.4 (TX) and P0.5 (RX)
0031 75E101     647            mov     _XBR0,#0x01
0034            648   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:118: XBR1     = 0X00; // Enable T0 on P0.0
0034 75E200     649            mov     _XBR1,#0x00
0037            650   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:119: XBR2     = 0x40; // Enable Crossbar and Weak Pull-Ups
0037 75E340     651            mov     _XBR2,#0x40
003A            652   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:126: SCON0 = 0x10;
003A 759810     653            mov     _SCON0,#0x10
003D            654   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:127: CKCON0 |= 0b_0000_0000 ; // Timer 1 Uses SYSCLK / 12
003D 858E8E     655            mov     _CKCON0,_CKCON0
0040            656   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:128: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L)); // Set Timer1 Reload Value, Initial Value
0040 758DE6     657            mov     _TH1,#0xE6
0043            658   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:129: TL1 = TH1;      // Init Timer1
0043 858D8B     659            mov     _TL1,_TH1
0046            660   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:130: TMOD &= ~0xf0;  // TMOD: Timer 1 in 8-bit auto-reload
0046 53890F     661            anl     _TMOD,#0x0F
0049            662   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:131: TMOD |=  0x20;
0049 438920     663            orl     _TMOD,#0x20
004C            664   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:132: TR1 = 1; // Start Timer1
004C D28E       665            setb    _TR1
004E            666   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:133: TI = 1;  // Indicate TX0 Ready
004E D299       667            setb    _TI
0050            668   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:135: return 0;
0050 758200     669            mov     dpl,#0x00
0053 22         670            ret
0054            671   ;------------------------------------------------------------
0054            672   ;Allocation info for local variables in function 'InitADC'
0054            673   ;------------------------------------------------------------
0054            674   ;------------------------------------------------------------
0054            675   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:138: void InitADC(void) {
0054            676   ;        -----------------------------------------
0054            677   ;         function InitADC
0054            678   ;        -----------------------------------------
0054            679   _InitADC:
0054            680   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:139: SFRPAGE = 0x00;
0054 75A700     681            mov     _SFRPAGE,#0x00
0057            682   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:140: ADEN=0; // Disable ADC
0057 C2EF       683            clr     _ADEN
0059            684   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:145: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     685            mov     _ADC0CN1,#0x80
005C            686   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:149: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     687            mov     _ADC0CF0,#0x20
005F            688   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:153: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     689            mov     _ADC0CF1,#0x1E
0062            690   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:162: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     691            mov     _ADC0CN0,#0x00
0065            692   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:167: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     693            mov     _ADC0CF2,#0x3F
0068            694   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:171: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     695            mov     _ADC0CN2,#0x00
006B            696   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:173: ADEN=1; // Enable ADC
006B D2EF       697            setb    _ADEN
006D 22         698            ret
006E            699   ;------------------------------------------------------------
006E            700   ;Allocation info for local variables in function 'InitPinADC'
006E            701   ;------------------------------------------------------------
006E            702   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
006E            703   ;portno                    Allocated to registers r2 
006E            704   ;mask                      Allocated to registers r3 
006E            705   ;------------------------------------------------------------
006E            706   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:176: void InitPinADC(unsigned char portno, unsigned char pinno) {
006E            707   ;        -----------------------------------------
006E            708   ;         function InitPinADC
006E            709   ;        -----------------------------------------
006E            710   _InitPinADC:
006E AA82       711            mov     r2,dpl
0070            712   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:179: mask = 1 << pinno;
0070 8560F0     713            mov     b,_InitPinADC_PARM_2
0073 05F0       714            inc     b
0075 7401       715            mov     a,#0x01
0077 8000       716            sjmp    L004013?
0079            717   L004011?:
0079 25E0       718            add     a,acc
007B            719   L004013?:
007B D5F0B8     720            djnz    b,L004011?
007E FB         721            mov     r3,a
007F            722   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:181: SFRPAGE = 0x20;
007F 75A720     723            mov     _SFRPAGE,#0x20
0082            724   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:182: switch(portno) {
0082 BA00F8     725            cjne    r2,#0x00,L004014?
0085 8000       726            sjmp    L004001?
0087            727   L004014?:
0087 BA0178     728            cjne    r2,#0x01,L004015?
008A 8000       729            sjmp    L004002?
008C            730   L004015?:
008C            731   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:183: case 0:
008C BA02F8     732            cjne    r2,#0x02,L004005?
008F 8000       733            sjmp    L004003?
0091            734   L004001?:
0091            735   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:184: P0MDIN &= (~mask); // Set Pin as Analog Input
0091 EB         736            mov     a,r3
0092 F4         737            cpl     a
0093 FA         738            mov     r2,a
0094 52F1       739            anl     _P0MDIN,a
0096            740   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:185: P0SKIP |= mask; // Skip Crossbar Decoding for this Pin
0096 EB         741            mov     a,r3
0097 42D4       742            orl     _P0SKIP,a
0099            743   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:186: break;
0099            744   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:187: case 1:
0099 8000       745            sjmp    L004005?
009B            746   L004002?:
009B            747   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:188: P1MDIN &= (~mask); // Set Pin as Analog Input
009B EB         748            mov     a,r3
009C F4         749            cpl     a
009D FA         750            mov     r2,a
009E 52F2       751            anl     _P1MDIN,a
00A0            752   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:189: P1SKIP |= mask; // Skip Crossbar Decoding for this Pin
00A0 EB         753            mov     a,r3
00A1 42D5       754            orl     _P1SKIP,a
00A3            755   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:190: break;
00A3            756   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:191: case 2:
00A3 8000       757            sjmp    L004005?
00A5            758   L004003?:
00A5            759   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:192: P2MDIN &= (~mask); // Set Pin as Analog Input
00A5 EB         760            mov     a,r3
00A6 F4         761            cpl     a
00A7 FA         762            mov     r2,a
00A8 52F3       763            anl     _P2MDIN,a
00AA            764   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:193: P2SKIP |= mask; // Skip Crossbar Decoding for this Pin
00AA EB         765            mov     a,r3
00AB 42CC       766            orl     _P2SKIP,a
00AD            767   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:197: }
00AD            768   L004005?:
00AD            769   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:198: SFRPAGE = 0x00;
00AD 75A700     770            mov     _SFRPAGE,#0x00
00B0 22         771            ret
00B1            772   ;------------------------------------------------------------
00B1            773   ;Allocation info for local variables in function 'ADC_at_Pin'
00B1            774   ;------------------------------------------------------------
00B1            775   ;pin                       Allocated to registers 
00B1            776   ;------------------------------------------------------------
00B1            777   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:201: unsigned int ADC_at_Pin(unsigned char pin) {
00B1            778   ;        -----------------------------------------
00B1            779   ;         function ADC_at_Pin
00B1            780   ;        -----------------------------------------
00B1            781   _ADC_at_Pin:
00B1 8582BB     782            mov     _ADC0MX,dpl
00B4            783   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:203: ADINT = 0;
00B4 C2ED       784            clr     _ADINT
00B6            785   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:204: ADBUSY = 1;     // Convert Voltage at the Pin
00B6 D2EC       786            setb    _ADBUSY
00B8            787   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:205: while (!ADINT); // Wait for Conversion to Complete
00B8            788   L005001?:
00B8 30ED78     789            jnb     _ADINT,L005001?
00BB            790   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:206: return (ADC0);
00BB 85BD82     791            mov     dpl,_ADC0
00BE 85BE83     792            mov     dph,(_ADC0 >> 8)
00C1 22         793            ret
00C2            794   ;------------------------------------------------------------
00C2            795   ;Allocation info for local variables in function 'Volts_at_Pin'
00C2            796   ;------------------------------------------------------------
00C2            797   ;pin                       Allocated to registers r2 
00C2            798   ;------------------------------------------------------------
00C2            799   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:209: float Volts_at_Pin(unsigned char pin) {
00C2            800   ;        -----------------------------------------
00C2            801   ;         function Volts_at_Pin
00C2            802   ;        -----------------------------------------
00C2            803   _Volts_at_Pin:
00C2            804   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:211: (ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111
00C2 120000     805            lcall   _ADC_at_Pin
00C5 120000     806            lcall   ___uint2fs
00C8 AA82       807            mov     r2,dpl
00CA AB83       808            mov     r3,dph
00CC ACF0       809            mov     r4,b
00CE FD         810            mov     r5,a
00CF C002       811            push    ar2
00D1 C003       812            push    ar3
00D3 C004       813            push    ar4
00D5 C005       814            push    ar5
00D7 906C8B     815            mov     dptr,#0x6C8B
00DA 75F053     816            mov     b,#0x53
00DD 7440       817            mov     a,#0x40
00DF 120000     818            lcall   ___fsmul
00E2 AA82       819            mov     r2,dpl
00E4 AB83       820            mov     r3,dph
00E6 ACF0       821            mov     r4,b
00E8 FD         822            mov     r5,a
00E9 E581       823            mov     a,sp
00EB 24FC       824            add     a,#0xfc
00ED F581       825            mov     sp,a
00EF E4         826            clr     a
00F0 C0E0       827            push    acc
00F2 74FC       828            mov     a,#0xFC
00F4 C0E0       829            push    acc
00F6 747F       830            mov     a,#0x7F
00F8 C0E0       831            push    acc
00FA 7446       832            mov     a,#0x46
00FC C0E0       833            push    acc
00FE 8A82       834            mov     dpl,r2
0100 8B83       835            mov     dph,r3
0102 8CF0       836            mov     b,r4
0104 ED         837            mov     a,r5
0105 120000     838            lcall   ___fsdiv
0108 AA82       839            mov     r2,dpl
010A AB83       840            mov     r3,dph
010C ACF0       841            mov     r4,b
010E FD         842            mov     r5,a
010F E581       843            mov     a,sp
0111 24FC       844            add     a,#0xfc
0113 F581       845            mov     sp,a
0115 8A82       846            mov     dpl,r2
0117 8B83       847            mov     dph,r3
0119 8CF0       848            mov     b,r4
011B ED         849            mov     a,r5
011C 22         850            ret
011D            851   ;------------------------------------------------------------
011D            852   ;Allocation info for local variables in function 'Timer3us'
011D            853   ;------------------------------------------------------------
011D            854   ;us                        Allocated to registers r2 
011D            855   ;i                         Allocated to registers r3 
011D            856   ;------------------------------------------------------------
011D            857   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:218: void Timer3us(unsigned char us) {
011D            858   ;        -----------------------------------------
011D            859   ;         function Timer3us
011D            860   ;        -----------------------------------------
011D            861   _Timer3us:
011D AA82       862            mov     r2,dpl
011F            863   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:222: CKCON0 |= 0b_0100_0000;
011F 438E40     864            orl     _CKCON0,#0x40
0122            865   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:224: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to Overflow in 1us
0122 7592B8     866            mov     _TMR3RL,#0xB8
0125 7593FF     867            mov     (_TMR3RL >> 8),#0xFF
0128            868   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:225: TMR3 = TMR3RL;                 // Initialize Timer3 for First Overflow
0128 859294     869            mov     _TMR3,_TMR3RL
012B 859395     870            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
012E            871   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:227: TMR3CN0 = 0x04;                 // Start Timer3 and Clear Overflow Flag
012E 759104     872            mov     _TMR3CN0,#0x04
0131            873   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:228: for (i = 0; i < us; i++) {      // Count Overflows (#Microseconds)
0131 7B00       874            mov     r3,#0x00
0133            875   L007004?:
0133 C3         876            clr     c
0134 EB         877            mov     a,r3
0135 9A         878            subb    a,r2
0136 5000       879            jnc     L007007?
0138            880   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:229: while (!(TMR3CN0 & 0x80));  // Wait for Overflow
0138            881   L007001?:
0138 E591       882            mov     a,_TMR3CN0
013A 30E780     883            jnb     acc.7,L007001?
013D            884   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:230: TMR3CN0 &= ~(0x80);         // Clear Overflow Indicator
013D 53917F     885            anl     _TMR3CN0,#0x7F
0140            886   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:228: for (i = 0; i < us; i++) {      // Count Overflows (#Microseconds)
0140 0B         887            inc     r3
0141 8000       888            sjmp    L007004?
0143            889   L007007?:
0143            890   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:232: TMR3CN0 = 0 ;                   // Stop Timer3 and Clear Overflow Flag
0143 759100     891            mov     _TMR3CN0,#0x00
0146 22         892            ret
0147            893   ;------------------------------------------------------------
0147            894   ;Allocation info for local variables in function 'waitms'
0147            895   ;------------------------------------------------------------
0147            896   ;ms                        Allocated to registers r2 r3 
0147            897   ;j                         Allocated to registers r4 r5 
0147            898   ;k                         Allocated to registers r6 
0147            899   ;------------------------------------------------------------
0147            900   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:235: void waitms(unsigned int ms) {
0147            901   ;        -----------------------------------------
0147            902   ;         function waitms
0147            903   ;        -----------------------------------------
0147            904   _waitms:
0147 AA82       905            mov     r2,dpl
0149 AB83       906            mov     r3,dph
014B            907   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:238: for (j=0; j<ms; j++)
014B 7C00       908            mov     r4,#0x00
014D 7D00       909            mov     r5,#0x00
014F            910   L008005?:
014F C3         911            clr     c
0150 EC         912            mov     a,r4
0151 9A         913            subb    a,r2
0152 ED         914            mov     a,r5
0153 9B         915            subb    a,r3
0154 5000       916            jnc     L008009?
0156            917   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:239: for (k=0; k<4; k++) Timer3us(250);
0156 7E00       918            mov     r6,#0x00
0158            919   L008001?:
0158 BE0480     920            cjne    r6,#0x04,L008018?
015B            921   L008018?:
015B 5000       922            jnc     L008007?
015D 7582FA     923            mov     dpl,#0xFA
0160 C002       924            push    ar2
0162 C003       925            push    ar3
0164 C004       926            push    ar4
0166 C005       927            push    ar5
0168 C006       928            push    ar6
016A 120000     929            lcall   _Timer3us
016D D006       930            pop     ar6
016F D005       931            pop     ar5
0171 D004       932            pop     ar4
0173 D003       933            pop     ar3
0175 D002       934            pop     ar2
0177 0E         935            inc     r6
0178 8000       936            sjmp    L008001?
017A            937   L008007?:
017A            938   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:238: for (j=0; j<ms; j++)
017A 0C         939            inc     r4
017B BC00C0     940            cjne    r4,#0x00,L008005?
017E 0D         941            inc     r5
017F 8000       942            sjmp    L008005?
0181            943   L008009?:
0181 22         944            ret
0182            945   ;------------------------------------------------------------
0182            946   ;Allocation info for local variables in function 'TIMER0_Init'
0182            947   ;------------------------------------------------------------
0182            948   ;------------------------------------------------------------
0182            949   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:242: void TIMER0_Init(void) {
0182            950   ;        -----------------------------------------
0182            951   ;         function TIMER0_Init
0182            952   ;        -----------------------------------------
0182            953   _TIMER0_Init:
0182            954   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:243: TMOD &= 0b_1111_0000; // Set the Bits of Timer/Counter 0 to 0
0182 5389F0     955            anl     _TMOD,#0xF0
0185            956   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:244: TMOD |= 0b_0000_0001; // Timer/Counter 0 Used As 16-Bit Timer
0185 438901     957            orl     _TMOD,#0x01
0188            958   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:245: TR0 = 0; // Stop Timer/Counter 0
0188 C28C       959            clr     _TR0
018A 22         960            ret
018B            961   ;------------------------------------------------------------
018B            962   ;Allocation info for local variables in function 'Serial_Init'
018B            963   ;------------------------------------------------------------
018B            964   ;------------------------------------------------------------
018B            965   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:248: void Serial_Init(void) {
018B            966   ;        -----------------------------------------
018B            967   ;         function Serial_Init
018B            968   ;        -----------------------------------------
018B            969   _Serial_Init:
018B            970   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:249: waitms(500); // Give Putty a chance to start.
018B 9001F4     971            mov     dptr,#0x01F4
018E 120000     972            lcall   _waitms
0191            973   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:250: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0191 7400       974            mov     a,#__str_0
0193 C0E0       975            push    acc
0195 74C2       976            mov     a,#(__str_0 >> 8)
0197 C0E0       977            push    acc
0199 7480       978            mov     a,#0x80
019B C0E0       979            push    acc
019D 120000     980            lcall   _printf
01A0 1581       981            dec     sp
01A2 1581       982            dec     sp
01A4 1581       983            dec     sp
01A6 22         984            ret
01A7            985   ;------------------------------------------------------------
01A7            986   ;Allocation info for local variables in function 'LCD_pulse'
01A7            987   ;------------------------------------------------------------
01A7            988   ;------------------------------------------------------------
01A7            989   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:253: void LCD_pulse(void) {
01A7            990   ;        -----------------------------------------
01A7            991   ;         function LCD_pulse
01A7            992   ;        -----------------------------------------
01A7            993   _LCD_pulse:
01A7            994   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:254: LCD_E = 1; // Pulse the Enable Pin
01A7 D2A0       995            setb    _P2_0
01A9            996   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:255: Timer3us(40); // Wait for 40us
01A9 758228     997            mov     dpl,#0x28
01AC 120000     998            lcall   _Timer3us
01AF            999   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:256: LCD_E = 0; // Pulse the Enable Pin
01AF C2A0      1000            clr     _P2_0
01B1 22        1001            ret
01B2           1002   ;------------------------------------------------------------
01B2           1003   ;Allocation info for local variables in function 'LCD_byte'
01B2           1004   ;------------------------------------------------------------
01B2           1005   ;x                         Allocated to registers r2 
01B2           1006   ;------------------------------------------------------------
01B2           1007   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:259: void LCD_byte(unsigned char x) {
01B2           1008   ;        -----------------------------------------
01B2           1009   ;         function LCD_byte
01B2           1010   ;        -----------------------------------------
01B2           1011   _LCD_byte:
01B2 AA82      1012            mov     r2,dpl
01B4           1013   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:262: ACC = x; // Send High Nibble
01B4 8AE0      1014            mov     _ACC,r2
01B6           1015   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:263: LCD_D7 = ACC_7;
01B6 A2E7      1016            mov     c,_ACC_7
01B8 9290      1017            mov     _P1_0,c
01BA           1018   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:264: LCD_D6 = ACC_6;
01BA A2E6      1019            mov     c,_ACC_6
01BC 9291      1020            mov     _P1_1,c
01BE           1021   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:265: LCD_D5 = ACC_5;
01BE A2E5      1022            mov     c,_ACC_5
01C0 9292      1023            mov     _P1_2,c
01C2           1024   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:266: LCD_D4 = ACC_4;
01C2 A2E4      1025            mov     c,_ACC_4
01C4 9293      1026            mov     _P1_3,c
01C6           1027   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:267: LCD_pulse();
01C6 C002      1028            push    ar2
01C8 120000    1029            lcall   _LCD_pulse
01CB           1030   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:269: Timer3us(40); // Wait for 40us
01CB 758228    1031            mov     dpl,#0x28
01CE 120000    1032            lcall   _Timer3us
01D1 D002      1033            pop     ar2
01D3           1034   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:271: ACC = x; // Send Low Nibble
01D3 8AE0      1035            mov     _ACC,r2
01D5           1036   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:272: LCD_D7 = ACC_3;
01D5 A2E3      1037            mov     c,_ACC_3
01D7 9290      1038            mov     _P1_0,c
01D9           1039   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:273: LCD_D6 = ACC_2;
01D9 A2E2      1040            mov     c,_ACC_2
01DB 9291      1041            mov     _P1_1,c
01DD           1042   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:274: LCD_D5 = ACC_1;
01DD A2E1      1043            mov     c,_ACC_1
01DF 9292      1044            mov     _P1_2,c
01E1           1045   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:275: LCD_D4 = ACC_0;
01E1 A2E0      1046            mov     c,_ACC_0
01E3 9293      1047            mov     _P1_3,c
01E5           1048   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:276: LCD_pulse();
01E5 020000    1049            ljmp    _LCD_pulse
01E8           1050   ;------------------------------------------------------------
01E8           1051   ;Allocation info for local variables in function 'WriteData'
01E8           1052   ;------------------------------------------------------------
01E8           1053   ;x                         Allocated to registers r2 
01E8           1054   ;------------------------------------------------------------
01E8           1055   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:279: void WriteData(unsigned char x) {
01E8           1056   ;        -----------------------------------------
01E8           1057   ;         function WriteData
01E8           1058   ;        -----------------------------------------
01E8           1059   _WriteData:
01E8 AA82      1060            mov     r2,dpl
01EA           1061   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:280: LCD_RS = 1; // Set LCD to Data Mode
01EA D297      1062            setb    _P1_7
01EC           1063   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:281: LCD_byte(x); // Write the Data
01EC 8A82      1064            mov     dpl,r2
01EE 120000    1065            lcall   _LCD_byte
01F1           1066   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:282: waitms(2); // Wait for 2ms
01F1 900002    1067            mov     dptr,#0x0002
01F4 020000    1068            ljmp    _waitms
01F7           1069   ;------------------------------------------------------------
01F7           1070   ;Allocation info for local variables in function 'WriteCommand'
01F7           1071   ;------------------------------------------------------------
01F7           1072   ;x                         Allocated to registers r2 
01F7           1073   ;------------------------------------------------------------
01F7           1074   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:285: void WriteCommand(unsigned char x) {
01F7           1075   ;        -----------------------------------------
01F7           1076   ;         function WriteCommand
01F7           1077   ;        -----------------------------------------
01F7           1078   _WriteCommand:
01F7 AA82      1079            mov     r2,dpl
01F9           1080   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:286: LCD_RS = 0; // Set LCD to Command Mode
01F9 C297      1081            clr     _P1_7
01FB           1082   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:287: LCD_byte(x); // Write the Command
01FB 8A82      1083            mov     dpl,r2
01FD 120000    1084            lcall   _LCD_byte
0200           1085   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:288: waitms(5); // Wait for 5ms
0200 900005    1086            mov     dptr,#0x0005
0203 020000    1087            ljmp    _waitms
0206           1088   ;------------------------------------------------------------
0206           1089   ;Allocation info for local variables in function 'LCD_4BIT'
0206           1090   ;------------------------------------------------------------
0206           1091   ;------------------------------------------------------------
0206           1092   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:291: void LCD_4BIT(void) {
0206           1093   ;        -----------------------------------------
0206           1094   ;         function LCD_4BIT
0206           1095   ;        -----------------------------------------
0206           1096   _LCD_4BIT:
0206           1097   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:292: LCD_E = 0; // Resting State of LCD Enable Pin is 0.
0206 C2A0      1098            clr     _P2_0
0208           1099   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:293: waitms(20); // Wait for 20ms
0208 900014    1100            mov     dptr,#0x0014
020B 120000    1101            lcall   _waitms
020E           1102   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:296: WriteCommand(0x33); // Change to 8-bit Mode
020E 758233    1103            mov     dpl,#0x33
0211 120000    1104            lcall   _WriteCommand
0214           1105   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:297: WriteCommand(0x33); // Change to 8-bit Mode
0214 758233    1106            mov     dpl,#0x33
0217 120000    1107            lcall   _WriteCommand
021A           1108   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:298: WriteCommand(0x32); // Change to 4-bit Mode
021A 758232    1109            mov     dpl,#0x32
021D 120000    1110            lcall   _WriteCommand
0220           1111   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:301: WriteCommand(0x28); // 4-bit, 2 Line, 5x7 Dots
0220 758228    1112            mov     dpl,#0x28
0223 120000    1113            lcall   _WriteCommand
0226           1114   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:302: WriteCommand(0x0c); // Display On, No Cursor, No Blink
0226 75820C    1115            mov     dpl,#0x0C
0229 120000    1116            lcall   _WriteCommand
022C           1117   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:303: WriteCommand(0x01); // Clear Screen Command (Takes Some Time)
022C 758201    1118            mov     dpl,#0x01
022F 120000    1119            lcall   _WriteCommand
0232           1120   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:304: waitms(20); // Wait 20ms for Clear Screen Command to Finish
0232 900014    1121            mov     dptr,#0x0014
0235 020000    1122            ljmp    _waitms
0238           1123   ;------------------------------------------------------------
0238           1124   ;Allocation info for local variables in function 'LCDprint'
0238           1125   ;------------------------------------------------------------
0238           1126   ;line                      Allocated with name '_LCDprint_PARM_2'
0238           1127   ;string                    Allocated to registers r2 r3 r4 
0238           1128   ;j                         Allocated to registers r5 r6 
0238           1129   ;------------------------------------------------------------
0238           1130   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:307: void LCDprint(char * string, unsigned char line, bit clear) {
0238           1131   ;        -----------------------------------------
0238           1132   ;         function LCDprint
0238           1133   ;        -----------------------------------------
0238           1134   _LCDprint:
0238 AA82      1135            mov     r2,dpl
023A AB83      1136            mov     r3,dph
023C ACF0      1137            mov     r4,b
023E           1138   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:310: WriteCommand(line == 2 ? 0xc0 : 0x80); // Set Cursor
023E 7402      1139            mov     a,#0x02
0240 B51880    1140            cjne    a,_LCDprint_PARM_2,L016013?
0243 7DC0      1141            mov     r5,#0xC0
0245 8000      1142            sjmp    L016014?
0247           1143   L016013?:
0247 7D80      1144            mov     r5,#0x80
0249           1145   L016014?:
0249 8D82      1146            mov     dpl,r5
024B C002      1147            push    ar2
024D C003      1148            push    ar3
024F C004      1149            push    ar4
0251 120000    1150            lcall   _WriteCommand
0254           1151   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:311: waitms(5); // Wait for 5ms
0254 900005    1152            mov     dptr,#0x0005
0257 120000    1153            lcall   _waitms
025A D004      1154            pop     ar4
025C D003      1155            pop     ar3
025E D002      1156            pop     ar2
0260           1157   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:312: for (j = 0; string[j] != 0; j++) WriteData(string[j]); // Write Message
0260 7D00      1158            mov     r5,#0x00
0262 7E00      1159            mov     r6,#0x00
0264           1160   L016003?:
0264 ED        1161            mov     a,r5
0265 2A        1162            add     a,r2
0266 FF        1163            mov     r7,a
0267 EE        1164            mov     a,r6
0268 3B        1165            addc    a,r3
0269 F8        1166            mov     r0,a
026A 8C01      1167            mov     ar1,r4
026C 8F82      1168            mov     dpl,r7
026E 8883      1169            mov     dph,r0
0270 89F0      1170            mov     b,r1
0272 120000    1171            lcall   __gptrget
0275 FF        1172            mov     r7,a
0276 6000      1173            jz      L016006?
0278 8F82      1174            mov     dpl,r7
027A C002      1175            push    ar2
027C C003      1176            push    ar3
027E C004      1177            push    ar4
0280 C005      1178            push    ar5
0282 C006      1179            push    ar6
0284 120000    1180            lcall   _WriteData
0287 D006      1181            pop     ar6
0289 D005      1182            pop     ar5
028B D004      1183            pop     ar4
028D D003      1184            pop     ar3
028F D002      1185            pop     ar2
0291 0D        1186            inc     r5
0292 BD0000    1187            cjne    r5,#0x00,L016003?
0295 0E        1188            inc     r6
0296 8000      1189            sjmp    L016003?
0298           1190   L016006?:
0298           1191   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:313: if (clear) for (; j < CHARS_PER_LINE; j++) WriteData(' '); // Clear Rest of Line
0298 3000C0    1192            jnb     _LCDprint_PARM_3,L016011?
029B 8D02      1193            mov     ar2,r5
029D 8E03      1194            mov     ar3,r6
029F           1195   L016007?:
029F C3        1196            clr     c
02A0 EA        1197            mov     a,r2
02A1 9410      1198            subb    a,#0x10
02A3 EB        1199            mov     a,r3
02A4 6480      1200            xrl     a,#0x80
02A6 9480      1201            subb    a,#0x80
02A8 5000      1202            jnc     L016011?
02AA 758220    1203            mov     dpl,#0x20
02AD C002      1204            push    ar2
02AF C003      1205            push    ar3
02B1 120000    1206            lcall   _WriteData
02B4 D003      1207            pop     ar3
02B6 D002      1208            pop     ar2
02B8 0A        1209            inc     r2
02B9 BA0000    1210            cjne    r2,#0x00,L016007?
02BC 0B        1211            inc     r3
02BD 8000      1212            sjmp    L016007?
02BF           1213   L016011?:
02BF 22        1214            ret
02C0           1215   ;------------------------------------------------------------
02C0           1216   ;Allocation info for local variables in function 'write_rx'
02C0           1217   ;------------------------------------------------------------
02C0           1218   ;len                       Allocated with name '_write_rx_PARM_2'
02C0           1219   ;buff                      Allocated with name '_write_rx_buff_1_55'
02C0           1220   ;j                         Allocated with name '_write_rx_sloc0_1_0'
02C0           1221   ;c                         Allocated to registers r3 
02C0           1222   ;sloc0                     Allocated with name '_write_rx_sloc0_1_0'
02C0           1223   ;------------------------------------------------------------
02C0           1224   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:316: int write_rx(char* buff, int len) {
02C0           1225   ;        -----------------------------------------
02C0           1226   ;         function write_rx
02C0           1227   ;        -----------------------------------------
02C0           1228   _write_rx:
02C0 8582A8    1229            mov     _write_rx_buff_1_55,dpl
02C3 8583A9    1230            mov     (_write_rx_buff_1_55 + 1),dph
02C6 85F0AA    1231            mov     (_write_rx_buff_1_55 + 2),b
02C9           1232   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:320: for (j = 0; j < (len-1); j++) {
02C9 E4        1233            clr     a
02CA F5F8      1234            mov     _write_rx_sloc0_1_0,a
02CC F5F9      1235            mov     (_write_rx_sloc0_1_0 + 1),a
02CE E5C8      1236            mov     a,_write_rx_PARM_2
02D0 24FF      1237            add     a,#0xff
02D2 FF        1238            mov     r7,a
02D3 E5C9      1239            mov     a,(_write_rx_PARM_2 + 1)
02D5 34FF      1240            addc    a,#0xff
02D7 F8        1241            mov     r0,a
02D8 7900      1242            mov     r1,#0x00
02DA 7A00      1243            mov     r2,#0x00
02DC           1244   L017005?:
02DC C3        1245            clr     c
02DD E9        1246            mov     a,r1
02DE 9F        1247            subb    a,r7
02DF EA        1248            mov     a,r2
02E0 6480      1249            xrl     a,#0x80
02E2 88F0      1250            mov     b,r0
02E4 63F080    1251            xrl     b,#0x80
02E7 95F0      1252            subb    a,b
02E9 5000      1253            jnc     L017008?
02EB           1254   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:321: c = getchar();
02EB C002      1255            push    ar2
02ED C007      1256            push    ar7
02EF C000      1257            push    ar0
02F1 C001      1258            push    ar1
02F3 120000    1259            lcall   _getchar
02F6 AB82      1260            mov     r3,dpl
02F8 D001      1261            pop     ar1
02FA D000      1262            pop     ar0
02FC D007      1263            pop     ar7
02FE D002      1264            pop     ar2
0300           1265   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:322: if ( (c == '\n') || (c == '\r') ) {
0300 BB0A00    1266            cjne    r3,#0x0A,L017015?
0303 8000      1267            sjmp    L017001?
0305           1268   L017015?:
0305 BB0D80    1269            cjne    r3,#0x0D,L017002?
0308           1270   L017001?:
0308           1271   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:323: buff[j] = 0;
0308 E5F8      1272            mov     a,_write_rx_sloc0_1_0
030A 25A8      1273            add     a,_write_rx_buff_1_55
030C FC        1274            mov     r4,a
030D E5F9      1275            mov     a,(_write_rx_sloc0_1_0 + 1)
030F 35A9      1276            addc    a,(_write_rx_buff_1_55 + 1)
0311 FD        1277            mov     r5,a
0312 AEAA      1278            mov     r6,(_write_rx_buff_1_55 + 2)
0314 8C82      1279            mov     dpl,r4
0316 8D83      1280            mov     dph,r5
0318 8EF0      1281            mov     b,r6
031A E4        1282            clr     a
031B 120000    1283            lcall   __gptrput
031E           1284   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:324: return j;
031E 85F882    1285            mov     dpl,_write_rx_sloc0_1_0
0321 85F983    1286            mov     dph,(_write_rx_sloc0_1_0 + 1)
0324 22        1287            ret
0325           1288   L017002?:
0325           1289   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:326: buff[j] = c;
0325 E9        1290            mov     a,r1
0326 25A8      1291            add     a,_write_rx_buff_1_55
0328 FC        1292            mov     r4,a
0329 EA        1293            mov     a,r2
032A 35A9      1294            addc    a,(_write_rx_buff_1_55 + 1)
032C FD        1295            mov     r5,a
032D AEAA      1296            mov     r6,(_write_rx_buff_1_55 + 2)
032F 8C82      1297            mov     dpl,r4
0331 8D83      1298            mov     dph,r5
0333 8EF0      1299            mov     b,r6
0335 EB        1300            mov     a,r3
0336 120000    1301            lcall   __gptrput
0339           1302   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:320: for (j = 0; j < (len-1); j++) {
0339 09        1303            inc     r1
033A B90000    1304            cjne    r1,#0x00,L017018?
033D 0A        1305            inc     r2
033E           1306   L017018?:
033E 89F8      1307            mov     _write_rx_sloc0_1_0,r1
0340 8AF9      1308            mov     (_write_rx_sloc0_1_0 + 1),r2
0342 8000      1309            sjmp    L017005?
0344           1310   L017008?:
0344           1311   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:329: buff[j] = 0;
0344 E5F8      1312            mov     a,_write_rx_sloc0_1_0
0346 25A8      1313            add     a,_write_rx_buff_1_55
0348 FA        1314            mov     r2,a
0349 E5F9      1315            mov     a,(_write_rx_sloc0_1_0 + 1)
034B 35A9      1316            addc    a,(_write_rx_buff_1_55 + 1)
034D FB        1317            mov     r3,a
034E ACAA      1318            mov     r4,(_write_rx_buff_1_55 + 2)
0350 8A82      1319            mov     dpl,r2
0352 8B83      1320            mov     dph,r3
0354 8CF0      1321            mov     b,r4
0356 E4        1322            clr     a
0357 120000    1323            lcall   __gptrput
035A           1324   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:330: return len;
035A 85C882    1325            mov     dpl,_write_rx_PARM_2
035D 85C983    1326            mov     dph,(_write_rx_PARM_2 + 1)
0360 22        1327            ret
0361           1328   ;------------------------------------------------------------
0361           1329   ;Allocation info for local variables in function 'display_rx'
0361           1330   ;------------------------------------------------------------
0361           1331   ;len                       Allocated with name '_display_rx_PARM_2'
0361           1332   ;buff                      Allocated to registers r2 r3 r4 
0361           1333   ;------------------------------------------------------------
0361           1334   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:333: void display_rx(char* buff, int len) {
0361           1335   ;        -----------------------------------------
0361           1336   ;         function display_rx
0361           1337   ;        -----------------------------------------
0361           1338   _display_rx:
0361 AA82      1339            mov     r2,dpl
0363 AB83      1340            mov     r3,dph
0365 ACF0      1341            mov     r4,b
0367           1342   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:334: printf("Type Intended Display in Line 2 (16 Char Max): ");
0367 C002      1343            push    ar2
0369 C003      1344            push    ar3
036B C004      1345            push    ar4
036D 7440      1346            mov     a,#__str_1
036F C0E0      1347            push    acc
0371 74C6      1348            mov     a,#(__str_1 >> 8)
0373 C0E0      1349            push    acc
0375 7480      1350            mov     a,#0x80
0377 C0E0      1351            push    acc
0379 120000    1352            lcall   _printf
037C 1581      1353            dec     sp
037E 1581      1354            dec     sp
0380 1581      1355            dec     sp
0382 D004      1356            pop     ar4
0384 D003      1357            pop     ar3
0386 D002      1358            pop     ar2
0388           1359   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:335: write_rx(buff, len);
0388 8578C8    1360            mov     _write_rx_PARM_2,_display_rx_PARM_2
038B 8579C9    1361            mov     (_write_rx_PARM_2 + 1),(_display_rx_PARM_2 + 1)
038E 8A82      1362            mov     dpl,r2
0390 8B83      1363            mov     dph,r3
0392 8CF0      1364            mov     b,r4
0394 C002      1365            push    ar2
0396 C003      1366            push    ar3
0398 C004      1367            push    ar4
039A 120000    1368            lcall   _write_rx
039D           1369   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:336: printf("\n");
039D 7480      1370            mov     a,#__str_2
039F C0E0      1371            push    acc
03A1 74C6      1372            mov     a,#(__str_2 >> 8)
03A3 C0E0      1373            push    acc
03A5 7480      1374            mov     a,#0x80
03A7 C0E0      1375            push    acc
03A9 120000    1376            lcall   _printf
03AC 1581      1377            dec     sp
03AE 1581      1378            dec     sp
03B0 1581      1379            dec     sp
03B2 D004      1380            pop     ar4
03B4 D003      1381            pop     ar3
03B6 D002      1382            pop     ar2
03B8           1383   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:337: LCDprint(buff, 1, 1);
03B8 751801    1384            mov     _LCDprint_PARM_2,#0x01
03BB D200      1385            setb    _LCDprint_PARM_3
03BD 8A82      1386            mov     dpl,r2
03BF 8B83      1387            mov     dph,r3
03C1 8CF0      1388            mov     b,r4
03C3 020000    1389            ljmp    _LCDprint
03C6           1390   ;------------------------------------------------------------
03C6           1391   ;Allocation info for local variables in function 'display_period'
03C6           1392   ;------------------------------------------------------------
03C6           1393   ;period                    Allocated to registers r2 r3 r4 r5 
03C6           1394   ;------------------------------------------------------------
03C6           1395   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:340: void display_period(float period) {
03C6           1396   ;        -----------------------------------------
03C6           1397   ;         function display_period
03C6           1398   ;        -----------------------------------------
03C6           1399   _display_period:
03C6 AA82      1400            mov     r2,dpl
03C8 AB83      1401            mov     r3,dph
03CA ACF0      1402            mov     r4,b
03CC FD        1403            mov     r5,a
03CD           1404   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:341: sprintf(LCD_BUFF, "T: %.3f s", period); // Format the Period Value
03CD C002      1405            push    ar2
03CF C003      1406            push    ar3
03D1 C004      1407            push    ar4
03D3 C005      1408            push    ar5
03D5 74C0      1409            mov     a,#__str_3
03D7 C0E0      1410            push    acc
03D9 74C6      1411            mov     a,#(__str_3 >> 8)
03DB C0E0      1412            push    acc
03DD 7480      1413            mov     a,#0x80
03DF C0E0      1414            push    acc
03E1 7458      1415            mov     a,#_LCD_BUFF
03E3 C0E0      1416            push    acc
03E5 744B      1417            mov     a,#(_LCD_BUFF >> 8)
03E7 C0E0      1418            push    acc
03E9 7440      1419            mov     a,#0x40
03EB C0E0      1420            push    acc
03ED 120000    1421            lcall   _sprintf
03F0 E581      1422            mov     a,sp
03F2 24F6      1423            add     a,#0xf6
03F4 F581      1424            mov     sp,a
03F6           1425   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:342: LCDprint(LCD_BUFF, 2, 1); // Write to LCD
03F6 751802    1426            mov     _LCDprint_PARM_2,#0x02
03F9 D200      1427            setb    _LCDprint_PARM_3
03FB 904B58    1428            mov     dptr,#_LCD_BUFF
03FE 75F040    1429            mov     b,#0x40
0401 020000    1430            ljmp    _LCDprint
0404           1431   ;------------------------------------------------------------
0404           1432   ;Allocation info for local variables in function 'display_freq_kHz'
0404           1433   ;------------------------------------------------------------
0404           1434   ;freq_kHz                  Allocated to registers r2 r3 r4 r5 
0404           1435   ;------------------------------------------------------------
0404           1436   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:345: void display_freq_kHz(float freq_kHz) {
0404           1437   ;        -----------------------------------------
0404           1438   ;         function display_freq_kHz
0404           1439   ;        -----------------------------------------
0404           1440   _display_freq_kHz:
0404 AA82      1441            mov     r2,dpl
0406 AB83      1442            mov     r3,dph
0408 ACF0      1443            mov     r4,b
040A FD        1444            mov     r5,a
040B           1445   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:346: sprintf(LCD_BUFF, "F: %.3f kHz", freq_kHz); // Format the Frequency Value
040B C002      1446            push    ar2
040D C003      1447            push    ar3
040F C004      1448            push    ar4
0411 C005      1449            push    ar5
0413 7440      1450            mov     a,#__str_4
0415 C0E0      1451            push    acc
0417 74C7      1452            mov     a,#(__str_4 >> 8)
0419 C0E0      1453            push    acc
041B 7480      1454            mov     a,#0x80
041D C0E0      1455            push    acc
041F 7458      1456            mov     a,#_LCD_BUFF
0421 C0E0      1457            push    acc
0423 744B      1458            mov     a,#(_LCD_BUFF >> 8)
0425 C0E0      1459            push    acc
0427 7440      1460            mov     a,#0x40
0429 C0E0      1461            push    acc
042B 120000    1462            lcall   _sprintf
042E E581      1463            mov     a,sp
0430 24F6      1464            add     a,#0xf6
0432 F581      1465            mov     sp,a
0434           1466   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:347: LCDprint(LCD_BUFF, 1, 1); // Write to LCD
0434 751801    1467            mov     _LCDprint_PARM_2,#0x01
0437 D200      1468            setb    _LCDprint_PARM_3
0439 904B58    1469            mov     dptr,#_LCD_BUFF
043C 75F040    1470            mov     b,#0x40
043F 020000    1471            ljmp    _LCDprint
0442           1472   ;------------------------------------------------------------
0442           1473   ;Allocation info for local variables in function 'display_capacitance_nF'
0442           1474   ;------------------------------------------------------------
0442           1475   ;capacitance_nF            Allocated to registers r2 r3 r4 r5 
0442           1476   ;------------------------------------------------------------
0442           1477   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:350: void display_capacitance_nF(float capacitance_nF) {
0442           1478   ;        -----------------------------------------
0442           1479   ;         function display_capacitance_nF
0442           1480   ;        -----------------------------------------
0442           1481   _display_capacitance_nF:
0442 AA82      1482            mov     r2,dpl
0444 AB83      1483            mov     r3,dph
0446 ACF0      1484            mov     r4,b
0448 FD        1485            mov     r5,a
0449           1486   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:351: sprintf(LCD_BUFF, "C: %.3f nF", capacitance_nF); // Format the Capacitance Value
0449 C002      1487            push    ar2
044B C003      1488            push    ar3
044D C004      1489            push    ar4
044F C005      1490            push    ar5
0451 7480      1491            mov     a,#__str_5
0453 C0E0      1492            push    acc
0455 74C7      1493            mov     a,#(__str_5 >> 8)
0457 C0E0      1494            push    acc
0459 7480      1495            mov     a,#0x80
045B C0E0      1496            push    acc
045D 7458      1497            mov     a,#_LCD_BUFF
045F C0E0      1498            push    acc
0461 744B      1499            mov     a,#(_LCD_BUFF >> 8)
0463 C0E0      1500            push    acc
0465 7440      1501            mov     a,#0x40
0467 C0E0      1502            push    acc
0469 120000    1503            lcall   _sprintf
046C E581      1504            mov     a,sp
046E 24F6      1505            add     a,#0xf6
0470 F581      1506            mov     sp,a
0472           1507   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:352: LCDprint(LCD_BUFF, 2, 1); // Write to LCD
0472 751802    1508            mov     _LCDprint_PARM_2,#0x02
0475 D200      1509            setb    _LCDprint_PARM_3
0477 904B58    1510            mov     dptr,#_LCD_BUFF
047A 75F040    1511            mov     b,#0x40
047D 020000    1512            ljmp    _LCDprint
0480           1513   ;------------------------------------------------------------
0480           1514   ;Allocation info for local variables in function 'display_resistance_kOhms'
0480           1515   ;------------------------------------------------------------
0480           1516   ;resistance_kOhms          Allocated to registers r2 r3 r4 r5 
0480           1517   ;------------------------------------------------------------
0480           1518   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:355: void display_resistance_kOhms(float resistance_kOhms) {
0480           1519   ;        -----------------------------------------
0480           1520   ;         function display_resistance_kOhms
0480           1521   ;        -----------------------------------------
0480           1522   _display_resistance_kOhms:
0480 AA82      1523            mov     r2,dpl
0482 AB83      1524            mov     r3,dph
0484 ACF0      1525            mov     r4,b
0486 FD        1526            mov     r5,a
0487           1527   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:356: sprintf(LCD_BUFF, "R: %.3f kOhms", resistance_kOhms); // Format the Resistance Value
0487 C002      1528            push    ar2
0489 C003      1529            push    ar3
048B C004      1530            push    ar4
048D C005      1531            push    ar5
048F 74C0      1532            mov     a,#__str_6
0491 C0E0      1533            push    acc
0493 74C7      1534            mov     a,#(__str_6 >> 8)
0495 C0E0      1535            push    acc
0497 7480      1536            mov     a,#0x80
0499 C0E0      1537            push    acc
049B 7458      1538            mov     a,#_LCD_BUFF
049D C0E0      1539            push    acc
049F 744B      1540            mov     a,#(_LCD_BUFF >> 8)
04A1 C0E0      1541            push    acc
04A3 7440      1542            mov     a,#0x40
04A5 C0E0      1543            push    acc
04A7 120000    1544            lcall   _sprintf
04AA E581      1545            mov     a,sp
04AC 24F6      1546            add     a,#0xf6
04AE F581      1547            mov     sp,a
04B0           1548   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:357: LCDprint(LCD_BUFF, 1, 1); // Write to LCD
04B0 751801    1549            mov     _LCDprint_PARM_2,#0x01
04B3 D200      1550            setb    _LCDprint_PARM_3
04B5 904B58    1551            mov     dptr,#_LCD_BUFF
04B8 75F040    1552            mov     b,#0x40
04BB 120000    1553            lcall   _LCDprint
04BE           1554   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:358: LCDprint("                ", 2, 1); // Clear Second Line
04BE 751802    1555            mov     _LCDprint_PARM_2,#0x02
04C1 D200      1556            setb    _LCDprint_PARM_3
04C3 90C800    1557            mov     dptr,#__str_7
04C6 75F080    1558            mov     b,#0x80
04C9 020000    1559            ljmp    _LCDprint
04CC           1560   ;------------------------------------------------------------
04CC           1561   ;Allocation info for local variables in function 'calculate_period_s'
04CC           1562   ;------------------------------------------------------------
04CC           1563   ;TH0                       Allocated with name '_calculate_period_s_PARM_2'
04CC           1564   ;TL0                       Allocated with name '_calculate_period_s_PARM_3'
04CC           1565   ;overflow_count            Allocated to registers r2 r3 
04CC           1566   ;------------------------------------------------------------
04CC           1567   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:361: float calculate_period_s(int overflow_count, int TH0, int TL0) {
04CC           1568   ;        -----------------------------------------
04CC           1569   ;         function calculate_period_s
04CC           1570   ;        -----------------------------------------
04CC           1571   _calculate_period_s:
04CC           1572   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:362: return ((overflow_count * MAX_16_BIT)  + (TH0 * MAX_8_BIT) + TL0) * (12.0 / SYSCLK);
04CC 120000    1573            lcall   ___sint2fs
04CF AA82      1574            mov     r2,dpl
04D1 AB83      1575            mov     r3,dph
04D3 ACF0      1576            mov     r4,b
04D5 FD        1577            mov     r5,a
04D6 C002      1578            push    ar2
04D8 C003      1579            push    ar3
04DA C004      1580            push    ar4
04DC C005      1581            push    ar5
04DE 900000    1582            mov     dptr,#0x0000
04E1 75F080    1583            mov     b,#0x80
04E4 7447      1584            mov     a,#0x47
04E6 120000    1585            lcall   ___fsmul
04E9 AA82      1586            mov     r2,dpl
04EB AB83      1587            mov     r3,dph
04ED ACF0      1588            mov     r4,b
04EF FD        1589            mov     r5,a
04F0 E581      1590            mov     a,sp
04F2 24FC      1591            add     a,#0xfc
04F4 F581      1592            mov     sp,a
04F6 852882    1593            mov     dpl,_calculate_period_s_PARM_2
04F9 852983    1594            mov     dph,(_calculate_period_s_PARM_2 + 1)
04FC C002      1595            push    ar2
04FE C003      1596            push    ar3
0500 C004      1597            push    ar4
0502 C005      1598            push    ar5
0504 120000    1599            lcall   ___sint2fs
0507 AE82      1600            mov     r6,dpl
0509 AF83      1601            mov     r7,dph
050B A8F0      1602            mov     r0,b
050D F9        1603            mov     r1,a
050E C006      1604            push    ar6
0510 C007      1605            push    ar7
0512 C000      1606            push    ar0
0514 C001      1607            push    ar1
0516 900000    1608            mov     dptr,#0x0000
0519 75F080    1609            mov     b,#0x80
051C 7443      1610            mov     a,#0x43
051E 120000    1611            lcall   ___fsmul
0521 AE82      1612            mov     r6,dpl
0523 AF83      1613            mov     r7,dph
0525 A8F0      1614            mov     r0,b
0527 F9        1615            mov     r1,a
0528 E581      1616            mov     a,sp
052A 24FC      1617            add     a,#0xfc
052C F581      1618            mov     sp,a
052E D005      1619            pop     ar5
0530 D004      1620            pop     ar4
0532 D003      1621            pop     ar3
0534 D002      1622            pop     ar2
0536 C006      1623            push    ar6
0538 C007      1624            push    ar7
053A C000      1625            push    ar0
053C C001      1626            push    ar1
053E 8A82      1627            mov     dpl,r2
0540 8B83      1628            mov     dph,r3
0542 8CF0      1629            mov     b,r4
0544 ED        1630            mov     a,r5
0545 120000    1631            lcall   ___fsadd
0548 AA82      1632            mov     r2,dpl
054A AB83      1633            mov     r3,dph
054C ACF0      1634            mov     r4,b
054E FD        1635            mov     r5,a
054F E581      1636            mov     a,sp
0551 24FC      1637            add     a,#0xfc
0553 F581      1638            mov     sp,a
0555 85D882    1639            mov     dpl,_calculate_period_s_PARM_3
0558 85D983    1640            mov     dph,(_calculate_period_s_PARM_3 + 1)
055B C002      1641            push    ar2
055D C003      1642            push    ar3
055F C004      1643            push    ar4
0561 C005      1644            push    ar5
0563 120000    1645            lcall   ___sint2fs
0566 AE82      1646            mov     r6,dpl
0568 AF83      1647            mov     r7,dph
056A A8F0      1648            mov     r0,b
056C F9        1649            mov     r1,a
056D D005      1650            pop     ar5
056F D004      1651            pop     ar4
0571 D003      1652            pop     ar3
0573 D002      1653            pop     ar2
0575 C006      1654            push    ar6
0577 C007      1655            push    ar7
0579 C000      1656            push    ar0
057B C001      1657            push    ar1
057D 8A82      1658            mov     dpl,r2
057F 8B83      1659            mov     dph,r3
0581 8CF0      1660            mov     b,r4
0583 ED        1661            mov     a,r5
0584 120000    1662            lcall   ___fsadd
0587 AA82      1663            mov     r2,dpl
0589 AB83      1664            mov     r3,dph
058B ACF0      1665            mov     r4,b
058D FD        1666            mov     r5,a
058E E581      1667            mov     a,sp
0590 24FC      1668            add     a,#0xfc
0592 F581      1669            mov     sp,a
0594 C002      1670            push    ar2
0596 C003      1671            push    ar3
0598 C004      1672            push    ar4
059A C005      1673            push    ar5
059C 90F4FC    1674            mov     dptr,#0xF4FC
059F 75F032    1675            mov     b,#0x32
05A2 7434      1676            mov     a,#0x34
05A4 120000    1677            lcall   ___fsmul
05A7 AA82      1678            mov     r2,dpl
05A9 AB83      1679            mov     r3,dph
05AB ACF0      1680            mov     r4,b
05AD FD        1681            mov     r5,a
05AE E581      1682            mov     a,sp
05B0 24FC      1683            add     a,#0xfc
05B2 F581      1684            mov     sp,a
05B4 8A82      1685            mov     dpl,r2
05B6 8B83      1686            mov     dph,r3
05B8 8CF0      1687            mov     b,r4
05BA ED        1688            mov     a,r5
05BB 22        1689            ret
05BC           1690   ;------------------------------------------------------------
05BC           1691   ;Allocation info for local variables in function 'calculate_freq_Hz'
05BC           1692   ;------------------------------------------------------------
05BC           1693   ;period_s                  Allocated to registers r2 r3 r4 r5 
05BC           1694   ;------------------------------------------------------------
05BC           1695   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:365: float calculate_freq_Hz(float period_s) {
05BC           1696   ;        -----------------------------------------
05BC           1697   ;         function calculate_freq_Hz
05BC           1698   ;        -----------------------------------------
05BC           1699   _calculate_freq_Hz:
05BC AA82      1700            mov     r2,dpl
05BE AB83      1701            mov     r3,dph
05C0 ACF0      1702            mov     r4,b
05C2 FD        1703            mov     r5,a
05C3           1704   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:366: return (1.0 / period_s);
05C3 C002      1705            push    ar2
05C5 C003      1706            push    ar3
05C7 C004      1707            push    ar4
05C9 C005      1708            push    ar5
05CB 900000    1709            mov     dptr,#0x0000
05CE 75F080    1710            mov     b,#0x80
05D1 743F      1711            mov     a,#0x3F
05D3 120000    1712            lcall   ___fsdiv
05D6 AA82      1713            mov     r2,dpl
05D8 AB83      1714            mov     r3,dph
05DA ACF0      1715            mov     r4,b
05DC FD        1716            mov     r5,a
05DD E581      1717            mov     a,sp
05DF 24FC      1718            add     a,#0xfc
05E1 F581      1719            mov     sp,a
05E3 8A82      1720            mov     dpl,r2
05E5 8B83      1721            mov     dph,r3
05E7 8CF0      1722            mov     b,r4
05E9 ED        1723            mov     a,r5
05EA 22        1724            ret
05EB           1725   ;------------------------------------------------------------
05EB           1726   ;Allocation info for local variables in function 'calculate_capacitance_nF'
05EB           1727   ;------------------------------------------------------------
05EB           1728   ;period_s                  Allocated to registers r2 r3 r4 r5 
05EB           1729   ;------------------------------------------------------------
05EB           1730   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:369: float calculate_capacitance_nF(float period_s) {
05EB           1731   ;        -----------------------------------------
05EB           1732   ;         function calculate_capacitance_nF
05EB           1733   ;        -----------------------------------------
05EB           1734   _calculate_capacitance_nF:
05EB AA82      1735            mov     r2,dpl
05ED AB83      1736            mov     r3,dph
05EF ACF0      1737            mov     r4,b
05F1 FD        1738            mov     r5,a
05F2           1739   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:370: return (1.44 * period_s / (R_A + 2 * R_B)) * GIGA_MULTIPLIER; // Convert to Nanofarads
05F2 C002      1740            push    ar2
05F4 C003      1741            push    ar3
05F6 C004      1742            push    ar4
05F8 C005      1743            push    ar5
05FA 9051EC    1744            mov     dptr,#0x51EC
05FD 75F0B8    1745            mov     b,#0xB8
0600 743F      1746            mov     a,#0x3F
0602 120000    1747            lcall   ___fsmul
0605 AA82      1748            mov     r2,dpl
0607 AB83      1749            mov     r3,dph
0609 ACF0      1750            mov     r4,b
060B FD        1751            mov     r5,a
060C E581      1752            mov     a,sp
060E 24FC      1753            add     a,#0xfc
0610 F581      1754            mov     sp,a
0612 E4        1755            clr     a
0613 C0E0      1756            push    acc
0615 74A0      1757            mov     a,#0xA0
0617 C0E0      1758            push    acc
0619 748C      1759            mov     a,#0x8C
061B C0E0      1760            push    acc
061D 7445      1761            mov     a,#0x45
061F C0E0      1762            push    acc
0621 8A82      1763            mov     dpl,r2
0623 8B83      1764            mov     dph,r3
0625 8CF0      1765            mov     b,r4
0627 ED        1766            mov     a,r5
0628 120000    1767            lcall   ___fsdiv
062B AA82      1768            mov     r2,dpl
062D AB83      1769            mov     r3,dph
062F ACF0      1770            mov     r4,b
0631 FD        1771            mov     r5,a
0632 E581      1772            mov     a,sp
0634 24FC      1773            add     a,#0xfc
0636 F581      1774            mov     sp,a
0638 C002      1775            push    ar2
063A C003      1776            push    ar3
063C C004      1777            push    ar4
063E C005      1778            push    ar5
0640 906B28    1779            mov     dptr,#0x6B28
0643 75F06E    1780            mov     b,#0x6E
0646 744E      1781            mov     a,#0x4E
0648 120000    1782            lcall   ___fsmul
064B AA82      1783            mov     r2,dpl
064D AB83      1784            mov     r3,dph
064F ACF0      1785            mov     r4,b
0651 FD        1786            mov     r5,a
0652 E581      1787            mov     a,sp
0654 24FC      1788            add     a,#0xfc
0656 F581      1789            mov     sp,a
0658 8A82      1790            mov     dpl,r2
065A 8B83      1791            mov     dph,r3
065C 8CF0      1792            mov     b,r4
065E ED        1793            mov     a,r5
065F 22        1794            ret
0660           1795   ;------------------------------------------------------------
0660           1796   ;Allocation info for local variables in function 'calculate_resistance_k0hms'
0660           1797   ;------------------------------------------------------------
0660           1798   ;voltage_across_resistor   Allocated to registers r2 r3 r4 r5 
0660           1799   ;current                   Allocated to registers r6 r7 r0 r1 
0660           1800   ;------------------------------------------------------------
0660           1801   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:373: float calculate_resistance_k0hms(float voltage_across_resistor) {
0660           1802   ;        -----------------------------------------
0660           1803   ;         function calculate_resistance_k0hms
0660           1804   ;        -----------------------------------------
0660           1805   _calculate_resistance_k0hms:
0660 AA82      1806            mov     r2,dpl
0662 AB83      1807            mov     r3,dph
0664 ACF0      1808            mov     r4,b
0666 FD        1809            mov     r5,a
0667           1810   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:374: float current = ((VSS - voltage_across_resistor) / R_REF) / MEGA_MULTIPLIER; // Calculate Current (Amps)
0667 C002      1811            push    ar2
0669 C003      1812            push    ar3
066B C004      1813            push    ar4
066D C005      1814            push    ar5
066F C002      1815            push    ar2
0671 C003      1816            push    ar3
0673 C004      1817            push    ar4
0675 C005      1818            push    ar5
0677 90999A    1819            mov     dptr,#0x999A
067A 75F099    1820            mov     b,#0x99
067D 7440      1821            mov     a,#0x40
067F 120000    1822            lcall   ___fssub
0682 AE82      1823            mov     r6,dpl
0684 AF83      1824            mov     r7,dph
0686 A8F0      1825            mov     r0,b
0688 F9        1826            mov     r1,a
0689 E581      1827            mov     a,sp
068B 24FC      1828            add     a,#0xfc
068D F581      1829            mov     sp,a
068F E4        1830            clr     a
0690 C0E0      1831            push    acc
0692 C0E0      1832            push    acc
0694 74C8      1833            mov     a,#0xC8
0696 C0E0      1834            push    acc
0698 7442      1835            mov     a,#0x42
069A C0E0      1836            push    acc
069C 8E82      1837            mov     dpl,r6
069E 8F83      1838            mov     dph,r7
06A0 88F0      1839            mov     b,r0
06A2 E9        1840            mov     a,r1
06A3 120000    1841            lcall   ___fsdiv
06A6 AE82      1842            mov     r6,dpl
06A8 AF83      1843            mov     r7,dph
06AA A8F0      1844            mov     r0,b
06AC F9        1845            mov     r1,a
06AD E581      1846            mov     a,sp
06AF 24FC      1847            add     a,#0xfc
06B1 F581      1848            mov     sp,a
06B3 C006      1849            push    ar6
06B5 C007      1850            push    ar7
06B7 C000      1851            push    ar0
06B9 C001      1852            push    ar1
06BB 900000    1853            mov     dptr,#0x0000
06BE 75F07A    1854            mov     b,#0x7A
06C1 7444      1855            mov     a,#0x44
06C3 120000    1856            lcall   ___fsmul
06C6 AE82      1857            mov     r6,dpl
06C8 AF83      1858            mov     r7,dph
06CA A8F0      1859            mov     r0,b
06CC F9        1860            mov     r1,a
06CD E581      1861            mov     a,sp
06CF 24FC      1862            add     a,#0xfc
06D1 F581      1863            mov     sp,a
06D3 E4        1864            clr     a
06D4 C0E0      1865            push    acc
06D6 7424      1866            mov     a,#0x24
06D8 C0E0      1867            push    acc
06DA 7474      1868            mov     a,#0x74
06DC C0E0      1869            push    acc
06DE 7449      1870            mov     a,#0x49
06E0 C0E0      1871            push    acc
06E2 8E82      1872            mov     dpl,r6
06E4 8F83      1873            mov     dph,r7
06E6 88F0      1874            mov     b,r0
06E8 E9        1875            mov     a,r1
06E9 120000    1876            lcall   ___fsdiv
06EC AE82      1877            mov     r6,dpl
06EE AF83      1878            mov     r7,dph
06F0 A8F0      1879            mov     r0,b
06F2 F9        1880            mov     r1,a
06F3 E581      1881            mov     a,sp
06F5 24FC      1882            add     a,#0xfc
06F7 F581      1883            mov     sp,a
06F9 D005      1884            pop     ar5
06FB D004      1885            pop     ar4
06FD D003      1886            pop     ar3
06FF D002      1887            pop     ar2
0701           1888   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:379: return (voltage_across_resistor / current) / KILO_MULTIPLIER; // Calculate Resistance (Kilohms)
0701 C006      1889            push    ar6
0703 C007      1890            push    ar7
0705 C000      1891            push    ar0
0707 C001      1892            push    ar1
0709 8A82      1893            mov     dpl,r2
070B 8B83      1894            mov     dph,r3
070D 8CF0      1895            mov     b,r4
070F ED        1896            mov     a,r5
0710 120000    1897            lcall   ___fsdiv
0713 AA82      1898            mov     r2,dpl
0715 AB83      1899            mov     r3,dph
0717 ACF0      1900            mov     r4,b
0719 FD        1901            mov     r5,a
071A E581      1902            mov     a,sp
071C 24FC      1903            add     a,#0xfc
071E F581      1904            mov     sp,a
0720 E4        1905            clr     a
0721 C0E0      1906            push    acc
0723 C0E0      1907            push    acc
0725 747A      1908            mov     a,#0x7A
0727 C0E0      1909            push    acc
0729 7444      1910            mov     a,#0x44
072B C0E0      1911            push    acc
072D 8A82      1912            mov     dpl,r2
072F 8B83      1913            mov     dph,r3
0731 8CF0      1914            mov     b,r4
0733 ED        1915            mov     a,r5
0734 120000    1916            lcall   ___fsdiv
0737 AA82      1917            mov     r2,dpl
0739 AB83      1918            mov     r3,dph
073B ACF0      1919            mov     r4,b
073D FD        1920            mov     r5,a
073E E581      1921            mov     a,sp
0740 24FC      1922            add     a,#0xfc
0742 F581      1923            mov     sp,a
0744 8A82      1924            mov     dpl,r2
0746 8B83      1925            mov     dph,r3
0748 8CF0      1926            mov     b,r4
074A ED        1927            mov     a,r5
074B 22        1928            ret
074C           1929   ;------------------------------------------------------------
074C           1930   ;Allocation info for local variables in function 'Check_Mode_Button'
074C           1931   ;------------------------------------------------------------
074C           1932   ;mode                      Allocated to registers r2 r3 
074C           1933   ;current_mode              Allocated to registers 
074C           1934   ;------------------------------------------------------------
074C           1935   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:395: int Check_Mode_Button(int mode) {
074C           1936   ;        -----------------------------------------
074C           1937   ;         function Check_Mode_Button
074C           1938   ;        -----------------------------------------
074C           1939   _Check_Mode_Button:
074C AA82      1940            mov     r2,dpl
074E AB83      1941            mov     r3,dph
0750           1942   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:397: if (MODE_PIN == 0) waitms(50); // De-bounce
0750 20B100    1943            jb      _P3_1,L027002?
0753 900032    1944            mov     dptr,#0x0032
0756 C002      1945            push    ar2
0758 C003      1946            push    ar3
075A 120000    1947            lcall   _waitms
075D D003      1948            pop     ar3
075F D002      1949            pop     ar2
0761 8000      1950            sjmp    L027003?
0763           1951   L027002?:
0763           1952   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:398: else return current_mode;
0763 8A82      1953            mov     dpl,r2
0765 8B83      1954            mov     dph,r3
0767 22        1955            ret
0768           1956   L027003?:
0768           1957   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:400: if(MODE_PIN == 0) {
0768 20B180    1958            jb      _P3_1,L027011?
076B           1959   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:401: while(MODE_PIN==0);
076B           1960   L027004?:
076B 30B1C0    1961            jnb     _P3_1,L027004?
076E           1962   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:403: if (mode == MODE_CAPACITANCE) {
076E EA        1963            mov     a,r2
076F 4B        1964            orl     a,r3
0770 7000      1965            jnz     L027008?
0772           1966   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:404: return MODE_RESISTANCE;
0772 900001    1967            mov     dptr,#0x0001
0775 22        1968            ret
0776           1969   L027008?:
0776           1970   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:406: return MODE_CAPACITANCE;
0776 900000    1971            mov     dptr,#0x0000
0779 22        1972            ret
077A           1973   L027011?:
077A           1974   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:409: return current_mode;
077A 8A82      1975            mov     dpl,r2
077C 8B83      1976            mov     dph,r3
077E 22        1977            ret
077F           1978   ;------------------------------------------------------------
077F           1979   ;Allocation info for local variables in function 'main'
077F           1980   ;------------------------------------------------------------
077F           1981   ;mode                      Allocated with name '_main_mode_1_85'
077F           1982   ;V_LED                     Allocated to registers 
077F           1983   ;V_R                       Allocated with name '_main_V_R_1_85'
077F           1984   ;R_kOhms                   Allocated with name '_main_R_kOhms_1_85'
077F           1985   ;period_s                  Allocated with name '_main_period_s_1_85'
077F           1986   ;freq_Hz                   Allocated to registers r6 r7 r4 r5 
077F           1987   ;capacitance_nF            Allocated with name '_main_capacitance_nF_1_85'
077F           1988   ;success_count             Allocated with name '_main_success_count_1_85'
077F           1989   ;------------------------------------------------------------
077F           1990   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:413: void main(void) {
077F           1991   ;        -----------------------------------------
077F           1992   ;         function main
077F           1993   ;        -----------------------------------------
077F           1994   _main:
077F           1995   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:414: int mode = MODE_CAPACITANCE;
077F           1996   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:417: int success_count = 0;
077F E4        1997            clr     a
0780 F538      1998            mov     _main_mode_1_85,a
0782 F539      1999            mov     (_main_mode_1_85 + 1),a
0784 F5B8      2000            mov     _main_success_count_1_85,a
0786 F5B9      2001            mov     (_main_success_count_1_85 + 1),a
0788           2002   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:420: TIMER0_Init(); // Initialize Timer 0
0788 120000    2003            lcall   _TIMER0_Init
078B           2004   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:421: Serial_Init(); // Initialize Serial Communication
078B 120000    2005            lcall   _Serial_Init
078E           2006   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:422: LCD_4BIT();     // Configure the LCD
078E 120000    2007            lcall   _LCD_4BIT
0791           2008   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:425: InitPinADC(0, 1); // Configure P0.1 as Analog Input
0791 756001    2009            mov     _InitPinADC_PARM_2,#0x01
0794 758200    2010            mov     dpl,#0x00
0797 120000    2011            lcall   _InitPinADC
079A           2012   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:426: InitPinADC(2, 1); // Configure P2.1 as Analog Input
079A 756001    2013            mov     _InitPinADC_PARM_2,#0x01
079D 758202    2014            mov     dpl,#0x02
07A0 120000    2015            lcall   _InitPinADC
07A3           2016   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:427: InitADC();
07A3 120000    2017            lcall   _InitADC
07A6           2018   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:429: while(1) {
07A6           2019   L028041?:
07A6           2020   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:430: mode = Check_Mode_Button(mode);
07A6 853882    2021            mov     dpl,_main_mode_1_85
07A9 853983    2022            mov     dph,(_main_mode_1_85 + 1)
07AC 120000    2023            lcall   _Check_Mode_Button
07AF 858238    2024            mov     _main_mode_1_85,dpl
07B2 858339    2025            mov     (_main_mode_1_85 + 1),dph
07B5           2026   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:432: V_LED = Volts_at_Pin(QFP32_MUX_P0_1); // Measure the Voltage at the LED
07B5 758200    2027            mov     dpl,#0x00
07B8 120000    2028            lcall   _Volts_at_Pin
07BB           2029   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:433: V_R = Volts_at_Pin(QFP32_MUX_P2_1); // Measure the Voltage at the Resistor
07BB 75820E    2030            mov     dpl,#0x0E
07BE 120000    2031            lcall   _Volts_at_Pin
07C1           2032   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:434: R_kOhms = calculate_resistance_k0hms(V_R);
07C1 858278    2033            mov     _main_V_R_1_85,dpl
07C4 858379    2034            mov     (_main_V_R_1_85 + 1),dph
07C7 85F07A    2035            mov     (_main_V_R_1_85 + 2),b
07CA F57B      2036            mov     (_main_V_R_1_85 + 3),a
07CC 120000    2037            lcall   _calculate_resistance_k0hms
07CF 8582C8    2038            mov     _main_R_kOhms_1_85,dpl
07D2 8583C9    2039            mov     (_main_R_kOhms_1_85 + 1),dph
07D5 85F0CA    2040            mov     (_main_R_kOhms_1_85 + 2),b
07D8 F5CB      2041            mov     (_main_R_kOhms_1_85 + 3),a
07DA           2042   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:441: TL0 = 0;
07DA 758A00    2043            mov     _TL0,#0x00
07DD           2044   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:442: TH0 = 0;
07DD 758C00    2045            mov     _TH0,#0x00
07E0           2046   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:443: TF0 = 0;
07E0 C28D      2047            clr     _TF0
07E2           2048   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:444: overflow_count = 0;
07E2 759800    2049            mov     _overflow_count,#0x00
07E5           2050   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:446: while (EFM8_SIGNAL != 0); // Wait for Signal == 0
07E5           2051   L028001?:
07E5 20B380    2052            jb      _P3_3,L028001?
07E8           2053   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:447: while (EFM8_SIGNAL != 1); // Wait for Signal == 1
07E8           2054   L028004?:
07E8 30B3C0    2055            jnb     _P3_3,L028004?
07EB           2056   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:449: TR0 = 1; // Start Timer
07EB D28C      2057            setb    _TR0
07ED           2058   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:451: while (EFM8_SIGNAL != 0) { // Wait for Signal == 0
07ED           2059   L028009?:
07ED 30B340    2060            jnb     _P3_3,L028014?
07F0           2061   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:452: if (TF0 == 1) { // Did 16-Bit Timer Overflow?
07F0           2062   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:453: TF0 = 0;
07F0 108D80    2063            jbc     _TF0,L028069?
07F3 8000      2064            sjmp    L028009?
07F5           2065   L028069?:
07F5           2066   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:454: overflow_count++;
07F5 0598      2067            inc     _overflow_count
07F7           2068   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:457: while (EFM8_SIGNAL != 1) { // Wait for Signal == 1
07F7 8000      2069            sjmp    L028009?
07F9           2070   L028014?:
07F9 20B3C0    2071            jb      _P3_3,L028016?
07FC           2072   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:458: if (TF0 == 1) { // Did 16-Bit Timer Overflow?
07FC           2073   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:459: TF0 = 0;
07FC 108D00    2074            jbc     _TF0,L028071?
07FF 8000      2075            sjmp    L028014?
0801           2076   L028071?:
0801           2077   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:460: overflow_count++;
0801 0598      2078            inc     _overflow_count
0803 8000      2079            sjmp    L028014?
0805           2080   L028016?:
0805           2081   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:464: TR0 = 0; // Stop Timer 0. The 24-bit number [overflow_count-TH0-TL0] has the period!
0805 C28C      2082            clr     _TR0
0807           2083   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:465: period_s = calculate_period_s(overflow_count, TH0, TL0);
0807 A898      2084            mov     r0,_overflow_count
0809 7900      2085            mov     r1,#0x00
080B 858C28    2086            mov     _calculate_period_s_PARM_2,_TH0
080E 752900    2087            mov     (_calculate_period_s_PARM_2 + 1),#0x00
0811 858AD8    2088            mov     _calculate_period_s_PARM_3,_TL0
0814 75D900    2089            mov     (_calculate_period_s_PARM_3 + 1),#0x00
0817 8882      2090            mov     dpl,r0
0819 8983      2091            mov     dph,r1
081B 120000    2092            lcall   _calculate_period_s
081E           2093   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:466: freq_Hz = calculate_freq_Hz(period_s);
081E 858218    2094            mov     _main_period_s_1_85,dpl
0821 858319    2095            mov     (_main_period_s_1_85 + 1),dph
0824 85F01A    2096            mov     (_main_period_s_1_85 + 2),b
0827 F51B      2097            mov     (_main_period_s_1_85 + 3),a
0829 120000    2098            lcall   _calculate_freq_Hz
082C AE82      2099            mov     r6,dpl
082E AF83      2100            mov     r7,dph
0830 ACF0      2101            mov     r4,b
0832 FD        2102            mov     r5,a
0833           2103   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:467: capacitance_nF = calculate_capacitance_nF(period_s);
0833 851882    2104            mov     dpl,_main_period_s_1_85
0836 851983    2105            mov     dph,(_main_period_s_1_85 + 1)
0839 851AF0    2106            mov     b,(_main_period_s_1_85 + 2)
083C E51B      2107            mov     a,(_main_period_s_1_85 + 3)
083E C004      2108            push    ar4
0840 C005      2109            push    ar5
0842 C006      2110            push    ar6
0844 C007      2111            push    ar7
0846 120000    2112            lcall   _calculate_capacitance_nF
0849 858268    2113            mov     _main_capacitance_nF_1_85,dpl
084C 858369    2114            mov     (_main_capacitance_nF_1_85 + 1),dph
084F 85F06A    2115            mov     (_main_capacitance_nF_1_85 + 2),b
0852 F56B      2116            mov     (_main_capacitance_nF_1_85 + 3),a
0854 D007      2117            pop     ar7
0856 D006      2118            pop     ar6
0858 D005      2119            pop     ar5
085A D004      2120            pop     ar4
085C           2121   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:469: if ((mode == MODE_RESISTANCE) && (V_R < VDD)) display_resistance_kOhms(R_kOhms);
085C 7401      2122            mov     a,#0x01
085E B53840    2123            cjne    a,_main_mode_1_85,L028072?
0861 E4        2124            clr     a
0862 B53940    2125            cjne    a,(_main_mode_1_85 + 1),L028072?
0865 7401      2126            mov     a,#0x01
0867 8000      2127            sjmp    L028073?
0869           2128   L028072?:
0869 E4        2129            clr     a
086A           2130   L028073?:
086A F8        2131            mov     r0,a
086B 6000      2132            jz      L028018?
086D C004      2133            push    ar4
086F C005      2134            push    ar5
0871 C006      2135            push    ar6
0873 C007      2136            push    ar7
0875 C000      2137            push    ar0
0877 748B      2138            mov     a,#0x8B
0879 C0E0      2139            push    acc
087B 746C      2140            mov     a,#0x6C
087D C0E0      2141            push    acc
087F 7453      2142            mov     a,#0x53
0881 C0E0      2143            push    acc
0883 7440      2144            mov     a,#0x40
0885 C0E0      2145            push    acc
0887 857882    2146            mov     dpl,_main_V_R_1_85
088A 857983    2147            mov     dph,(_main_V_R_1_85 + 1)
088D 857AF0    2148            mov     b,(_main_V_R_1_85 + 2)
0890 E57B      2149            mov     a,(_main_V_R_1_85 + 3)
0892 120000    2150            lcall   ___fslt
0895 A982      2151            mov     r1,dpl
0897 E581      2152            mov     a,sp
0899 24FC      2153            add     a,#0xfc
089B F581      2154            mov     sp,a
089D D000      2155            pop     ar0
089F D007      2156            pop     ar7
08A1 D006      2157            pop     ar6
08A3 D005      2158            pop     ar5
08A5 D004      2159            pop     ar4
08A7 E9        2160            mov     a,r1
08A8 6000      2161            jz      L028018?
08AA 85C882    2162            mov     dpl,_main_R_kOhms_1_85
08AD 85C983    2163            mov     dph,(_main_R_kOhms_1_85 + 1)
08B0 85CAF0    2164            mov     b,(_main_R_kOhms_1_85 + 2)
08B3 E5CB      2165            mov     a,(_main_R_kOhms_1_85 + 3)
08B5 C004      2166            push    ar4
08B7 C005      2167            push    ar5
08B9 C006      2168            push    ar6
08BB C007      2169            push    ar7
08BD C000      2170            push    ar0
08BF 120000    2171            lcall   _display_resistance_kOhms
08C2 D000      2172            pop     ar0
08C4 D007      2173            pop     ar7
08C6 D006      2174            pop     ar6
08C8 D005      2175            pop     ar5
08CA D004      2176            pop     ar4
08CC           2177   L028018?:
08CC           2178   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:477: if ((mode == MODE_CAPACITANCE) && (freq_Hz <= MIN_FREQ_HZ || freq_Hz >= MAX_FREQ_HZ)) {
08CC E538      2179            mov     a,_main_mode_1_85
08CE 4539      2180            orl     a,(_main_mode_1_85 + 1)
08D0 6000      2181            jz      L028076?
08D2 020000    2182            ljmp    L028030?
08D5           2183   L028076?:
08D5 C004      2184            push    ar4
08D7 C005      2185            push    ar5
08D9 C006      2186            push    ar6
08DB C007      2187            push    ar7
08DD C000      2188            push    ar0
08DF E4        2189            clr     a
08E0 C0E0      2190            push    acc
08E2 C0E0      2191            push    acc
08E4 7448      2192            mov     a,#0x48
08E6 C0E0      2193            push    acc
08E8 7443      2194            mov     a,#0x43
08EA C0E0      2195            push    acc
08EC 8E82      2196            mov     dpl,r6
08EE 8F83      2197            mov     dph,r7
08F0 8CF0      2198            mov     b,r4
08F2 ED        2199            mov     a,r5
08F3 120000    2200            lcall   ___fsgt
08F6 A982      2201            mov     r1,dpl
08F8 E581      2202            mov     a,sp
08FA 24FC      2203            add     a,#0xfc
08FC F581      2204            mov     sp,a
08FE D000      2205            pop     ar0
0900 D007      2206            pop     ar7
0902 D006      2207            pop     ar6
0904 D005      2208            pop     ar5
0906 D004      2209            pop     ar4
0908 E9        2210            mov     a,r1
0909 6000      2211            jz      L028029?
090B C004      2212            push    ar4
090D C005      2213            push    ar5
090F C006      2214            push    ar6
0911 C007      2215            push    ar7
0913 C000      2216            push    ar0
0915 C001      2217            push    ar1
0917 E4        2218            clr     a
0918 C0E0      2219            push    acc
091A 7450      2220            mov     a,#0x50
091C C0E0      2221            push    acc
091E 74C3      2222            mov     a,#0xC3
0920 C0E0      2223            push    acc
0922 7448      2224            mov     a,#0x48
0924 C0E0      2225            push    acc
0926 8E82      2226            mov     dpl,r6
0928 8F83      2227            mov     dph,r7
092A 8CF0      2228            mov     b,r4
092C ED        2229            mov     a,r5
092D 120000    2230            lcall   ___fslt
0930 AA82      2231            mov     r2,dpl
0932 E581      2232            mov     a,sp
0934 24FC      2233            add     a,#0xfc
0936 F581      2234            mov     sp,a
0938 D001      2235            pop     ar1
093A D000      2236            pop     ar0
093C D007      2237            pop     ar7
093E D006      2238            pop     ar6
0940 D005      2239            pop     ar5
0942 D004      2240            pop     ar4
0944 EA        2241            mov     a,r2
0945 6000      2242            jz      L028078?
0947 020000    2243            ljmp    L028030?
094A           2244   L028078?:
094A           2245   L028029?:
094A           2246   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:478: success_count = 0;
094A E4        2247            clr     a
094B F5B8      2248            mov     _main_success_count_1_85,a
094D F5B9      2249            mov     (_main_success_count_1_85 + 1),a
094F           2250   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:479: if (freq_Hz >= MAX_FREQ_HZ) LCDprint("ERROR : LOW C", 1, 1);
094F C004      2251            push    ar4
0951 C005      2252            push    ar5
0953 C006      2253            push    ar6
0955 C007      2254            push    ar7
0957 C000      2255            push    ar0
0959 C001      2256            push    ar1
095B E4        2257            clr     a
095C C0E0      2258            push    acc
095E 7450      2259            mov     a,#0x50
0960 C0E0      2260            push    acc
0962 74C3      2261            mov     a,#0xC3
0964 C0E0      2262            push    acc
0966 7448      2263            mov     a,#0x48
0968 C0E0      2264            push    acc
096A 8E82      2265            mov     dpl,r6
096C 8F83      2266            mov     dph,r7
096E 8CF0      2267            mov     b,r4
0970 ED        2268            mov     a,r5
0971 120000    2269            lcall   ___fslt
0974 AA82      2270            mov     r2,dpl
0976 E581      2271            mov     a,sp
0978 24FC      2272            add     a,#0xfc
097A F581      2273            mov     sp,a
097C D001      2274            pop     ar1
097E D000      2275            pop     ar0
0980 D007      2276            pop     ar7
0982 D006      2277            pop     ar6
0984 D005      2278            pop     ar5
0986 D004      2279            pop     ar4
0988 EA        2280            mov     a,r2
0989 7000      2281            jnz     L028023?
098B 751801    2282            mov     _LCDprint_PARM_2,#0x01
098E D200      2283            setb    _LCDprint_PARM_3
0990 90CEC0    2284            mov     dptr,#__str_8
0993 75F080    2285            mov     b,#0x80
0996 C004      2286            push    ar4
0998 C005      2287            push    ar5
099A C006      2288            push    ar6
099C C007      2289            push    ar7
099E C000      2290            push    ar0
09A0 120000    2291            lcall   _LCDprint
09A3 D000      2292            pop     ar0
09A5 D007      2293            pop     ar7
09A7 D006      2294            pop     ar6
09A9 D005      2295            pop     ar5
09AB D004      2296            pop     ar4
09AD 8000      2297            sjmp    L028024?
09AF           2298   L028023?:
09AF           2299   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:480: else if (freq_Hz <= MIN_FREQ_HZ) LCDprint("ERROR : HIGH C", 1, 1);
09AF E9        2300            mov     a,r1
09B0 7000      2301            jnz     L028024?
09B2 751801    2302            mov     _LCDprint_PARM_2,#0x01
09B5 D200      2303            setb    _LCDprint_PARM_3
09B7 90CF40    2304            mov     dptr,#__str_9
09BA 75F080    2305            mov     b,#0x80
09BD C004      2306            push    ar4
09BF C005      2307            push    ar5
09C1 C006      2308            push    ar6
09C3 C007      2309            push    ar7
09C5 C000      2310            push    ar0
09C7 120000    2311            lcall   _LCDprint
09CA D000      2312            pop     ar0
09CC D007      2313            pop     ar7
09CE D006      2314            pop     ar6
09D0 D005      2315            pop     ar5
09D2 D004      2316            pop     ar4
09D4           2317   L028024?:
09D4           2318   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:482: LCDprint("                ", 2, 1);
09D4 751802    2319            mov     _LCDprint_PARM_2,#0x02
09D7 D200      2320            setb    _LCDprint_PARM_3
09D9 90C800    2321            mov     dptr,#__str_7
09DC 75F080    2322            mov     b,#0x80
09DF C004      2323            push    ar4
09E1 C005      2324            push    ar5
09E3 C006      2325            push    ar6
09E5 C007      2326            push    ar7
09E7 C000      2327            push    ar0
09E9 120000    2328            lcall   _LCDprint
09EC           2329   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:483: waitms(500); // Wait for 500 ms
09EC 9001F4    2330            mov     dptr,#0x01F4
09EF 120000    2331            lcall   _waitms
09F2 D000      2332            pop     ar0
09F4 D007      2333            pop     ar7
09F6 D006      2334            pop     ar6
09F8 D005      2335            pop     ar5
09FA D004      2336            pop     ar4
09FC 020000    2337            ljmp    L028031?
09FF           2338   L028030?:
09FF           2339   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:484: } else if ((mode == MODE_RESISTANCE) && (V_R >= VDD)) {
09FF E8        2340            mov     a,r0
0A00 6000      2341            jz      L028026?
0A02 C004      2342            push    ar4
0A04 C005      2343            push    ar5
0A06 C006      2344            push    ar6
0A08 C007      2345            push    ar7
0A0A C000      2346            push    ar0
0A0C 748B      2347            mov     a,#0x8B
0A0E C0E0      2348            push    acc
0A10 746C      2349            mov     a,#0x6C
0A12 C0E0      2350            push    acc
0A14 7453      2351            mov     a,#0x53
0A16 C0E0      2352            push    acc
0A18 7440      2353            mov     a,#0x40
0A1A C0E0      2354            push    acc
0A1C 857882    2355            mov     dpl,_main_V_R_1_85
0A1F 857983    2356            mov     dph,(_main_V_R_1_85 + 1)
0A22 857AF0    2357            mov     b,(_main_V_R_1_85 + 2)
0A25 E57B      2358            mov     a,(_main_V_R_1_85 + 3)
0A27 120000    2359            lcall   ___fslt
0A2A AA82      2360            mov     r2,dpl
0A2C E581      2361            mov     a,sp
0A2E 24FC      2362            add     a,#0xfc
0A30 F581      2363            mov     sp,a
0A32 D000      2364            pop     ar0
0A34 D007      2365            pop     ar7
0A36 D006      2366            pop     ar6
0A38 D005      2367            pop     ar5
0A3A D004      2368            pop     ar4
0A3C EA        2369            mov     a,r2
0A3D           2370   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:485: success_count = 0;
0A3D 7000      2371            jnz     L028026?
0A3F F5B8      2372            mov     _main_success_count_1_85,a
0A41 F5B9      2373            mov     (_main_success_count_1_85 + 1),a
0A43           2374   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:486: LCDprint("ERROR : HIGH R", 1, 1);
0A43 751801    2375            mov     _LCDprint_PARM_2,#0x01
0A46 D200      2376            setb    _LCDprint_PARM_3
0A48 90D000    2377            mov     dptr,#__str_10
0A4B 75F080    2378            mov     b,#0x80
0A4E C004      2379            push    ar4
0A50 C005      2380            push    ar5
0A52 C006      2381            push    ar6
0A54 C007      2382            push    ar7
0A56 C000      2383            push    ar0
0A58 120000    2384            lcall   _LCDprint
0A5B           2385   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:488: LCDprint("                ", 2, 1);
0A5B 751802    2386            mov     _LCDprint_PARM_2,#0x02
0A5E D200      2387            setb    _LCDprint_PARM_3
0A60 90C800    2388            mov     dptr,#__str_7
0A63 75F080    2389            mov     b,#0x80
0A66 120000    2390            lcall   _LCDprint
0A69           2391   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:489: waitms(500); // Wait for 500 ms
0A69 9001F4    2392            mov     dptr,#0x01F4
0A6C 120000    2393            lcall   _waitms
0A6F D000      2394            pop     ar0
0A71 D007      2395            pop     ar7
0A73 D006      2396            pop     ar6
0A75 D005      2397            pop     ar5
0A77 D004      2398            pop     ar4
0A79 8000      2399            sjmp    L028031?
0A7B           2400   L028026?:
0A7B           2401   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:491: success_count += 1;
0A7B 05B8      2402            inc     _main_success_count_1_85
0A7D E4        2403            clr     a
0A7E B5B840    2404            cjne    a,_main_success_count_1_85,L028083?
0A81 05B9      2405            inc     (_main_success_count_1_85 + 1)
0A83           2406   L028083?:
0A83           2407   L028031?:
0A83           2408   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:494: if (success_count >= SUCCESS_THRESHOLD) {
0A83 C3        2409            clr     c
0A84 E5B8      2410            mov     a,_main_success_count_1_85
0A86 9403      2411            subb    a,#0x03
0A88 E5B9      2412            mov     a,(_main_success_count_1_85 + 1)
0A8A 6480      2413            xrl     a,#0x80
0A8C 9480      2414            subb    a,#0x80
0A8E 5000      2415            jnc     L028084?
0A90 020000    2416            ljmp    L028041?
0A93           2417   L028084?:
0A93           2418   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:495: if (mode == MODE_RESISTANCE) {
0A93 E8        2419            mov     a,r0
0A94 6000      2420            jz      L028035?
0A96           2421   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:496: waitms(166); // Wait for 166 ms
0A96 9000A6    2422            mov     dptr,#0x00A6
0A99 C004      2423            push    ar4
0A9B C005      2424            push    ar5
0A9D C006      2425            push    ar6
0A9F C007      2426            push    ar7
0AA1 120000    2427            lcall   _waitms
0AA4           2428   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:497: printf("\rR(kOhms) = %f\r\n", R_kOhms); // Print Resistance in Kilohms
0AA4 C0C8      2429            push    _main_R_kOhms_1_85
0AA6 C0C9      2430            push    (_main_R_kOhms_1_85 + 1)
0AA8 C0CA      2431            push    (_main_R_kOhms_1_85 + 2)
0AAA C0CB      2432            push    (_main_R_kOhms_1_85 + 3)
0AAC 7400      2433            mov     a,#__str_11
0AAE C0E0      2434            push    acc
0AB0 74D1      2435            mov     a,#(__str_11 >> 8)
0AB2 C0E0      2436            push    acc
0AB4 7480      2437            mov     a,#0x80
0AB6 C0E0      2438            push    acc
0AB8 120000    2439            lcall   _printf
0ABB E581      2440            mov     a,sp
0ABD 24F9      2441            add     a,#0xf9
0ABF F581      2442            mov     sp,a
0AC1 D007      2443            pop     ar7
0AC3 D006      2444            pop     ar6
0AC5 D005      2445            pop     ar5
0AC7 D004      2446            pop     ar4
0AC9           2447   L028035?:
0AC9           2448   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:500: waitms(166); // Wait for 166 ms
0AC9 9000A6    2449            mov     dptr,#0x00A6
0ACC C004      2450            push    ar4
0ACE C005      2451            push    ar5
0AD0 C006      2452            push    ar6
0AD2 C007      2453            push    ar7
0AD4 120000    2454            lcall   _waitms
0AD7 D007      2455            pop     ar7
0AD9 D006      2456            pop     ar6
0ADB D005      2457            pop     ar5
0ADD D004      2458            pop     ar4
0ADF           2459   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:501: printf("\rF(kHz) = %f\r\n", freq_Hz / KILO_MULTIPLIER); // Print Frequency to Serial Port
0ADF E4        2460            clr     a
0AE0 C0E0      2461            push    acc
0AE2 C0E0      2462            push    acc
0AE4 747A      2463            mov     a,#0x7A
0AE6 C0E0      2464            push    acc
0AE8 7444      2465            mov     a,#0x44
0AEA C0E0      2466            push    acc
0AEC 8E82      2467            mov     dpl,r6
0AEE 8F83      2468            mov     dph,r7
0AF0 8CF0      2469            mov     b,r4
0AF2 ED        2470            mov     a,r5
0AF3 120000    2471            lcall   ___fsdiv
0AF6 AA82      2472            mov     r2,dpl
0AF8 AB83      2473            mov     r3,dph
0AFA ACF0      2474            mov     r4,b
0AFC FD        2475            mov     r5,a
0AFD E581      2476            mov     a,sp
0AFF 24FC      2477            add     a,#0xfc
0B01 F581      2478            mov     sp,a
0B03 C002      2479            push    ar2
0B05 C003      2480            push    ar3
0B07 C004      2481            push    ar4
0B09 C005      2482            push    ar5
0B0B C002      2483            push    ar2
0B0D C003      2484            push    ar3
0B0F C004      2485            push    ar4
0B11 C005      2486            push    ar5
0B13 7440      2487            mov     a,#__str_12
0B15 C0E0      2488            push    acc
0B17 74D1      2489            mov     a,#(__str_12 >> 8)
0B19 C0E0      2490            push    acc
0B1B 7480      2491            mov     a,#0x80
0B1D C0E0      2492            push    acc
0B1F 120000    2493            lcall   _printf
0B22 E581      2494            mov     a,sp
0B24 24F9      2495            add     a,#0xf9
0B26 F581      2496            mov     sp,a
0B28           2497   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:503: waitms(166); // Wait for 166 ms
0B28 9000A6    2498            mov     dptr,#0x00A6
0B2B 120000    2499            lcall   _waitms
0B2E           2500   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:504: printf("\rC(nF) = %f\r\n", capacitance_nF); // Print Capacitance in Nanofarads
0B2E C068      2501            push    _main_capacitance_nF_1_85
0B30 C069      2502            push    (_main_capacitance_nF_1_85 + 1)
0B32 C06A      2503            push    (_main_capacitance_nF_1_85 + 2)
0B34 C06B      2504            push    (_main_capacitance_nF_1_85 + 3)
0B36 7480      2505            mov     a,#__str_13
0B38 C0E0      2506            push    acc
0B3A 74D1      2507            mov     a,#(__str_13 >> 8)
0B3C C0E0      2508            push    acc
0B3E 7480      2509            mov     a,#0x80
0B40 C0E0      2510            push    acc
0B42 120000    2511            lcall   _printf
0B45 E581      2512            mov     a,sp
0B47 24F9      2513            add     a,#0xf9
0B49 F581      2514            mov     sp,a
0B4B D005      2515            pop     ar5
0B4D D004      2516            pop     ar4
0B4F D003      2517            pop     ar3
0B51 D002      2518            pop     ar2
0B53           2519   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:506: if (mode == MODE_CAPACITANCE) {
0B53 E538      2520            mov     a,_main_mode_1_85
0B55 4539      2521            orl     a,(_main_mode_1_85 + 1)
0B57 6000      2522            jz      L028086?
0B59 020000    2523            ljmp    L028041?
0B5C           2524   L028086?:
0B5C           2525   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:507: display_freq_kHz(freq_Hz / KILO_MULTIPLIER); // Display Frequency on LCD
0B5C 8A82      2526            mov     dpl,r2
0B5E 8B83      2527            mov     dph,r3
0B60 8CF0      2528            mov     b,r4
0B62 ED        2529            mov     a,r5
0B63 120000    2530            lcall   _display_freq_kHz
0B66           2531   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:508: display_capacitance_nF(capacitance_nF);
0B66 856882    2532            mov     dpl,_main_capacitance_nF_1_85
0B69 856983    2533            mov     dph,(_main_capacitance_nF_1_85 + 1)
0B6C 856AF0    2534            mov     b,(_main_capacitance_nF_1_85 + 2)
0B6F E56B      2535            mov     a,(_main_capacitance_nF_1_85 + 3)
0B71 120000    2536            lcall   _display_capacitance_nF
0B74 020000    2537            ljmp    L028041?
0B77           2538            rseg R_CSEG
0B77           2539   
0000           2540            rseg R_XINIT
0000           2541   
0000           2542            rseg R_CONST
0000           2543   __str_0:
0000 1B        2544            db 0x1B
0001 5B324A    2545            db '[2J'
0004 00        2546            db 0x00
0005           2547   __str_1:
0005 54797065  2548            db 'Type Intended Display in Line 2 (16 Char Max): '
     20496E74
     656E6465
     64204469
     73706C61
     7920696E
     204C696E
     65203220
     28313620
     43686172
     204D6178
     293A20
0034 00        2549            db 0x00
0035           2550   __str_2:
0035 0A        2551            db 0x0A
0036 00        2552            db 0x00
0037           2553   __str_3:
0037 543A2025  2554            db 'T: %.3f s'
     2E336620
     73
0040 00        2555            db 0x00
0041           2556   __str_4:
0041 463A2025  2557            db 'F: %.3f kHz'
     2E336620
     6B487A
004C 00        2558            db 0x00
004D           2559   __str_5:
004D 433A2025  2560            db 'C: %.3f nF'
     2E336620
     6E46
0057 00        2561            db 0x00
0058           2562   __str_6:
0058 523A2025  2563            db 'R: %.3f kOhms'
     2E336620
     6B4F686D
     73
0065 00        2564            db 0x00
0066           2565   __str_7:
0066 20202020  2566            db '                '
     20202020
     20202020
     20202020
0076 00        2567            db 0x00
0077           2568   __str_8:
0077 4552524F  2569            db 'ERROR : LOW C'
     52203A20
     4C4F5720
     43
0084 00        2570            db 0x00
0085           2571   __str_9:
0085 4552524F  2572            db 'ERROR : HIGH C'
     52203A20
     48494748
     2043
0093 00        2573            db 0x00
0094           2574   __str_10:
0094 4552524F  2575            db 'ERROR : HIGH R'
     52203A20
     48494748
     2052
00A2 00        2576            db 0x00
00A3           2577   __str_11:
00A3 0D        2578            db 0x0D
00A4 52286B4F  2579            db 'R(kOhms) = %f'
     686D7329
     203D2025
     66
00B1 0D        2580            db 0x0D
00B2 0A        2581            db 0x0A
00B3 00        2582            db 0x00
00B4           2583   __str_12:
00B4 0D        2584            db 0x0D
00B5 46286B48  2585            db 'F(kHz) = %f'
     7A29203D
     202566
00C0 0D        2586            db 0x0D
00C1 0A        2587            db 0x0A
00C2 00        2588            db 0x00
00C3           2589   __str_13:
00C3 0D        2590            db 0x0D
00C4 43286E46  2591            db 'C(nF) = %f'
     29203D20
     2566
00CE 0D        2592            db 0x0D
00CF 0A        2593            db 0x0A
00D0 00        2594            db 0x00
00D1           2595   
0003           2596            CSEG
0003           2597   
0003           2598   end
