0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Feb 28 17:12:26 2024
0000              5   ;--------------------------------------------------------
                  5   $name Lab4
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _calculate_capacitance_nF
0000             30            public _calculate_freq_Hz
0000             31            public _calculate_period_s
0000             32            public _display_capacitance_nF
0000             33            public _display_freq_kHz
0000             34            public _display_period
0000             35            public _display_rx
0000             36            public _write_rx
0000             37            public _LCDprint
0000             38            public _LCD_4BIT
0000             39            public _WriteCommand
0000             40            public _WriteData
0000             41            public _LCD_byte
0000             42            public _LCD_pulse
0000             43            public _Serial_Init
0000             44            public _TIMER0_Init
0000             45            public _waitms
0000             46            public _Timer3us
0000             47            public _Volts_at_Pin
0000             48            public _ADC_at_Pin
0000             49            public _InitPinADC
0000             50            public _InitADC
0000             51            public __c51_external_startup
0000             52            public _LCDprint_PARM_3
0000             53            public _calculate_period_s_PARM_3
0000             54            public _calculate_period_s_PARM_2
0000             55            public _display_rx_PARM_2
0000             56            public _write_rx_PARM_2
0000             57            public _LCDprint_PARM_2
0000             58            public _overflow_count
0000             59   ;--------------------------------------------------------
0000             60   ; Special Function Registers
0000             61   ;--------------------------------------------------------
0000             62   _ACC            DATA 0xe0
0000             63   _ADC0ASAH       DATA 0xb6
0000             64   _ADC0ASAL       DATA 0xb5
0000             65   _ADC0ASCF       DATA 0xa1
0000             66   _ADC0ASCT       DATA 0xc7
0000             67   _ADC0CF0        DATA 0xbc
0000             68   _ADC0CF1        DATA 0xb9
0000             69   _ADC0CF2        DATA 0xdf
0000             70   _ADC0CN0        DATA 0xe8
0000             71   _ADC0CN1        DATA 0xb2
0000             72   _ADC0CN2        DATA 0xb3
0000             73   _ADC0GTH        DATA 0xc4
0000             74   _ADC0GTL        DATA 0xc3
0000             75   _ADC0H          DATA 0xbe
0000             76   _ADC0L          DATA 0xbd
0000             77   _ADC0LTH        DATA 0xc6
0000             78   _ADC0LTL        DATA 0xc5
0000             79   _ADC0MX         DATA 0xbb
0000             80   _B              DATA 0xf0
0000             81   _CKCON0         DATA 0x8e
0000             82   _CKCON1         DATA 0xa6
0000             83   _CLEN0          DATA 0xc6
0000             84   _CLIE0          DATA 0xc7
0000             85   _CLIF0          DATA 0xe8
0000             86   _CLKSEL         DATA 0xa9
0000             87   _CLOUT0         DATA 0xd1
0000             88   _CLU0CF         DATA 0xb1
0000             89   _CLU0FN         DATA 0xaf
0000             90   _CLU0MX         DATA 0x84
0000             91   _CLU1CF         DATA 0xb3
0000             92   _CLU1FN         DATA 0xb2
0000             93   _CLU1MX         DATA 0x85
0000             94   _CLU2CF         DATA 0xb6
0000             95   _CLU2FN         DATA 0xb5
0000             96   _CLU2MX         DATA 0x91
0000             97   _CLU3CF         DATA 0xbf
0000             98   _CLU3FN         DATA 0xbe
0000             99   _CLU3MX         DATA 0xae
0000            100   _CMP0CN0        DATA 0x9b
0000            101   _CMP0CN1        DATA 0x99
0000            102   _CMP0MD         DATA 0x9d
0000            103   _CMP0MX         DATA 0x9f
0000            104   _CMP1CN0        DATA 0xbf
0000            105   _CMP1CN1        DATA 0xac
0000            106   _CMP1MD         DATA 0xab
0000            107   _CMP1MX         DATA 0xaa
0000            108   _CRC0CN0        DATA 0xce
0000            109   _CRC0CN1        DATA 0x86
0000            110   _CRC0CNT        DATA 0xd3
0000            111   _CRC0DAT        DATA 0xcb
0000            112   _CRC0FLIP       DATA 0xcf
0000            113   _CRC0IN         DATA 0xca
0000            114   _CRC0ST         DATA 0xd2
0000            115   _DAC0CF0        DATA 0x91
0000            116   _DAC0CF1        DATA 0x92
0000            117   _DAC0H          DATA 0x85
0000            118   _DAC0L          DATA 0x84
0000            119   _DAC1CF0        DATA 0x93
0000            120   _DAC1CF1        DATA 0x94
0000            121   _DAC1H          DATA 0x8a
0000            122   _DAC1L          DATA 0x89
0000            123   _DAC2CF0        DATA 0x95
0000            124   _DAC2CF1        DATA 0x96
0000            125   _DAC2H          DATA 0x8c
0000            126   _DAC2L          DATA 0x8b
0000            127   _DAC3CF0        DATA 0x9a
0000            128   _DAC3CF1        DATA 0x9c
0000            129   _DAC3H          DATA 0x8e
0000            130   _DAC3L          DATA 0x8d
0000            131   _DACGCF0        DATA 0x88
0000            132   _DACGCF1        DATA 0x98
0000            133   _DACGCF2        DATA 0xa2
0000            134   _DERIVID        DATA 0xad
0000            135   _DEVICEID       DATA 0xb5
0000            136   _DPH            DATA 0x83
0000            137   _DPL            DATA 0x82
0000            138   _EIE1           DATA 0xe6
0000            139   _EIE2           DATA 0xf3
0000            140   _EIP1           DATA 0xbb
0000            141   _EIP1H          DATA 0xee
0000            142   _EIP2           DATA 0xed
0000            143   _EIP2H          DATA 0xf6
0000            144   _EMI0CN         DATA 0xe7
0000            145   _FLKEY          DATA 0xb7
0000            146   _HFO0CAL        DATA 0xc7
0000            147   _HFO1CAL        DATA 0xd6
0000            148   _HFOCN          DATA 0xef
0000            149   _I2C0ADM        DATA 0xff
0000            150   _I2C0CN0        DATA 0xba
0000            151   _I2C0DIN        DATA 0xbc
0000            152   _I2C0DOUT       DATA 0xbb
0000            153   _I2C0FCN0       DATA 0xad
0000            154   _I2C0FCN1       DATA 0xab
0000            155   _I2C0FCT        DATA 0xf5
0000            156   _I2C0SLAD       DATA 0xbd
0000            157   _I2C0STAT       DATA 0xb9
0000            158   _IE             DATA 0xa8
0000            159   _IP             DATA 0xb8
0000            160   _IPH            DATA 0xf2
0000            161   _IT01CF         DATA 0xe4
0000            162   _LFO0CN         DATA 0xb1
0000            163   _P0             DATA 0x80
0000            164   _P0MASK         DATA 0xfe
0000            165   _P0MAT          DATA 0xfd
0000            166   _P0MDIN         DATA 0xf1
0000            167   _P0MDOUT        DATA 0xa4
0000            168   _P0SKIP         DATA 0xd4
0000            169   _P1             DATA 0x90
0000            170   _P1MASK         DATA 0xee
0000            171   _P1MAT          DATA 0xed
0000            172   _P1MDIN         DATA 0xf2
0000            173   _P1MDOUT        DATA 0xa5
0000            174   _P1SKIP         DATA 0xd5
0000            175   _P2             DATA 0xa0
0000            176   _P2MASK         DATA 0xfc
0000            177   _P2MAT          DATA 0xfb
0000            178   _P2MDIN         DATA 0xf3
0000            179   _P2MDOUT        DATA 0xa6
0000            180   _P2SKIP         DATA 0xcc
0000            181   _P3             DATA 0xb0
0000            182   _P3MDIN         DATA 0xf4
0000            183   _P3MDOUT        DATA 0x9c
0000            184   _PCA0CENT       DATA 0x9e
0000            185   _PCA0CLR        DATA 0x9c
0000            186   _PCA0CN0        DATA 0xd8
0000            187   _PCA0CPH0       DATA 0xfc
0000            188   _PCA0CPH1       DATA 0xea
0000            189   _PCA0CPH2       DATA 0xec
0000            190   _PCA0CPH3       DATA 0xf5
0000            191   _PCA0CPH4       DATA 0x85
0000            192   _PCA0CPH5       DATA 0xde
0000            193   _PCA0CPL0       DATA 0xfb
0000            194   _PCA0CPL1       DATA 0xe9
0000            195   _PCA0CPL2       DATA 0xeb
0000            196   _PCA0CPL3       DATA 0xf4
0000            197   _PCA0CPL4       DATA 0x84
0000            198   _PCA0CPL5       DATA 0xdd
0000            199   _PCA0CPM0       DATA 0xda
0000            200   _PCA0CPM1       DATA 0xdb
0000            201   _PCA0CPM2       DATA 0xdc
0000            202   _PCA0CPM3       DATA 0xae
0000            203   _PCA0CPM4       DATA 0xaf
0000            204   _PCA0CPM5       DATA 0xcc
0000            205   _PCA0H          DATA 0xfa
0000            206   _PCA0L          DATA 0xf9
0000            207   _PCA0MD         DATA 0xd9
0000            208   _PCA0POL        DATA 0x96
0000            209   _PCA0PWM        DATA 0xf7
0000            210   _PCON0          DATA 0x87
0000            211   _PCON1          DATA 0xcd
0000            212   _PFE0CN         DATA 0xc1
0000            213   _PRTDRV         DATA 0xf6
0000            214   _PSCTL          DATA 0x8f
0000            215   _PSTAT0         DATA 0xaa
0000            216   _PSW            DATA 0xd0
0000            217   _REF0CN         DATA 0xd1
0000            218   _REG0CN         DATA 0xc9
0000            219   _REVID          DATA 0xb6
0000            220   _RSTSRC         DATA 0xef
0000            221   _SBCON1         DATA 0x94
0000            222   _SBRLH1         DATA 0x96
0000            223   _SBRLL1         DATA 0x95
0000            224   _SBUF           DATA 0x99
0000            225   _SBUF0          DATA 0x99
0000            226   _SBUF1          DATA 0x92
0000            227   _SCON           DATA 0x98
0000            228   _SCON0          DATA 0x98
0000            229   _SCON1          DATA 0xc8
0000            230   _SFRPAGE        DATA 0xa7
0000            231   _SFRPGCN        DATA 0xbc
0000            232   _SFRSTACK       DATA 0xd7
0000            233   _SMB0ADM        DATA 0xd6
0000            234   _SMB0ADR        DATA 0xd7
0000            235   _SMB0CF         DATA 0xc1
0000            236   _SMB0CN0        DATA 0xc0
0000            237   _SMB0DAT        DATA 0xc2
0000            238   _SMB0FCN0       DATA 0xc3
0000            239   _SMB0FCN1       DATA 0xc4
0000            240   _SMB0FCT        DATA 0xef
0000            241   _SMB0RXLN       DATA 0xc5
0000            242   _SMB0TC         DATA 0xac
0000            243   _SMOD1          DATA 0x93
0000            244   _SP             DATA 0x81
0000            245   _SPI0CFG        DATA 0xa1
0000            246   _SPI0CKR        DATA 0xa2
0000            247   _SPI0CN0        DATA 0xf8
0000            248   _SPI0DAT        DATA 0xa3
0000            249   _SPI0FCN0       DATA 0x9a
0000            250   _SPI0FCN1       DATA 0x9b
0000            251   _SPI0FCT        DATA 0xf7
0000            252   _SPI0PCF        DATA 0xdf
0000            253   _TCON           DATA 0x88
0000            254   _TH0            DATA 0x8c
0000            255   _TH1            DATA 0x8d
0000            256   _TL0            DATA 0x8a
0000            257   _TL1            DATA 0x8b
0000            258   _TMOD           DATA 0x89
0000            259   _TMR2CN0        DATA 0xc8
0000            260   _TMR2CN1        DATA 0xfd
0000            261   _TMR2H          DATA 0xcf
0000            262   _TMR2L          DATA 0xce
0000            263   _TMR2RLH        DATA 0xcb
0000            264   _TMR2RLL        DATA 0xca
0000            265   _TMR3CN0        DATA 0x91
0000            266   _TMR3CN1        DATA 0xfe
0000            267   _TMR3H          DATA 0x95
0000            268   _TMR3L          DATA 0x94
0000            269   _TMR3RLH        DATA 0x93
0000            270   _TMR3RLL        DATA 0x92
0000            271   _TMR4CN0        DATA 0x98
0000            272   _TMR4CN1        DATA 0xff
0000            273   _TMR4H          DATA 0xa5
0000            274   _TMR4L          DATA 0xa4
0000            275   _TMR4RLH        DATA 0xa3
0000            276   _TMR4RLL        DATA 0xa2
0000            277   _TMR5CN0        DATA 0xc0
0000            278   _TMR5CN1        DATA 0xf1
0000            279   _TMR5H          DATA 0xd5
0000            280   _TMR5L          DATA 0xd4
0000            281   _TMR5RLH        DATA 0xd3
0000            282   _TMR5RLL        DATA 0xd2
0000            283   _UART0PCF       DATA 0xd9
0000            284   _UART1FCN0      DATA 0x9d
0000            285   _UART1FCN1      DATA 0xd8
0000            286   _UART1FCT       DATA 0xfa
0000            287   _UART1LIN       DATA 0x9e
0000            288   _UART1PCF       DATA 0xda
0000            289   _VDM0CN         DATA 0xff
0000            290   _WDTCN          DATA 0x97
0000            291   _XBR0           DATA 0xe1
0000            292   _XBR1           DATA 0xe2
0000            293   _XBR2           DATA 0xe3
0000            294   _XOSC0CN        DATA 0x86
0000            295   _DPTR           DATA 0x8382
0000            296   _TMR2RL         DATA 0xcbca
0000            297   _TMR3RL         DATA 0x9392
0000            298   _TMR4RL         DATA 0xa3a2
0000            299   _TMR5RL         DATA 0xd3d2
0000            300   _TMR0           DATA 0x8c8a
0000            301   _TMR1           DATA 0x8d8b
0000            302   _TMR2           DATA 0xcfce
0000            303   _TMR3           DATA 0x9594
0000            304   _TMR4           DATA 0xa5a4
0000            305   _TMR5           DATA 0xd5d4
0000            306   _SBRL1          DATA 0x9695
0000            307   _PCA0           DATA 0xfaf9
0000            308   _PCA0CP0        DATA 0xfcfb
0000            309   _PCA0CP1        DATA 0xeae9
0000            310   _PCA0CP2        DATA 0xeceb
0000            311   _PCA0CP3        DATA 0xf5f4
0000            312   _PCA0CP4        DATA 0x8584
0000            313   _PCA0CP5        DATA 0xdedd
0000            314   _ADC0ASA        DATA 0xb6b5
0000            315   _ADC0GT         DATA 0xc4c3
0000            316   _ADC0           DATA 0xbebd
0000            317   _ADC0LT         DATA 0xc6c5
0000            318   _DAC0           DATA 0x8584
0000            319   _DAC1           DATA 0x8a89
0000            320   _DAC2           DATA 0x8c8b
0000            321   _DAC3           DATA 0x8e8d
0000            322   ;--------------------------------------------------------
0000            323   ; special function bits
0000            324   ;--------------------------------------------------------
0000            325   _ACC_0          BIT 0xe0
0000            326   _ACC_1          BIT 0xe1
0000            327   _ACC_2          BIT 0xe2
0000            328   _ACC_3          BIT 0xe3
0000            329   _ACC_4          BIT 0xe4
0000            330   _ACC_5          BIT 0xe5
0000            331   _ACC_6          BIT 0xe6
0000            332   _ACC_7          BIT 0xe7
0000            333   _TEMPE          BIT 0xe8
0000            334   _ADGN0          BIT 0xe9
0000            335   _ADGN1          BIT 0xea
0000            336   _ADWINT         BIT 0xeb
0000            337   _ADBUSY         BIT 0xec
0000            338   _ADINT          BIT 0xed
0000            339   _IPOEN          BIT 0xee
0000            340   _ADEN           BIT 0xef
0000            341   _B_0            BIT 0xf0
0000            342   _B_1            BIT 0xf1
0000            343   _B_2            BIT 0xf2
0000            344   _B_3            BIT 0xf3
0000            345   _B_4            BIT 0xf4
0000            346   _B_5            BIT 0xf5
0000            347   _B_6            BIT 0xf6
0000            348   _B_7            BIT 0xf7
0000            349   _C0FIF          BIT 0xe8
0000            350   _C0RIF          BIT 0xe9
0000            351   _C1FIF          BIT 0xea
0000            352   _C1RIF          BIT 0xeb
0000            353   _C2FIF          BIT 0xec
0000            354   _C2RIF          BIT 0xed
0000            355   _C3FIF          BIT 0xee
0000            356   _C3RIF          BIT 0xef
0000            357   _D1SRC0         BIT 0x88
0000            358   _D1SRC1         BIT 0x89
0000            359   _D1AMEN         BIT 0x8a
0000            360   _D01REFSL       BIT 0x8b
0000            361   _D3SRC0         BIT 0x8c
0000            362   _D3SRC1         BIT 0x8d
0000            363   _D3AMEN         BIT 0x8e
0000            364   _D23REFSL       BIT 0x8f
0000            365   _D0UDIS         BIT 0x98
0000            366   _D1UDIS         BIT 0x99
0000            367   _D2UDIS         BIT 0x9a
0000            368   _D3UDIS         BIT 0x9b
0000            369   _EX0            BIT 0xa8
0000            370   _ET0            BIT 0xa9
0000            371   _EX1            BIT 0xaa
0000            372   _ET1            BIT 0xab
0000            373   _ES0            BIT 0xac
0000            374   _ET2            BIT 0xad
0000            375   _ESPI0          BIT 0xae
0000            376   _EA             BIT 0xaf
0000            377   _PX0            BIT 0xb8
0000            378   _PT0            BIT 0xb9
0000            379   _PX1            BIT 0xba
0000            380   _PT1            BIT 0xbb
0000            381   _PS0            BIT 0xbc
0000            382   _PT2            BIT 0xbd
0000            383   _PSPI0          BIT 0xbe
0000            384   _P0_0           BIT 0x80
0000            385   _P0_1           BIT 0x81
0000            386   _P0_2           BIT 0x82
0000            387   _P0_3           BIT 0x83
0000            388   _P0_4           BIT 0x84
0000            389   _P0_5           BIT 0x85
0000            390   _P0_6           BIT 0x86
0000            391   _P0_7           BIT 0x87
0000            392   _P1_0           BIT 0x90
0000            393   _P1_1           BIT 0x91
0000            394   _P1_2           BIT 0x92
0000            395   _P1_3           BIT 0x93
0000            396   _P1_4           BIT 0x94
0000            397   _P1_5           BIT 0x95
0000            398   _P1_6           BIT 0x96
0000            399   _P1_7           BIT 0x97
0000            400   _P2_0           BIT 0xa0
0000            401   _P2_1           BIT 0xa1
0000            402   _P2_2           BIT 0xa2
0000            403   _P2_3           BIT 0xa3
0000            404   _P2_4           BIT 0xa4
0000            405   _P2_5           BIT 0xa5
0000            406   _P2_6           BIT 0xa6
0000            407   _P3_0           BIT 0xb0
0000            408   _P3_1           BIT 0xb1
0000            409   _P3_2           BIT 0xb2
0000            410   _P3_3           BIT 0xb3
0000            411   _P3_4           BIT 0xb4
0000            412   _P3_7           BIT 0xb7
0000            413   _CCF0           BIT 0xd8
0000            414   _CCF1           BIT 0xd9
0000            415   _CCF2           BIT 0xda
0000            416   _CCF3           BIT 0xdb
0000            417   _CCF4           BIT 0xdc
0000            418   _CCF5           BIT 0xdd
0000            419   _CR             BIT 0xde
0000            420   _CF             BIT 0xdf
0000            421   _PARITY         BIT 0xd0
0000            422   _F1             BIT 0xd1
0000            423   _OV             BIT 0xd2
0000            424   _RS0            BIT 0xd3
0000            425   _RS1            BIT 0xd4
0000            426   _F0             BIT 0xd5
0000            427   _AC             BIT 0xd6
0000            428   _CY             BIT 0xd7
0000            429   _RI             BIT 0x98
0000            430   _TI             BIT 0x99
0000            431   _RB8            BIT 0x9a
0000            432   _TB8            BIT 0x9b
0000            433   _REN            BIT 0x9c
0000            434   _CE             BIT 0x9d
0000            435   _SMODE          BIT 0x9e
0000            436   _RI1            BIT 0xc8
0000            437   _TI1            BIT 0xc9
0000            438   _RBX1           BIT 0xca
0000            439   _TBX1           BIT 0xcb
0000            440   _REN1           BIT 0xcc
0000            441   _PERR1          BIT 0xcd
0000            442   _OVR1           BIT 0xce
0000            443   _SI             BIT 0xc0
0000            444   _ACK            BIT 0xc1
0000            445   _ARBLOST        BIT 0xc2
0000            446   _ACKRQ          BIT 0xc3
0000            447   _STO            BIT 0xc4
0000            448   _STA            BIT 0xc5
0000            449   _TXMODE         BIT 0xc6
0000            450   _MASTER         BIT 0xc7
0000            451   _SPIEN          BIT 0xf8
0000            452   _TXNF           BIT 0xf9
0000            453   _NSSMD0         BIT 0xfa
0000            454   _NSSMD1         BIT 0xfb
0000            455   _RXOVRN         BIT 0xfc
0000            456   _MODF           BIT 0xfd
0000            457   _WCOL           BIT 0xfe
0000            458   _SPIF           BIT 0xff
0000            459   _IT0            BIT 0x88
0000            460   _IE0            BIT 0x89
0000            461   _IT1            BIT 0x8a
0000            462   _IE1            BIT 0x8b
0000            463   _TR0            BIT 0x8c
0000            464   _TF0            BIT 0x8d
0000            465   _TR1            BIT 0x8e
0000            466   _TF1            BIT 0x8f
0000            467   _T2XCLK0        BIT 0xc8
0000            468   _T2XCLK1        BIT 0xc9
0000            469   _TR2            BIT 0xca
0000            470   _T2SPLIT        BIT 0xcb
0000            471   _TF2CEN         BIT 0xcc
0000            472   _TF2LEN         BIT 0xcd
0000            473   _TF2L           BIT 0xce
0000            474   _TF2H           BIT 0xcf
0000            475   _T4XCLK0        BIT 0x98
0000            476   _T4XCLK1        BIT 0x99
0000            477   _TR4            BIT 0x9a
0000            478   _T4SPLIT        BIT 0x9b
0000            479   _TF4CEN         BIT 0x9c
0000            480   _TF4LEN         BIT 0x9d
0000            481   _TF4L           BIT 0x9e
0000            482   _TF4H           BIT 0x9f
0000            483   _T5XCLK0        BIT 0xc0
0000            484   _T5XCLK1        BIT 0xc1
0000            485   _TR5            BIT 0xc2
0000            486   _T5SPLIT        BIT 0xc3
0000            487   _TF5CEN         BIT 0xc4
0000            488   _TF5LEN         BIT 0xc5
0000            489   _TF5L           BIT 0xc6
0000            490   _TF5H           BIT 0xc7
0000            491   _RIE            BIT 0xd8
0000            492   _RXTO0          BIT 0xd9
0000            493   _RXTO1          BIT 0xda
0000            494   _RFRQ           BIT 0xdb
0000            495   _TIE            BIT 0xdc
0000            496   _TXHOLD         BIT 0xdd
0000            497   _TXNF1          BIT 0xde
0000            498   _TFRQ           BIT 0xdf
0000            499   ;--------------------------------------------------------
0000            500   ; overlayable register banks
0000            501   ;--------------------------------------------------------
0000            502            rbank0 segment data overlay
0000            503   ;--------------------------------------------------------
0000            504   ; internal ram data
0000            505   ;--------------------------------------------------------
0000            506            rseg R_DSEG
0000            507   _overflow_count:
0000            508            ds 1
0001            509   _LCDprint_PARM_2:
0001            510            ds 1
0002            511   _write_rx_PARM_2:
0002            512            ds 2
0004            513   _write_rx_buff_1_55:
0004            514            ds 3
0007            515   _write_rx_sloc0_1_0:
0007            516            ds 2
0009            517   _display_rx_PARM_2:
0009            518            ds 2
000B            519   _display_period_buff_1_63:
000B            520            ds 16
001B            521   _display_freq_kHz_buff_1_65:
001B            522            ds 16
002B            523   _display_capacitance_nF_buff_1_67:
002B            524            ds 16
003B            525   _calculate_period_s_PARM_2:
003B            526            ds 2
003D            527   _calculate_period_s_PARM_3:
003D            528            ds 2
003F            529   _main_v_led_1_75:
003F            530            ds 4
0043            531   _main_capacitance_nF_1_75:
0043            532            ds 4
0047            533   _main_success_count_1_75:
0047            534            ds 2
0049            535   ;--------------------------------------------------------
0049            536   ; overlayable items in internal ram 
0049            537   ;--------------------------------------------------------
0000            538            rseg    R_OSEG
0000            539   _InitPinADC_PARM_2:
0000            540            ds 1
0001            541            rseg    R_OSEG
0001            542            rseg    R_OSEG
0001            543   ;--------------------------------------------------------
0001            544   ; indirectly addressable internal ram data
0001            545   ;--------------------------------------------------------
0000            546            rseg R_ISEG
0000            547   ;--------------------------------------------------------
0000            548   ; absolute internal ram data
0000            549   ;--------------------------------------------------------
0000            550            DSEG
0000            551   ;--------------------------------------------------------
0000            552   ; bit data
0000            553   ;--------------------------------------------------------
0000            554            rseg R_BSEG
0000            555   _LCDprint_PARM_3:
0000            556            DBIT    1
0001            557   ;--------------------------------------------------------
0001            558   ; paged external ram data
0001            559   ;--------------------------------------------------------
0000            560            rseg R_PSEG
0000            561   ;--------------------------------------------------------
0000            562   ; external ram data
0000            563   ;--------------------------------------------------------
0000            564            rseg R_XSEG
0000            565   ;--------------------------------------------------------
0000            566   ; absolute external ram data
0000            567   ;--------------------------------------------------------
0000            568            XSEG
0000            569   ;--------------------------------------------------------
0000            570   ; external initialized ram data
0000            571   ;--------------------------------------------------------
0000            572            rseg R_IXSEG
0000            573            rseg R_HOME
0000            574            rseg R_GSINIT
0000            575            rseg R_CSEG
0000            576   ;--------------------------------------------------------
0000            577   ; Reset entry point and interrupt vectors
0000            578   ;--------------------------------------------------------
0000            579            CSEG at 0x0000
0000 020000     580            ljmp    _crt0
0003            581   ;--------------------------------------------------------
0003            582   ; global & static initialisations
0003            583   ;--------------------------------------------------------
0000            584            rseg R_HOME
0000            585            rseg R_GSINIT
0000            586            rseg R_GSINIT
0000            587   ;--------------------------------------------------------
0000            588   ; data variables initialization
0000            589   ;--------------------------------------------------------
0000            590            rseg R_DINIT
0000            591            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            592   ;--------------------------------------------------------
0000            593   ; code
0000            594   ;--------------------------------------------------------
0000            595            rseg R_CSEG
0000            596   ;------------------------------------------------------------
0000            597   ;Allocation info for local variables in function '_c51_external_startup'
0000            598   ;------------------------------------------------------------
0000            599   ;------------------------------------------------------------
0000            600   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:59: char _c51_external_startup(void) {
0000            601   ;        -----------------------------------------
0000            602   ;         function _c51_external_startup
0000            603   ;        -----------------------------------------
0000            604   __c51_external_startup:
0000            605            using   0
0000            606   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:61: SFRPAGE = 0x00;
0000 75A700     607            mov     _SFRPAGE,#0x00
0003            608   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:62: WDTCN = 0xDE; // First Key
0003 7597DE     609            mov     _WDTCN,#0xDE
0006            610   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:63: WDTCN = 0xAD; // Second Key
0006 7597AD     611            mov     _WDTCN,#0xAD
0009            612   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:65: VDM0CN |= 0x80;
0009 43FF80     613            orl     _VDM0CN,#0x80
000C            614   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:66: RSTSRC=0x02|0x04;  // Enable Reset on Missing Clock Detector and VDD
000C 75EF06     615            mov     _RSTSRC,#0x06
000F            616   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:74: SFRPAGE = 0x10;
000F 75A710     617            mov     _SFRPAGE,#0x10
0012            618   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:75: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     619            mov     _PFE0CN,#0x20
0015            620   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:76: SFRPAGE = 0x00;
0015 75A700     621            mov     _SFRPAGE,#0x00
0018            622   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:98: CLKSEL = 0x00;
0018 75A900     623            mov     _CLKSEL,#0x00
001B            624   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:99: CLKSEL = 0x00;
001B 75A900     625            mov     _CLKSEL,#0x00
001E            626   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:100: while ((CLKSEL & 0x80) == 0);
001E            627   L002001?:
001E E5A9       628            mov     a,_CLKSEL
0020 30E7D0     629            jnb     acc.7,L002001?
0023            630   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:101: CLKSEL = 0x03;
0023 75A903     631            mov     _CLKSEL,#0x03
0026            632   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:102: CLKSEL = 0x03;
0026 75A903     633            mov     _CLKSEL,#0x03
0029            634   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:103: while ((CLKSEL & 0x80) == 0);
0029            635   L002004?:
0029 E5A9       636            mov     a,_CLKSEL
002B 30E750     637            jnb     acc.7,L002004?
002E            638   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:108: P0MDOUT |= 0x10; // Enable UART0 TX As Push-Pull Output
002E 43A410     639            orl     _P0MDOUT,#0x10
0031            640   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:109: XBR0     = 0x01; // Enable UART0 on P0.4 (TX) and P0.5 (RX)
0031 75E101     641            mov     _XBR0,#0x01
0034            642   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:110: XBR1     = 0X00; // Enable T0 on P0.0
0034 75E200     643            mov     _XBR1,#0x00
0037            644   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:111: XBR2     = 0x40; // Enable Crossbar and Weak Pull-Ups
0037 75E340     645            mov     _XBR2,#0x40
003A            646   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:118: SCON0 = 0x10;
003A 759810     647            mov     _SCON0,#0x10
003D            648   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:119: CKCON0 |= 0b_0000_0000 ; // Timer 1 Uses SYSCLK / 12
003D 858E8E     649            mov     _CKCON0,_CKCON0
0040            650   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:120: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L)); // Set Timer1 Reload Value, Initial Value
0040 758DE6     651            mov     _TH1,#0xE6
0043            652   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:121: TL1 = TH1;      // Init Timer1
0043 858D8B     653            mov     _TL1,_TH1
0046            654   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:122: TMOD &= ~0xf0;  // TMOD: Timer 1 in 8-bit auto-reload
0046 53890F     655            anl     _TMOD,#0x0F
0049            656   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:123: TMOD |=  0x20;
0049 438920     657            orl     _TMOD,#0x20
004C            658   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:124: TR1 = 1; // Start Timer1
004C D28E       659            setb    _TR1
004E            660   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:125: TI = 1;  // Indicate TX0 Ready
004E D299       661            setb    _TI
0050            662   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:127: return 0;
0050 758200     663            mov     dpl,#0x00
0053 22         664            ret
0054            665   ;------------------------------------------------------------
0054            666   ;Allocation info for local variables in function 'InitADC'
0054            667   ;------------------------------------------------------------
0054            668   ;------------------------------------------------------------
0054            669   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:130: void InitADC(void) {
0054            670   ;        -----------------------------------------
0054            671   ;         function InitADC
0054            672   ;        -----------------------------------------
0054            673   _InitADC:
0054            674   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:131: SFRPAGE = 0x00;
0054 75A700     675            mov     _SFRPAGE,#0x00
0057            676   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:132: ADEN=0; // Disable ADC
0057 C2EF       677            clr     _ADEN
0059            678   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:137: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     679            mov     _ADC0CN1,#0x80
005C            680   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:141: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     681            mov     _ADC0CF0,#0x20
005F            682   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:145: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     683            mov     _ADC0CF1,#0x1E
0062            684   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:154: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     685            mov     _ADC0CN0,#0x00
0065            686   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:159: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     687            mov     _ADC0CF2,#0x3F
0068            688   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:163: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     689            mov     _ADC0CN2,#0x00
006B            690   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:165: ADEN=1; // Enable ADC
006B D2EF       691            setb    _ADEN
006D 22         692            ret
006E            693   ;------------------------------------------------------------
006E            694   ;Allocation info for local variables in function 'InitPinADC'
006E            695   ;------------------------------------------------------------
006E            696   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
006E            697   ;portno                    Allocated to registers r2 
006E            698   ;mask                      Allocated to registers r3 
006E            699   ;------------------------------------------------------------
006E            700   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:168: void InitPinADC(unsigned char portno, unsigned char pinno) {
006E            701   ;        -----------------------------------------
006E            702   ;         function InitPinADC
006E            703   ;        -----------------------------------------
006E            704   _InitPinADC:
006E AA82       705            mov     r2,dpl
0070            706   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:171: mask = 1 << pinno;
0070 8560F0     707            mov     b,_InitPinADC_PARM_2
0073 05F0       708            inc     b
0075 7401       709            mov     a,#0x01
0077 8000       710            sjmp    L004013?
0079            711   L004011?:
0079 25E0       712            add     a,acc
007B            713   L004013?:
007B D5F050     714            djnz    b,L004011?
007E FB         715            mov     r3,a
007F            716   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:173: SFRPAGE = 0x20;
007F 75A720     717            mov     _SFRPAGE,#0x20
0082            718   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:174: switch(portno) {
0082 BA0090     719            cjne    r2,#0x00,L004014?
0085 8000       720            sjmp    L004001?
0087            721   L004014?:
0087 BA0110     722            cjne    r2,#0x01,L004015?
008A 8000       723            sjmp    L004002?
008C            724   L004015?:
008C            725   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:175: case 0:
008C BA0290     726            cjne    r2,#0x02,L004005?
008F 8000       727            sjmp    L004003?
0091            728   L004001?:
0091            729   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:176: P0MDIN &= (~mask); // Set Pin as Analog Input
0091 EB         730            mov     a,r3
0092 F4         731            cpl     a
0093 FA         732            mov     r2,a
0094 52F1       733            anl     _P0MDIN,a
0096            734   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:177: P0SKIP |= mask; // Skip Crossbar Decoding for this Pin
0096 EB         735            mov     a,r3
0097 42D4       736            orl     _P0SKIP,a
0099            737   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:178: break;
0099            738   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:179: case 1:
0099 8000       739            sjmp    L004005?
009B            740   L004002?:
009B            741   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:180: P1MDIN &= (~mask); // Set Pin as Analog Input
009B EB         742            mov     a,r3
009C F4         743            cpl     a
009D FA         744            mov     r2,a
009E 52F2       745            anl     _P1MDIN,a
00A0            746   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:181: P1SKIP |= mask; // Skip Crossbar Decoding for this Pin
00A0 EB         747            mov     a,r3
00A1 42D5       748            orl     _P1SKIP,a
00A3            749   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:182: break;
00A3            750   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:183: case 2:
00A3 8000       751            sjmp    L004005?
00A5            752   L004003?:
00A5            753   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:184: P2MDIN &= (~mask); // Set Pin as Analog Input
00A5 EB         754            mov     a,r3
00A6 F4         755            cpl     a
00A7 FA         756            mov     r2,a
00A8 52F3       757            anl     _P2MDIN,a
00AA            758   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:185: P2SKIP |= mask; // Skip Crossbar Decoding for this Pin
00AA EB         759            mov     a,r3
00AB 42CC       760            orl     _P2SKIP,a
00AD            761   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:189: }
00AD            762   L004005?:
00AD            763   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:190: SFRPAGE = 0x00;
00AD 75A700     764            mov     _SFRPAGE,#0x00
00B0 22         765            ret
00B1            766   ;------------------------------------------------------------
00B1            767   ;Allocation info for local variables in function 'ADC_at_Pin'
00B1            768   ;------------------------------------------------------------
00B1            769   ;pin                       Allocated to registers 
00B1            770   ;------------------------------------------------------------
00B1            771   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:193: unsigned int ADC_at_Pin(unsigned char pin) {
00B1            772   ;        -----------------------------------------
00B1            773   ;         function ADC_at_Pin
00B1            774   ;        -----------------------------------------
00B1            775   _ADC_at_Pin:
00B1 8582BB     776            mov     _ADC0MX,dpl
00B4            777   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:195: ADINT = 0;
00B4 C2ED       778            clr     _ADINT
00B6            779   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:196: ADBUSY = 1;     // Convert Voltage at the Pin
00B6 D2EC       780            setb    _ADBUSY
00B8            781   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:197: while (!ADINT); // Wait for Conversion to Complete
00B8            782   L005001?:
00B8 30ED10     783            jnb     _ADINT,L005001?
00BB            784   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:198: return (ADC0);
00BB 85BD82     785            mov     dpl,_ADC0
00BE 85BE83     786            mov     dph,(_ADC0 >> 8)
00C1 22         787            ret
00C2            788   ;------------------------------------------------------------
00C2            789   ;Allocation info for local variables in function 'Volts_at_Pin'
00C2            790   ;------------------------------------------------------------
00C2            791   ;pin                       Allocated to registers r2 
00C2            792   ;------------------------------------------------------------
00C2            793   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:201: float Volts_at_Pin(unsigned char pin) {
00C2            794   ;        -----------------------------------------
00C2            795   ;         function Volts_at_Pin
00C2            796   ;        -----------------------------------------
00C2            797   _Volts_at_Pin:
00C2            798   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:203: (ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111
00C2 120000     799            lcall   _ADC_at_Pin
00C5 120000     800            lcall   ___uint2fs
00C8 AA82       801            mov     r2,dpl
00CA AB83       802            mov     r3,dph
00CC ACF0       803            mov     r4,b
00CE FD         804            mov     r5,a
00CF C002       805            push    ar2
00D1 C003       806            push    ar3
00D3 C004       807            push    ar4
00D5 C005       808            push    ar5
00D7 906C8B     809            mov     dptr,#0x6C8B
00DA 75F053     810            mov     b,#0x53
00DD 7440       811            mov     a,#0x40
00DF 120000     812            lcall   ___fsmul
00E2 AA82       813            mov     r2,dpl
00E4 AB83       814            mov     r3,dph
00E6 ACF0       815            mov     r4,b
00E8 FD         816            mov     r5,a
00E9 E581       817            mov     a,sp
00EB 24FC       818            add     a,#0xfc
00ED F581       819            mov     sp,a
00EF E4         820            clr     a
00F0 C0E0       821            push    acc
00F2 74FC       822            mov     a,#0xFC
00F4 C0E0       823            push    acc
00F6 747F       824            mov     a,#0x7F
00F8 C0E0       825            push    acc
00FA 7446       826            mov     a,#0x46
00FC C0E0       827            push    acc
00FE 8A82       828            mov     dpl,r2
0100 8B83       829            mov     dph,r3
0102 8CF0       830            mov     b,r4
0104 ED         831            mov     a,r5
0105 120000     832            lcall   ___fsdiv
0108 AA82       833            mov     r2,dpl
010A AB83       834            mov     r3,dph
010C ACF0       835            mov     r4,b
010E FD         836            mov     r5,a
010F E581       837            mov     a,sp
0111 24FC       838            add     a,#0xfc
0113 F581       839            mov     sp,a
0115 8A82       840            mov     dpl,r2
0117 8B83       841            mov     dph,r3
0119 8CF0       842            mov     b,r4
011B ED         843            mov     a,r5
011C 22         844            ret
011D            845   ;------------------------------------------------------------
011D            846   ;Allocation info for local variables in function 'Timer3us'
011D            847   ;------------------------------------------------------------
011D            848   ;us                        Allocated to registers r2 
011D            849   ;i                         Allocated to registers r3 
011D            850   ;------------------------------------------------------------
011D            851   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:210: void Timer3us(unsigned char us) {
011D            852   ;        -----------------------------------------
011D            853   ;         function Timer3us
011D            854   ;        -----------------------------------------
011D            855   _Timer3us:
011D AA82       856            mov     r2,dpl
011F            857   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:214: CKCON0 |= 0b_0100_0000;
011F 438E40     858            orl     _CKCON0,#0x40
0122            859   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:216: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to Overflow in 1us
0122 7592B8     860            mov     _TMR3RL,#0xB8
0125 7593FF     861            mov     (_TMR3RL >> 8),#0xFF
0128            862   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:217: TMR3 = TMR3RL;                 // Initialize Timer3 for First Overflow
0128 859294     863            mov     _TMR3,_TMR3RL
012B 859395     864            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
012E            865   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:219: TMR3CN0 = 0x04;                 // Start Timer3 and Clear Overflow Flag
012E 759104     866            mov     _TMR3CN0,#0x04
0131            867   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:220: for (i = 0; i < us; i++) {      // Count Overflows (#Microseconds)
0131 7B00       868            mov     r3,#0x00
0133            869   L007004?:
0133 C3         870            clr     c
0134 EB         871            mov     a,r3
0135 9A         872            subb    a,r2
0136 5000       873            jnc     L007007?
0138            874   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:221: while (!(TMR3CN0 & 0x80));  // Wait for Overflow
0138            875   L007001?:
0138 E591       876            mov     a,_TMR3CN0
013A 30E710     877            jnb     acc.7,L007001?
013D            878   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:222: TMR3CN0 &= ~(0x80);         // Clear Overflow Indicator
013D 53917F     879            anl     _TMR3CN0,#0x7F
0140            880   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:220: for (i = 0; i < us; i++) {      // Count Overflows (#Microseconds)
0140 0B         881            inc     r3
0141 8000       882            sjmp    L007004?
0143            883   L007007?:
0143            884   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:224: TMR3CN0 = 0 ;                   // Stop Timer3 and Clear Overflow Flag
0143 759100     885            mov     _TMR3CN0,#0x00
0146 22         886            ret
0147            887   ;------------------------------------------------------------
0147            888   ;Allocation info for local variables in function 'waitms'
0147            889   ;------------------------------------------------------------
0147            890   ;ms                        Allocated to registers r2 r3 
0147            891   ;j                         Allocated to registers r4 r5 
0147            892   ;k                         Allocated to registers r6 
0147            893   ;------------------------------------------------------------
0147            894   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:227: void waitms(unsigned int ms) {
0147            895   ;        -----------------------------------------
0147            896   ;         function waitms
0147            897   ;        -----------------------------------------
0147            898   _waitms:
0147 AA82       899            mov     r2,dpl
0149 AB83       900            mov     r3,dph
014B            901   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:230: for (j=0; j<ms; j++)
014B 7C00       902            mov     r4,#0x00
014D 7D00       903            mov     r5,#0x00
014F            904   L008005?:
014F C3         905            clr     c
0150 EC         906            mov     a,r4
0151 9A         907            subb    a,r2
0152 ED         908            mov     a,r5
0153 9B         909            subb    a,r3
0154 5000       910            jnc     L008009?
0156            911   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:231: for (k=0; k<4; k++) Timer3us(250);
0156 7E00       912            mov     r6,#0x00
0158            913   L008001?:
0158 BE0410     914            cjne    r6,#0x04,L008018?
015B            915   L008018?:
015B 5000       916            jnc     L008007?
015D 7582FA     917            mov     dpl,#0xFA
0160 C002       918            push    ar2
0162 C003       919            push    ar3
0164 C004       920            push    ar4
0166 C005       921            push    ar5
0168 C006       922            push    ar6
016A 120000     923            lcall   _Timer3us
016D D006       924            pop     ar6
016F D005       925            pop     ar5
0171 D004       926            pop     ar4
0173 D003       927            pop     ar3
0175 D002       928            pop     ar2
0177 0E         929            inc     r6
0178 8000       930            sjmp    L008001?
017A            931   L008007?:
017A            932   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:230: for (j=0; j<ms; j++)
017A 0C         933            inc     r4
017B BC0050     934            cjne    r4,#0x00,L008005?
017E 0D         935            inc     r5
017F 8000       936            sjmp    L008005?
0181            937   L008009?:
0181 22         938            ret
0182            939   ;------------------------------------------------------------
0182            940   ;Allocation info for local variables in function 'TIMER0_Init'
0182            941   ;------------------------------------------------------------
0182            942   ;------------------------------------------------------------
0182            943   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:234: void TIMER0_Init(void) {
0182            944   ;        -----------------------------------------
0182            945   ;         function TIMER0_Init
0182            946   ;        -----------------------------------------
0182            947   _TIMER0_Init:
0182            948   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:235: TMOD &= 0b_1111_0000; // Set the Bits of Timer/Counter 0 to 0
0182 5389F0     949            anl     _TMOD,#0xF0
0185            950   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:236: TMOD |= 0b_0000_0001; // Timer/Counter 0 Used As 16-Bit Timer
0185 438901     951            orl     _TMOD,#0x01
0188            952   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:237: TR0 = 0; // Stop Timer/Counter 0
0188 C28C       953            clr     _TR0
018A 22         954            ret
018B            955   ;------------------------------------------------------------
018B            956   ;Allocation info for local variables in function 'Serial_Init'
018B            957   ;------------------------------------------------------------
018B            958   ;------------------------------------------------------------
018B            959   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:240: void Serial_Init(void) {
018B            960   ;        -----------------------------------------
018B            961   ;         function Serial_Init
018B            962   ;        -----------------------------------------
018B            963   _Serial_Init:
018B            964   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:241: waitms(500); // Give Putty a chance to start.
018B 9001F4     965            mov     dptr,#0x01F4
018E 120000     966            lcall   _waitms
0191            967   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:242: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0191 7490       968            mov     a,#__str_0
0193 C0E0       969            push    acc
0195 74C1       970            mov     a,#(__str_0 >> 8)
0197 C0E0       971            push    acc
0199 7480       972            mov     a,#0x80
019B C0E0       973            push    acc
019D 120000     974            lcall   _printf
01A0 1581       975            dec     sp
01A2 1581       976            dec     sp
01A4 1581       977            dec     sp
01A6 22         978            ret
01A7            979   ;------------------------------------------------------------
01A7            980   ;Allocation info for local variables in function 'LCD_pulse'
01A7            981   ;------------------------------------------------------------
01A7            982   ;------------------------------------------------------------
01A7            983   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:245: void LCD_pulse(void) {
01A7            984   ;        -----------------------------------------
01A7            985   ;         function LCD_pulse
01A7            986   ;        -----------------------------------------
01A7            987   _LCD_pulse:
01A7            988   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:246: LCD_E = 1; // Pulse the Enable Pin
01A7 D2A0       989            setb    _P2_0
01A9            990   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:247: Timer3us(40); // Wait for 40us
01A9 758228     991            mov     dpl,#0x28
01AC 120000     992            lcall   _Timer3us
01AF            993   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:248: LCD_E = 0; // Pulse the Enable Pin
01AF C2A0       994            clr     _P2_0
01B1 22         995            ret
01B2            996   ;------------------------------------------------------------
01B2            997   ;Allocation info for local variables in function 'LCD_byte'
01B2            998   ;------------------------------------------------------------
01B2            999   ;x                         Allocated to registers r2 
01B2           1000   ;------------------------------------------------------------
01B2           1001   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:251: void LCD_byte(unsigned char x) {
01B2           1002   ;        -----------------------------------------
01B2           1003   ;         function LCD_byte
01B2           1004   ;        -----------------------------------------
01B2           1005   _LCD_byte:
01B2 AA82      1006            mov     r2,dpl
01B4           1007   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:254: ACC = x; // Send High Nibble
01B4 8AE0      1008            mov     _ACC,r2
01B6           1009   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:255: LCD_D7 = ACC_7;
01B6 A2E7      1010            mov     c,_ACC_7
01B8 9290      1011            mov     _P1_0,c
01BA           1012   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:256: LCD_D6 = ACC_6;
01BA A2E6      1013            mov     c,_ACC_6
01BC 9291      1014            mov     _P1_1,c
01BE           1015   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:257: LCD_D5 = ACC_5;
01BE A2E5      1016            mov     c,_ACC_5
01C0 9292      1017            mov     _P1_2,c
01C2           1018   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:258: LCD_D4 = ACC_4;
01C2 A2E4      1019            mov     c,_ACC_4
01C4 9293      1020            mov     _P1_3,c
01C6           1021   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:259: LCD_pulse();
01C6 C002      1022            push    ar2
01C8 120000    1023            lcall   _LCD_pulse
01CB           1024   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:261: Timer3us(40); // Wait for 40us
01CB 758228    1025            mov     dpl,#0x28
01CE 120000    1026            lcall   _Timer3us
01D1 D002      1027            pop     ar2
01D3           1028   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:263: ACC = x; // Send Low Nibble
01D3 8AE0      1029            mov     _ACC,r2
01D5           1030   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:264: LCD_D7 = ACC_3;
01D5 A2E3      1031            mov     c,_ACC_3
01D7 9290      1032            mov     _P1_0,c
01D9           1033   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:265: LCD_D6 = ACC_2;
01D9 A2E2      1034            mov     c,_ACC_2
01DB 9291      1035            mov     _P1_1,c
01DD           1036   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:266: LCD_D5 = ACC_1;
01DD A2E1      1037            mov     c,_ACC_1
01DF 9292      1038            mov     _P1_2,c
01E1           1039   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:267: LCD_D4 = ACC_0;
01E1 A2E0      1040            mov     c,_ACC_0
01E3 9293      1041            mov     _P1_3,c
01E5           1042   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:268: LCD_pulse();
01E5 020000    1043            ljmp    _LCD_pulse
01E8           1044   ;------------------------------------------------------------
01E8           1045   ;Allocation info for local variables in function 'WriteData'
01E8           1046   ;------------------------------------------------------------
01E8           1047   ;x                         Allocated to registers r2 
01E8           1048   ;------------------------------------------------------------
01E8           1049   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:271: void WriteData(unsigned char x) {
01E8           1050   ;        -----------------------------------------
01E8           1051   ;         function WriteData
01E8           1052   ;        -----------------------------------------
01E8           1053   _WriteData:
01E8 AA82      1054            mov     r2,dpl
01EA           1055   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:272: LCD_RS = 1; // Set LCD to Data Mode
01EA D297      1056            setb    _P1_7
01EC           1057   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:273: LCD_byte(x); // Write the Data
01EC 8A82      1058            mov     dpl,r2
01EE 120000    1059            lcall   _LCD_byte
01F1           1060   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:274: waitms(2); // Wait for 2ms
01F1 900002    1061            mov     dptr,#0x0002
01F4 020000    1062            ljmp    _waitms
01F7           1063   ;------------------------------------------------------------
01F7           1064   ;Allocation info for local variables in function 'WriteCommand'
01F7           1065   ;------------------------------------------------------------
01F7           1066   ;x                         Allocated to registers r2 
01F7           1067   ;------------------------------------------------------------
01F7           1068   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:277: void WriteCommand(unsigned char x) {
01F7           1069   ;        -----------------------------------------
01F7           1070   ;         function WriteCommand
01F7           1071   ;        -----------------------------------------
01F7           1072   _WriteCommand:
01F7 AA82      1073            mov     r2,dpl
01F9           1074   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:278: LCD_RS = 0; // Set LCD to Command Mode
01F9 C297      1075            clr     _P1_7
01FB           1076   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:279: LCD_byte(x); // Write the Command
01FB 8A82      1077            mov     dpl,r2
01FD 120000    1078            lcall   _LCD_byte
0200           1079   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:280: waitms(5); // Wait for 5ms
0200 900005    1080            mov     dptr,#0x0005
0203 020000    1081            ljmp    _waitms
0206           1082   ;------------------------------------------------------------
0206           1083   ;Allocation info for local variables in function 'LCD_4BIT'
0206           1084   ;------------------------------------------------------------
0206           1085   ;------------------------------------------------------------
0206           1086   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:283: void LCD_4BIT(void) {
0206           1087   ;        -----------------------------------------
0206           1088   ;         function LCD_4BIT
0206           1089   ;        -----------------------------------------
0206           1090   _LCD_4BIT:
0206           1091   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:284: LCD_E = 0; // Resting State of LCD Enable Pin is 0.
0206 C2A0      1092            clr     _P2_0
0208           1093   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:285: waitms(20); // Wait for 20ms
0208 900014    1094            mov     dptr,#0x0014
020B 120000    1095            lcall   _waitms
020E           1096   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:288: WriteCommand(0x33); // Change to 8-bit Mode
020E 758233    1097            mov     dpl,#0x33
0211 120000    1098            lcall   _WriteCommand
0214           1099   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:289: WriteCommand(0x33); // Change to 8-bit Mode
0214 758233    1100            mov     dpl,#0x33
0217 120000    1101            lcall   _WriteCommand
021A           1102   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:290: WriteCommand(0x32); // Change to 4-bit Mode
021A 758232    1103            mov     dpl,#0x32
021D 120000    1104            lcall   _WriteCommand
0220           1105   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:293: WriteCommand(0x28); // 4-bit, 2 Line, 5x7 Dots
0220 758228    1106            mov     dpl,#0x28
0223 120000    1107            lcall   _WriteCommand
0226           1108   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:294: WriteCommand(0x0c); // Display On, No Cursor, No Blink
0226 75820C    1109            mov     dpl,#0x0C
0229 120000    1110            lcall   _WriteCommand
022C           1111   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:295: WriteCommand(0x01); // Clear Screen Command (Takes Some Time)
022C 758201    1112            mov     dpl,#0x01
022F 120000    1113            lcall   _WriteCommand
0232           1114   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:296: waitms(20); // Wait 20ms for Clear Screen Command to Finish
0232 900014    1115            mov     dptr,#0x0014
0235 020000    1116            ljmp    _waitms
0238           1117   ;------------------------------------------------------------
0238           1118   ;Allocation info for local variables in function 'LCDprint'
0238           1119   ;------------------------------------------------------------
0238           1120   ;line                      Allocated with name '_LCDprint_PARM_2'
0238           1121   ;string                    Allocated to registers r2 r3 r4 
0238           1122   ;j                         Allocated to registers r5 r6 
0238           1123   ;------------------------------------------------------------
0238           1124   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:299: void LCDprint(char * string, unsigned char line, bit clear) {
0238           1125   ;        -----------------------------------------
0238           1126   ;         function LCDprint
0238           1127   ;        -----------------------------------------
0238           1128   _LCDprint:
0238 AA82      1129            mov     r2,dpl
023A AB83      1130            mov     r3,dph
023C ACF0      1131            mov     r4,b
023E           1132   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:302: WriteCommand(line == 2 ? 0xc0 : 0x80); // Set Cursor
023E 7402      1133            mov     a,#0x02
0240 B5C010    1134            cjne    a,_LCDprint_PARM_2,L016013?
0243 7DC0      1135            mov     r5,#0xC0
0245 8000      1136            sjmp    L016014?
0247           1137   L016013?:
0247 7D80      1138            mov     r5,#0x80
0249           1139   L016014?:
0249 8D82      1140            mov     dpl,r5
024B C002      1141            push    ar2
024D C003      1142            push    ar3
024F C004      1143            push    ar4
0251 120000    1144            lcall   _WriteCommand
0254           1145   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:303: waitms(5); // Wait for 5ms
0254 900005    1146            mov     dptr,#0x0005
0257 120000    1147            lcall   _waitms
025A D004      1148            pop     ar4
025C D003      1149            pop     ar3
025E D002      1150            pop     ar2
0260           1151   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:304: for (j = 0; string[j] != 0; j++) WriteData(string[j]); // Write Message
0260 7D00      1152            mov     r5,#0x00
0262 7E00      1153            mov     r6,#0x00
0264           1154   L016003?:
0264 ED        1155            mov     a,r5
0265 2A        1156            add     a,r2
0266 FF        1157            mov     r7,a
0267 EE        1158            mov     a,r6
0268 3B        1159            addc    a,r3
0269 F8        1160            mov     r0,a
026A 8C01      1161            mov     ar1,r4
026C 8F82      1162            mov     dpl,r7
026E 8883      1163            mov     dph,r0
0270 89F0      1164            mov     b,r1
0272 120000    1165            lcall   __gptrget
0275 FF        1166            mov     r7,a
0276 6000      1167            jz      L016006?
0278 8F82      1168            mov     dpl,r7
027A C002      1169            push    ar2
027C C003      1170            push    ar3
027E C004      1171            push    ar4
0280 C005      1172            push    ar5
0282 C006      1173            push    ar6
0284 120000    1174            lcall   _WriteData
0287 D006      1175            pop     ar6
0289 D005      1176            pop     ar5
028B D004      1177            pop     ar4
028D D003      1178            pop     ar3
028F D002      1179            pop     ar2
0291 0D        1180            inc     r5
0292 BD0090    1181            cjne    r5,#0x00,L016003?
0295 0E        1182            inc     r6
0296 8000      1183            sjmp    L016003?
0298           1184   L016006?:
0298           1185   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:305: if (clear) for (; j < CHARS_PER_LINE; j++) WriteData(' '); // Clear Rest of Line
0298 301050    1186            jnb     _LCDprint_PARM_3,L016011?
029B 8D02      1187            mov     ar2,r5
029D 8E03      1188            mov     ar3,r6
029F           1189   L016007?:
029F C3        1190            clr     c
02A0 EA        1191            mov     a,r2
02A1 9410      1192            subb    a,#0x10
02A3 EB        1193            mov     a,r3
02A4 6480      1194            xrl     a,#0x80
02A6 9480      1195            subb    a,#0x80
02A8 5000      1196            jnc     L016011?
02AA 758220    1197            mov     dpl,#0x20
02AD C002      1198            push    ar2
02AF C003      1199            push    ar3
02B1 120000    1200            lcall   _WriteData
02B4 D003      1201            pop     ar3
02B6 D002      1202            pop     ar2
02B8 0A        1203            inc     r2
02B9 BA0090    1204            cjne    r2,#0x00,L016007?
02BC 0B        1205            inc     r3
02BD 8000      1206            sjmp    L016007?
02BF           1207   L016011?:
02BF 22        1208            ret
02C0           1209   ;------------------------------------------------------------
02C0           1210   ;Allocation info for local variables in function 'write_rx'
02C0           1211   ;------------------------------------------------------------
02C0           1212   ;len                       Allocated with name '_write_rx_PARM_2'
02C0           1213   ;buff                      Allocated with name '_write_rx_buff_1_55'
02C0           1214   ;j                         Allocated with name '_write_rx_sloc0_1_0'
02C0           1215   ;c                         Allocated to registers r3 
02C0           1216   ;sloc0                     Allocated with name '_write_rx_sloc0_1_0'
02C0           1217   ;------------------------------------------------------------
02C0           1218   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:308: int write_rx(char* buff, int len) {
02C0           1219   ;        -----------------------------------------
02C0           1220   ;         function write_rx
02C0           1221   ;        -----------------------------------------
02C0           1222   _write_rx:
02C0 858210    1223            mov     _write_rx_buff_1_55,dpl
02C3 858311    1224            mov     (_write_rx_buff_1_55 + 1),dph
02C6 85F012    1225            mov     (_write_rx_buff_1_55 + 2),b
02C9           1226   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:312: for (j = 0; j < (len-1); j++) {
02C9 E4        1227            clr     a
02CA F560      1228            mov     _write_rx_sloc0_1_0,a
02CC F561      1229            mov     (_write_rx_sloc0_1_0 + 1),a
02CE E550      1230            mov     a,_write_rx_PARM_2
02D0 24FF      1231            add     a,#0xff
02D2 FF        1232            mov     r7,a
02D3 E551      1233            mov     a,(_write_rx_PARM_2 + 1)
02D5 34FF      1234            addc    a,#0xff
02D7 F8        1235            mov     r0,a
02D8 7900      1236            mov     r1,#0x00
02DA 7A00      1237            mov     r2,#0x00
02DC           1238   L017005?:
02DC C3        1239            clr     c
02DD E9        1240            mov     a,r1
02DE 9F        1241            subb    a,r7
02DF EA        1242            mov     a,r2
02E0 6480      1243            xrl     a,#0x80
02E2 88F0      1244            mov     b,r0
02E4 63F080    1245            xrl     b,#0x80
02E7 95F0      1246            subb    a,b
02E9 5000      1247            jnc     L017008?
02EB           1248   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:313: c = getchar();
02EB C002      1249            push    ar2
02ED C007      1250            push    ar7
02EF C000      1251            push    ar0
02F1 C001      1252            push    ar1
02F3 120000    1253            lcall   _getchar
02F6 AB82      1254            mov     r3,dpl
02F8 D001      1255            pop     ar1
02FA D000      1256            pop     ar0
02FC D007      1257            pop     ar7
02FE D002      1258            pop     ar2
0300           1259   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:314: if ( (c == '\n') || (c == '\r') ) {
0300 BB0A90    1260            cjne    r3,#0x0A,L017015?
0303 8000      1261            sjmp    L017001?
0305           1262   L017015?:
0305 BB0D10    1263            cjne    r3,#0x0D,L017002?
0308           1264   L017001?:
0308           1265   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:315: buff[j] = 0;
0308 E560      1266            mov     a,_write_rx_sloc0_1_0
030A 2510      1267            add     a,_write_rx_buff_1_55
030C FC        1268            mov     r4,a
030D E561      1269            mov     a,(_write_rx_sloc0_1_0 + 1)
030F 3511      1270            addc    a,(_write_rx_buff_1_55 + 1)
0311 FD        1271            mov     r5,a
0312 AE12      1272            mov     r6,(_write_rx_buff_1_55 + 2)
0314 8C82      1273            mov     dpl,r4
0316 8D83      1274            mov     dph,r5
0318 8EF0      1275            mov     b,r6
031A E4        1276            clr     a
031B 120000    1277            lcall   __gptrput
031E           1278   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:316: return j;
031E 856082    1279            mov     dpl,_write_rx_sloc0_1_0
0321 856183    1280            mov     dph,(_write_rx_sloc0_1_0 + 1)
0324 22        1281            ret
0325           1282   L017002?:
0325           1283   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:318: buff[j] = c;
0325 E9        1284            mov     a,r1
0326 2510      1285            add     a,_write_rx_buff_1_55
0328 FC        1286            mov     r4,a
0329 EA        1287            mov     a,r2
032A 3511      1288            addc    a,(_write_rx_buff_1_55 + 1)
032C FD        1289            mov     r5,a
032D AE12      1290            mov     r6,(_write_rx_buff_1_55 + 2)
032F 8C82      1291            mov     dpl,r4
0331 8D83      1292            mov     dph,r5
0333 8EF0      1293            mov     b,r6
0335 EB        1294            mov     a,r3
0336 120000    1295            lcall   __gptrput
0339           1296   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:312: for (j = 0; j < (len-1); j++) {
0339 09        1297            inc     r1
033A B90090    1298            cjne    r1,#0x00,L017018?
033D 0A        1299            inc     r2
033E           1300   L017018?:
033E 8960      1301            mov     _write_rx_sloc0_1_0,r1
0340 8A61      1302            mov     (_write_rx_sloc0_1_0 + 1),r2
0342 8000      1303            sjmp    L017005?
0344           1304   L017008?:
0344           1305   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:321: buff[j] = 0;
0344 E560      1306            mov     a,_write_rx_sloc0_1_0
0346 2510      1307            add     a,_write_rx_buff_1_55
0348 FA        1308            mov     r2,a
0349 E561      1309            mov     a,(_write_rx_sloc0_1_0 + 1)
034B 3511      1310            addc    a,(_write_rx_buff_1_55 + 1)
034D FB        1311            mov     r3,a
034E AC12      1312            mov     r4,(_write_rx_buff_1_55 + 2)
0350 8A82      1313            mov     dpl,r2
0352 8B83      1314            mov     dph,r3
0354 8CF0      1315            mov     b,r4
0356 E4        1316            clr     a
0357 120000    1317            lcall   __gptrput
035A           1318   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:322: return len;
035A 855082    1319            mov     dpl,_write_rx_PARM_2
035D 855183    1320            mov     dph,(_write_rx_PARM_2 + 1)
0360 22        1321            ret
0361           1322   ;------------------------------------------------------------
0361           1323   ;Allocation info for local variables in function 'display_rx'
0361           1324   ;------------------------------------------------------------
0361           1325   ;len                       Allocated with name '_display_rx_PARM_2'
0361           1326   ;buff                      Allocated to registers r2 r3 r4 
0361           1327   ;------------------------------------------------------------
0361           1328   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:325: void display_rx(char* buff, int len) {
0361           1329   ;        -----------------------------------------
0361           1330   ;         function display_rx
0361           1331   ;        -----------------------------------------
0361           1332   _display_rx:
0361 AA82      1333            mov     r2,dpl
0363 AB83      1334            mov     r3,dph
0365 ACF0      1335            mov     r4,b
0367           1336   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:326: printf("Type Intended Display in Line 2 (16 Char Max): ");
0367 C002      1337            push    ar2
0369 C003      1338            push    ar3
036B C004      1339            push    ar4
036D 74D0      1340            mov     a,#__str_1
036F C0E0      1341            push    acc
0371 74C5      1342            mov     a,#(__str_1 >> 8)
0373 C0E0      1343            push    acc
0375 7480      1344            mov     a,#0x80
0377 C0E0      1345            push    acc
0379 120000    1346            lcall   _printf
037C 1581      1347            dec     sp
037E 1581      1348            dec     sp
0380 1581      1349            dec     sp
0382 D004      1350            pop     ar4
0384 D003      1351            pop     ar3
0386 D002      1352            pop     ar2
0388           1353   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:327: write_rx(buff, len);
0388 850050    1354            mov     _write_rx_PARM_2,_display_rx_PARM_2
038B 850151    1355            mov     (_write_rx_PARM_2 + 1),(_display_rx_PARM_2 + 1)
038E 8A82      1356            mov     dpl,r2
0390 8B83      1357            mov     dph,r3
0392 8CF0      1358            mov     b,r4
0394 C002      1359            push    ar2
0396 C003      1360            push    ar3
0398 C004      1361            push    ar4
039A 120000    1362            lcall   _write_rx
039D           1363   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:328: printf("\n");
039D 7410      1364            mov     a,#__str_2
039F C0E0      1365            push    acc
03A1 74C6      1366            mov     a,#(__str_2 >> 8)
03A3 C0E0      1367            push    acc
03A5 7480      1368            mov     a,#0x80
03A7 C0E0      1369            push    acc
03A9 120000    1370            lcall   _printf
03AC 1581      1371            dec     sp
03AE 1581      1372            dec     sp
03B0 1581      1373            dec     sp
03B2 D004      1374            pop     ar4
03B4 D003      1375            pop     ar3
03B6 D002      1376            pop     ar2
03B8           1377   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:329: LCDprint(buff, 1, 1);
03B8 75C001    1378            mov     _LCDprint_PARM_2,#0x01
03BB D210      1379            setb    _LCDprint_PARM_3
03BD 8A82      1380            mov     dpl,r2
03BF 8B83      1381            mov     dph,r3
03C1 8CF0      1382            mov     b,r4
03C3 020000    1383            ljmp    _LCDprint
03C6           1384   ;------------------------------------------------------------
03C6           1385   ;Allocation info for local variables in function 'display_period'
03C6           1386   ;------------------------------------------------------------
03C6           1387   ;period                    Allocated to registers r2 r3 r4 r5 
03C6           1388   ;buff                      Allocated with name '_display_period_buff_1_63'
03C6           1389   ;------------------------------------------------------------
03C6           1390   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:332: void display_period(float period) {
03C6           1391   ;        -----------------------------------------
03C6           1392   ;         function display_period
03C6           1393   ;        -----------------------------------------
03C6           1394   _display_period:
03C6 AA82      1395            mov     r2,dpl
03C8 AB83      1396            mov     r3,dph
03CA ACF0      1397            mov     r4,b
03CC FD        1398            mov     r5,a
03CD           1399   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:334: sprintf(buff, "T: %.3f s", period); // Format the Period Value
03CD C002      1400            push    ar2
03CF C003      1401            push    ar3
03D1 C004      1402            push    ar4
03D3 C005      1403            push    ar5
03D5 7450      1404            mov     a,#__str_3
03D7 C0E0      1405            push    acc
03D9 74C6      1406            mov     a,#(__str_3 >> 8)
03DB C0E0      1407            push    acc
03DD 7480      1408            mov     a,#0x80
03DF C0E0      1409            push    acc
03E1 74B0      1410            mov     a,#_display_period_buff_1_63
03E3 C0E0      1411            push    acc
03E5 74B8      1412            mov     a,#(_display_period_buff_1_63 >> 8)
03E7 C0E0      1413            push    acc
03E9 7440      1414            mov     a,#0x40
03EB C0E0      1415            push    acc
03ED 120000    1416            lcall   _sprintf
03F0 E581      1417            mov     a,sp
03F2 24F6      1418            add     a,#0xf6
03F4 F581      1419            mov     sp,a
03F6           1420   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:335: LCDprint(buff, 2, 1); // Write to LCD
03F6 75C002    1421            mov     _LCDprint_PARM_2,#0x02
03F9 D210      1422            setb    _LCDprint_PARM_3
03FB 90B8B0    1423            mov     dptr,#_display_period_buff_1_63
03FE 75F040    1424            mov     b,#0x40
0401 020000    1425            ljmp    _LCDprint
0404           1426   ;------------------------------------------------------------
0404           1427   ;Allocation info for local variables in function 'display_freq_kHz'
0404           1428   ;------------------------------------------------------------
0404           1429   ;freq_kHz                  Allocated to registers r2 r3 r4 r5 
0404           1430   ;buff                      Allocated with name '_display_freq_kHz_buff_1_65'
0404           1431   ;------------------------------------------------------------
0404           1432   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:338: void display_freq_kHz(float freq_kHz) {
0404           1433   ;        -----------------------------------------
0404           1434   ;         function display_freq_kHz
0404           1435   ;        -----------------------------------------
0404           1436   _display_freq_kHz:
0404 AA82      1437            mov     r2,dpl
0406 AB83      1438            mov     r3,dph
0408 ACF0      1439            mov     r4,b
040A FD        1440            mov     r5,a
040B           1441   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:340: sprintf(buff, "F: %.3f kHz", freq_kHz); // Format the Frequency Value
040B C002      1442            push    ar2
040D C003      1443            push    ar3
040F C004      1444            push    ar4
0411 C005      1445            push    ar5
0413 74D0      1446            mov     a,#__str_4
0415 C0E0      1447            push    acc
0417 74C6      1448            mov     a,#(__str_4 >> 8)
0419 C0E0      1449            push    acc
041B 7480      1450            mov     a,#0x80
041D C0E0      1451            push    acc
041F 7400      1452            mov     a,#_display_freq_kHz_buff_1_65
0421 C0E0      1453            push    acc
0423 74B9      1454            mov     a,#(_display_freq_kHz_buff_1_65 >> 8)
0425 C0E0      1455            push    acc
0427 7440      1456            mov     a,#0x40
0429 C0E0      1457            push    acc
042B 120000    1458            lcall   _sprintf
042E E581      1459            mov     a,sp
0430 24F6      1460            add     a,#0xf6
0432 F581      1461            mov     sp,a
0434           1462   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:341: LCDprint(buff, 1, 1); // Write to LCD
0434 75C001    1463            mov     _LCDprint_PARM_2,#0x01
0437 D210      1464            setb    _LCDprint_PARM_3
0439 90B900    1465            mov     dptr,#_display_freq_kHz_buff_1_65
043C 75F040    1466            mov     b,#0x40
043F 020000    1467            ljmp    _LCDprint
0442           1468   ;------------------------------------------------------------
0442           1469   ;Allocation info for local variables in function 'display_capacitance_nF'
0442           1470   ;------------------------------------------------------------
0442           1471   ;capacitance_nF            Allocated to registers r2 r3 r4 r5 
0442           1472   ;buff                      Allocated with name '_display_capacitance_nF_buff_1_67'
0442           1473   ;------------------------------------------------------------
0442           1474   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:344: void display_capacitance_nF(float capacitance_nF) {
0442           1475   ;        -----------------------------------------
0442           1476   ;         function display_capacitance_nF
0442           1477   ;        -----------------------------------------
0442           1478   _display_capacitance_nF:
0442 AA82      1479            mov     r2,dpl
0444 AB83      1480            mov     r3,dph
0446 ACF0      1481            mov     r4,b
0448 FD        1482            mov     r5,a
0449           1483   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:347: sprintf(buff, "C: %.3f nF", capacitance_nF); // Format the Capacitance Value
0449 C002      1484            push    ar2
044B C003      1485            push    ar3
044D C004      1486            push    ar4
044F C005      1487            push    ar5
0451 7410      1488            mov     a,#__str_5
0453 C0E0      1489            push    acc
0455 74C7      1490            mov     a,#(__str_5 >> 8)
0457 C0E0      1491            push    acc
0459 7480      1492            mov     a,#0x80
045B C0E0      1493            push    acc
045D 7460      1494            mov     a,#_display_capacitance_nF_buff_1_67
045F C0E0      1495            push    acc
0461 74B9      1496            mov     a,#(_display_capacitance_nF_buff_1_67 >> 8)
0463 C0E0      1497            push    acc
0465 7440      1498            mov     a,#0x40
0467 C0E0      1499            push    acc
0469 120000    1500            lcall   _sprintf
046C E581      1501            mov     a,sp
046E 24F6      1502            add     a,#0xf6
0470 F581      1503            mov     sp,a
0472           1504   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:348: LCDprint(buff, 2, 1); // Write to LCD
0472 75C002    1505            mov     _LCDprint_PARM_2,#0x02
0475 D210      1506            setb    _LCDprint_PARM_3
0477 90B960    1507            mov     dptr,#_display_capacitance_nF_buff_1_67
047A 75F040    1508            mov     b,#0x40
047D 020000    1509            ljmp    _LCDprint
0480           1510   ;------------------------------------------------------------
0480           1511   ;Allocation info for local variables in function 'calculate_period_s'
0480           1512   ;------------------------------------------------------------
0480           1513   ;TH0                       Allocated with name '_calculate_period_s_PARM_2'
0480           1514   ;TL0                       Allocated with name '_calculate_period_s_PARM_3'
0480           1515   ;overflow_count            Allocated to registers r2 r3 
0480           1516   ;------------------------------------------------------------
0480           1517   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:351: float calculate_period_s(int overflow_count, int TH0, int TL0) {
0480           1518   ;        -----------------------------------------
0480           1519   ;         function calculate_period_s
0480           1520   ;        -----------------------------------------
0480           1521   _calculate_period_s:
0480           1522   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:352: return ((overflow_count * MAX_16_BIT)  + (TH0 * MAX_8_BIT) + TL0) * (12.0 / SYSCLK);
0480 120000    1523            lcall   ___sint2fs
0483 AA82      1524            mov     r2,dpl
0485 AB83      1525            mov     r3,dph
0487 ACF0      1526            mov     r4,b
0489 FD        1527            mov     r5,a
048A C002      1528            push    ar2
048C C003      1529            push    ar3
048E C004      1530            push    ar4
0490 C005      1531            push    ar5
0492 900000    1532            mov     dptr,#0x0000
0495 75F080    1533            mov     b,#0x80
0498 7447      1534            mov     a,#0x47
049A 120000    1535            lcall   ___fsmul
049D AA82      1536            mov     r2,dpl
049F AB83      1537            mov     r3,dph
04A1 ACF0      1538            mov     r4,b
04A3 FD        1539            mov     r5,a
04A4 E581      1540            mov     a,sp
04A6 24FC      1541            add     a,#0xfc
04A8 F581      1542            mov     sp,a
04AA 85B082    1543            mov     dpl,_calculate_period_s_PARM_2
04AD 85B183    1544            mov     dph,(_calculate_period_s_PARM_2 + 1)
04B0 C002      1545            push    ar2
04B2 C003      1546            push    ar3
04B4 C004      1547            push    ar4
04B6 C005      1548            push    ar5
04B8 120000    1549            lcall   ___sint2fs
04BB AE82      1550            mov     r6,dpl
04BD AF83      1551            mov     r7,dph
04BF A8F0      1552            mov     r0,b
04C1 F9        1553            mov     r1,a
04C2 C006      1554            push    ar6
04C4 C007      1555            push    ar7
04C6 C000      1556            push    ar0
04C8 C001      1557            push    ar1
04CA 900000    1558            mov     dptr,#0x0000
04CD 75F080    1559            mov     b,#0x80
04D0 7443      1560            mov     a,#0x43
04D2 120000    1561            lcall   ___fsmul
04D5 AE82      1562            mov     r6,dpl
04D7 AF83      1563            mov     r7,dph
04D9 A8F0      1564            mov     r0,b
04DB F9        1565            mov     r1,a
04DC E581      1566            mov     a,sp
04DE 24FC      1567            add     a,#0xfc
04E0 F581      1568            mov     sp,a
04E2 D005      1569            pop     ar5
04E4 D004      1570            pop     ar4
04E6 D003      1571            pop     ar3
04E8 D002      1572            pop     ar2
04EA C006      1573            push    ar6
04EC C007      1574            push    ar7
04EE C000      1575            push    ar0
04F0 C001      1576            push    ar1
04F2 8A82      1577            mov     dpl,r2
04F4 8B83      1578            mov     dph,r3
04F6 8CF0      1579            mov     b,r4
04F8 ED        1580            mov     a,r5
04F9 120000    1581            lcall   ___fsadd
04FC AA82      1582            mov     r2,dpl
04FE AB83      1583            mov     r3,dph
0500 ACF0      1584            mov     r4,b
0502 FD        1585            mov     r5,a
0503 E581      1586            mov     a,sp
0505 24FC      1587            add     a,#0xfc
0507 F581      1588            mov     sp,a
0509 856082    1589            mov     dpl,_calculate_period_s_PARM_3
050C 856183    1590            mov     dph,(_calculate_period_s_PARM_3 + 1)
050F C002      1591            push    ar2
0511 C003      1592            push    ar3
0513 C004      1593            push    ar4
0515 C005      1594            push    ar5
0517 120000    1595            lcall   ___sint2fs
051A AE82      1596            mov     r6,dpl
051C AF83      1597            mov     r7,dph
051E A8F0      1598            mov     r0,b
0520 F9        1599            mov     r1,a
0521 D005      1600            pop     ar5
0523 D004      1601            pop     ar4
0525 D003      1602            pop     ar3
0527 D002      1603            pop     ar2
0529 C006      1604            push    ar6
052B C007      1605            push    ar7
052D C000      1606            push    ar0
052F C001      1607            push    ar1
0531 8A82      1608            mov     dpl,r2
0533 8B83      1609            mov     dph,r3
0535 8CF0      1610            mov     b,r4
0537 ED        1611            mov     a,r5
0538 120000    1612            lcall   ___fsadd
053B AA82      1613            mov     r2,dpl
053D AB83      1614            mov     r3,dph
053F ACF0      1615            mov     r4,b
0541 FD        1616            mov     r5,a
0542 E581      1617            mov     a,sp
0544 24FC      1618            add     a,#0xfc
0546 F581      1619            mov     sp,a
0548 C002      1620            push    ar2
054A C003      1621            push    ar3
054C C004      1622            push    ar4
054E C005      1623            push    ar5
0550 90F4FC    1624            mov     dptr,#0xF4FC
0553 75F032    1625            mov     b,#0x32
0556 7434      1626            mov     a,#0x34
0558 120000    1627            lcall   ___fsmul
055B AA82      1628            mov     r2,dpl
055D AB83      1629            mov     r3,dph
055F ACF0      1630            mov     r4,b
0561 FD        1631            mov     r5,a
0562 E581      1632            mov     a,sp
0564 24FC      1633            add     a,#0xfc
0566 F581      1634            mov     sp,a
0568 8A82      1635            mov     dpl,r2
056A 8B83      1636            mov     dph,r3
056C 8CF0      1637            mov     b,r4
056E ED        1638            mov     a,r5
056F 22        1639            ret
0570           1640   ;------------------------------------------------------------
0570           1641   ;Allocation info for local variables in function 'calculate_freq_Hz'
0570           1642   ;------------------------------------------------------------
0570           1643   ;period_s                  Allocated to registers r2 r3 r4 r5 
0570           1644   ;------------------------------------------------------------
0570           1645   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:355: float calculate_freq_Hz(float period_s) {
0570           1646   ;        -----------------------------------------
0570           1647   ;         function calculate_freq_Hz
0570           1648   ;        -----------------------------------------
0570           1649   _calculate_freq_Hz:
0570 AA82      1650            mov     r2,dpl
0572 AB83      1651            mov     r3,dph
0574 ACF0      1652            mov     r4,b
0576 FD        1653            mov     r5,a
0577           1654   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:356: return (1.0 / period_s);
0577 C002      1655            push    ar2
0579 C003      1656            push    ar3
057B C004      1657            push    ar4
057D C005      1658            push    ar5
057F 900000    1659            mov     dptr,#0x0000
0582 75F080    1660            mov     b,#0x80
0585 743F      1661            mov     a,#0x3F
0587 120000    1662            lcall   ___fsdiv
058A AA82      1663            mov     r2,dpl
058C AB83      1664            mov     r3,dph
058E ACF0      1665            mov     r4,b
0590 FD        1666            mov     r5,a
0591 E581      1667            mov     a,sp
0593 24FC      1668            add     a,#0xfc
0595 F581      1669            mov     sp,a
0597 8A82      1670            mov     dpl,r2
0599 8B83      1671            mov     dph,r3
059B 8CF0      1672            mov     b,r4
059D ED        1673            mov     a,r5
059E 22        1674            ret
059F           1675   ;------------------------------------------------------------
059F           1676   ;Allocation info for local variables in function 'calculate_capacitance_nF'
059F           1677   ;------------------------------------------------------------
059F           1678   ;period_s                  Allocated to registers r2 r3 r4 r5 
059F           1679   ;------------------------------------------------------------
059F           1680   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:359: float calculate_capacitance_nF(float period_s) {
059F           1681   ;        -----------------------------------------
059F           1682   ;         function calculate_capacitance_nF
059F           1683   ;        -----------------------------------------
059F           1684   _calculate_capacitance_nF:
059F AA82      1685            mov     r2,dpl
05A1 AB83      1686            mov     r3,dph
05A3 ACF0      1687            mov     r4,b
05A5 FD        1688            mov     r5,a
05A6           1689   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:360: return (1.44 * period_s / (R_A + 2 * R_B)) * GIGA_MULTIPLIER; // Convert to Nanofarads
05A6 C002      1690            push    ar2
05A8 C003      1691            push    ar3
05AA C004      1692            push    ar4
05AC C005      1693            push    ar5
05AE 9051EC    1694            mov     dptr,#0x51EC
05B1 75F0B8    1695            mov     b,#0xB8
05B4 743F      1696            mov     a,#0x3F
05B6 120000    1697            lcall   ___fsmul
05B9 AA82      1698            mov     r2,dpl
05BB AB83      1699            mov     r3,dph
05BD ACF0      1700            mov     r4,b
05BF FD        1701            mov     r5,a
05C0 E581      1702            mov     a,sp
05C2 24FC      1703            add     a,#0xfc
05C4 F581      1704            mov     sp,a
05C6 E4        1705            clr     a
05C7 C0E0      1706            push    acc
05C9 74A0      1707            mov     a,#0xA0
05CB C0E0      1708            push    acc
05CD 748C      1709            mov     a,#0x8C
05CF C0E0      1710            push    acc
05D1 7445      1711            mov     a,#0x45
05D3 C0E0      1712            push    acc
05D5 8A82      1713            mov     dpl,r2
05D7 8B83      1714            mov     dph,r3
05D9 8CF0      1715            mov     b,r4
05DB ED        1716            mov     a,r5
05DC 120000    1717            lcall   ___fsdiv
05DF AA82      1718            mov     r2,dpl
05E1 AB83      1719            mov     r3,dph
05E3 ACF0      1720            mov     r4,b
05E5 FD        1721            mov     r5,a
05E6 E581      1722            mov     a,sp
05E8 24FC      1723            add     a,#0xfc
05EA F581      1724            mov     sp,a
05EC C002      1725            push    ar2
05EE C003      1726            push    ar3
05F0 C004      1727            push    ar4
05F2 C005      1728            push    ar5
05F4 906B28    1729            mov     dptr,#0x6B28
05F7 75F06E    1730            mov     b,#0x6E
05FA 744E      1731            mov     a,#0x4E
05FC 120000    1732            lcall   ___fsmul
05FF AA82      1733            mov     r2,dpl
0601 AB83      1734            mov     r3,dph
0603 ACF0      1735            mov     r4,b
0605 FD        1736            mov     r5,a
0606 E581      1737            mov     a,sp
0608 24FC      1738            add     a,#0xfc
060A F581      1739            mov     sp,a
060C 8A82      1740            mov     dpl,r2
060E 8B83      1741            mov     dph,r3
0610 8CF0      1742            mov     b,r4
0612 ED        1743            mov     a,r5
0613 22        1744            ret
0614           1745   ;------------------------------------------------------------
0614           1746   ;Allocation info for local variables in function 'main'
0614           1747   ;------------------------------------------------------------
0614           1748   ;v_led                     Allocated with name '_main_v_led_1_75'
0614           1749   ;v_r                       Allocated to registers r0 r1 r4 r5 
0614           1750   ;period_s                  Allocated to registers r4 r5 r6 r7 
0614           1751   ;freq_Hz                   Allocated to registers r0 r1 r2 r3 
0614           1752   ;capacitance_nF            Allocated with name '_main_capacitance_nF_1_75'
0614           1753   ;success_count             Allocated with name '_main_success_count_1_75'
0614           1754   ;------------------------------------------------------------
0614           1755   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:376: void main(void) {
0614           1756   ;        -----------------------------------------
0614           1757   ;         function main
0614           1758   ;        -----------------------------------------
0614           1759   _main:
0614           1760   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:379: int success_count = 0;
0614 E4        1761            clr     a
0615 F550      1762            mov     _main_success_count_1_75,a
0617 F551      1763            mov     (_main_success_count_1_75 + 1),a
0619           1764   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:382: TIMER0_Init(); // Initialize Timer 0
0619 120000    1765            lcall   _TIMER0_Init
061C           1766   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:383: Serial_Init(); // Initialize Serial Communication
061C 120000    1767            lcall   _Serial_Init
061F           1768   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:384: LCD_4BIT();     // Configure the LCD
061F 120000    1769            lcall   _LCD_4BIT
0622           1770   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:387: InitPinADC(0, 1); // Configure P0.1 as Analog Input
0622 756001    1771            mov     _InitPinADC_PARM_2,#0x01
0625 758200    1772            mov     dpl,#0x00
0628 120000    1773            lcall   _InitPinADC
062B           1774   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:388: InitPinADC(2, 1); // Configure P2.1 as Analog Input
062B 756001    1775            mov     _InitPinADC_PARM_2,#0x01
062E 758202    1776            mov     dpl,#0x02
0631 120000    1777            lcall   _InitPinADC
0634           1778   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:389: InitADC();
0634 120000    1779            lcall   _InitADC
0637           1780   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:391: while(1) {
0637           1781   L025029?:
0637           1782   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:393: v_led = Volts_at_Pin(QFP32_MUX_P0_1); // Measure the Voltage at the LED
0637 758200    1783            mov     dpl,#0x00
063A 120000    1784            lcall   _Volts_at_Pin
063D 8582B0    1785            mov     _main_v_led_1_75,dpl
0640 8583B1    1786            mov     (_main_v_led_1_75 + 1),dph
0643 85F0B2    1787            mov     (_main_v_led_1_75 + 2),b
0646 F5B3      1788            mov     (_main_v_led_1_75 + 3),a
0648           1789   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:394: v_r = Volts_at_Pin(QFP32_MUX_P0_2); // Measure the Voltage at the Resistor
0648 758201    1790            mov     dpl,#0x01
064B 120000    1791            lcall   _Volts_at_Pin
064E A882      1792            mov     r0,dpl
0650 A983      1793            mov     r1,dph
0652 ACF0      1794            mov     r4,b
0654 FD        1795            mov     r5,a
0655           1796   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:397: printf("V_LED = %f\r\n", v_led); // Print Voltage at the LED
0655 C004      1797            push    ar4
0657 C005      1798            push    ar5
0659 C000      1799            push    ar0
065B C001      1800            push    ar1
065D C0B0      1801            push    _main_v_led_1_75
065F C0B1      1802            push    (_main_v_led_1_75 + 1)
0661 C0B2      1803            push    (_main_v_led_1_75 + 2)
0663 C0B3      1804            push    (_main_v_led_1_75 + 3)
0665 7410      1805            mov     a,#__str_6
0667 C0E0      1806            push    acc
0669 74C8      1807            mov     a,#(__str_6 >> 8)
066B C0E0      1808            push    acc
066D 7480      1809            mov     a,#0x80
066F C0E0      1810            push    acc
0671 120000    1811            lcall   _printf
0674 E581      1812            mov     a,sp
0676 24F9      1813            add     a,#0xf9
0678 F581      1814            mov     sp,a
067A D001      1815            pop     ar1
067C D000      1816            pop     ar0
067E D005      1817            pop     ar5
0680 D004      1818            pop     ar4
0682           1819   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:398: printf("V_R = %f\r\n", v_r); // Print Voltage at the Resistor
0682 C000      1820            push    ar0
0684 C001      1821            push    ar1
0686 C004      1822            push    ar4
0688 C005      1823            push    ar5
068A 7450      1824            mov     a,#__str_7
068C C0E0      1825            push    acc
068E 74C8      1826            mov     a,#(__str_7 >> 8)
0690 C0E0      1827            push    acc
0692 7480      1828            mov     a,#0x80
0694 C0E0      1829            push    acc
0696 120000    1830            lcall   _printf
0699 E581      1831            mov     a,sp
069B 24F9      1832            add     a,#0xf9
069D F581      1833            mov     sp,a
069F           1834   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:401: TL0 = 0;
069F 758A00    1835            mov     _TL0,#0x00
06A2           1836   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:402: TH0 = 0;
06A2 758C00    1837            mov     _TH0,#0x00
06A5           1838   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:403: TF0 = 0;
06A5 C28D      1839            clr     _TF0
06A7           1840   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:404: overflow_count = 0;
06A7 750000    1841            mov     _overflow_count,#0x00
06AA           1842   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:406: while (EFM8_SIGNAL != 0); // Wait for Signal == 0
06AA           1843   L025001?:
06AA 20B390    1844            jb      _P3_3,L025001?
06AD           1845   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:407: while (EFM8_SIGNAL != 1); // Wait for Signal == 1
06AD           1846   L025004?:
06AD 30B3D0    1847            jnb     _P3_3,L025004?
06B0           1848   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:409: TR0 = 1; // Start Timer
06B0 D28C      1849            setb    _TR0
06B2           1850   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:411: while (EFM8_SIGNAL != 0) { // Wait for Signal == 0
06B2           1851   L025009?:
06B2 30B350    1852            jnb     _P3_3,L025014?
06B5           1853   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:412: if (TF0 == 1) { // Did 16-Bit Timer Overflow?
06B5           1854   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:413: TF0 = 0;
06B5 108D90    1855            jbc     _TF0,L025050?
06B8 8000      1856            sjmp    L025009?
06BA           1857   L025050?:
06BA           1858   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:414: overflow_count++;
06BA 0500      1859            inc     _overflow_count
06BC           1860   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:417: while (EFM8_SIGNAL != 1) { // Wait for Signal == 1
06BC 8000      1861            sjmp    L025009?
06BE           1862   L025014?:
06BE 20B3D0    1863            jb      _P3_3,L025016?
06C1           1864   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:418: if (TF0 == 1) { // Did 16-Bit Timer Overflow?
06C1           1865   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:419: TF0 = 0;
06C1 108D10    1866            jbc     _TF0,L025052?
06C4 8000      1867            sjmp    L025014?
06C6           1868   L025052?:
06C6           1869   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:420: overflow_count++;
06C6 0500      1870            inc     _overflow_count
06C8 8000      1871            sjmp    L025014?
06CA           1872   L025016?:
06CA           1873   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:424: TR0 = 0; // Stop Timer 0. The 24-bit number [overflow_count-TH0-TL0] has the period!
06CA C28C      1874            clr     _TR0
06CC           1875   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:425: period_s = calculate_period_s(overflow_count, TH0, TL0);
06CC AC00      1876            mov     r4,_overflow_count
06CE 7D00      1877            mov     r5,#0x00
06D0 858CB0    1878            mov     _calculate_period_s_PARM_2,_TH0
06D3 75B100    1879            mov     (_calculate_period_s_PARM_2 + 1),#0x00
06D6 858A60    1880            mov     _calculate_period_s_PARM_3,_TL0
06D9 756100    1881            mov     (_calculate_period_s_PARM_3 + 1),#0x00
06DC 8C82      1882            mov     dpl,r4
06DE 8D83      1883            mov     dph,r5
06E0 120000    1884            lcall   _calculate_period_s
06E3           1885   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:426: freq_Hz = calculate_freq_Hz(period_s);
06E3 AC82      1886            mov     r4,dpl
06E5 AD83      1887            mov     r5,dph
06E7 AEF0      1888            mov     r6,b
06E9 FF        1889            mov     r7,a
06EA C004      1890            push    ar4
06EC C005      1891            push    ar5
06EE C006      1892            push    ar6
06F0 C007      1893            push    ar7
06F2 120000    1894            lcall   _calculate_freq_Hz
06F5 A882      1895            mov     r0,dpl
06F7 A983      1896            mov     r1,dph
06F9 AAF0      1897            mov     r2,b
06FB FB        1898            mov     r3,a
06FC D007      1899            pop     ar7
06FE D006      1900            pop     ar6
0700 D005      1901            pop     ar5
0702 D004      1902            pop     ar4
0704           1903   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:427: capacitance_nF = calculate_capacitance_nF(period_s);
0704 8C82      1904            mov     dpl,r4
0706 8D83      1905            mov     dph,r5
0708 8EF0      1906            mov     b,r6
070A EF        1907            mov     a,r7
070B C002      1908            push    ar2
070D C003      1909            push    ar3
070F C000      1910            push    ar0
0711 C001      1911            push    ar1
0713 120000    1912            lcall   _calculate_capacitance_nF
0716 858200    1913            mov     _main_capacitance_nF_1_75,dpl
0719 858301    1914            mov     (_main_capacitance_nF_1_75 + 1),dph
071C 85F002    1915            mov     (_main_capacitance_nF_1_75 + 2),b
071F F503      1916            mov     (_main_capacitance_nF_1_75 + 3),a
0721 D001      1917            pop     ar1
0723 D000      1918            pop     ar0
0725 D003      1919            pop     ar3
0727 D002      1920            pop     ar2
0729           1921   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:435: if ((freq_Hz <= MIN_FREQ_HZ) || (freq_Hz >= MAX_FREQ_HZ)) {
0729 C002      1922            push    ar2
072B C003      1923            push    ar3
072D C000      1924            push    ar0
072F C001      1925            push    ar1
0731 E4        1926            clr     a
0732 C0E0      1927            push    acc
0734 C0E0      1928            push    acc
0736 7448      1929            mov     a,#0x48
0738 C0E0      1930            push    acc
073A 7443      1931            mov     a,#0x43
073C C0E0      1932            push    acc
073E 8882      1933            mov     dpl,r0
0740 8983      1934            mov     dph,r1
0742 8AF0      1935            mov     b,r2
0744 EB        1936            mov     a,r3
0745 120000    1937            lcall   ___fsgt
0748 AC82      1938            mov     r4,dpl
074A E581      1939            mov     a,sp
074C 24FC      1940            add     a,#0xfc
074E F581      1941            mov     sp,a
0750 D001      1942            pop     ar1
0752 D000      1943            pop     ar0
0754 D003      1944            pop     ar3
0756 D002      1945            pop     ar2
0758 EC        1946            mov     a,r4
0759 6000      1947            jz      L025022?
075B C002      1948            push    ar2
075D C003      1949            push    ar3
075F C004      1950            push    ar4
0761 C000      1951            push    ar0
0763 C001      1952            push    ar1
0765 E4        1953            clr     a
0766 C0E0      1954            push    acc
0768 7450      1955            mov     a,#0x50
076A C0E0      1956            push    acc
076C 74C3      1957            mov     a,#0xC3
076E C0E0      1958            push    acc
0770 7448      1959            mov     a,#0x48
0772 C0E0      1960            push    acc
0774 8882      1961            mov     dpl,r0
0776 8983      1962            mov     dph,r1
0778 8AF0      1963            mov     b,r2
077A EB        1964            mov     a,r3
077B 120000    1965            lcall   ___fslt
077E AD82      1966            mov     r5,dpl
0780 E581      1967            mov     a,sp
0782 24FC      1968            add     a,#0xfc
0784 F581      1969            mov     sp,a
0786 D001      1970            pop     ar1
0788 D000      1971            pop     ar0
078A D004      1972            pop     ar4
078C D003      1973            pop     ar3
078E D002      1974            pop     ar2
0790 ED        1975            mov     a,r5
0791 6000      1976            jz      L025054?
0793 020000    1977            ljmp    L025023?
0796           1978   L025054?:
0796           1979   L025022?:
0796           1980   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:436: success_count = 0;
0796 E4        1981            clr     a
0797 F550      1982            mov     _main_success_count_1_75,a
0799 F551      1983            mov     (_main_success_count_1_75 + 1),a
079B           1984   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:438: if (freq_Hz >= MAX_FREQ_HZ) LCDprint("ERROR : LOW C", 1, 1);
079B C002      1985            push    ar2
079D C003      1986            push    ar3
079F C004      1987            push    ar4
07A1 C000      1988            push    ar0
07A3 C001      1989            push    ar1
07A5 E4        1990            clr     a
07A6 C0E0      1991            push    acc
07A8 7450      1992            mov     a,#0x50
07AA C0E0      1993            push    acc
07AC 74C3      1994            mov     a,#0xC3
07AE C0E0      1995            push    acc
07B0 7448      1996            mov     a,#0x48
07B2 C0E0      1997            push    acc
07B4 8882      1998            mov     dpl,r0
07B6 8983      1999            mov     dph,r1
07B8 8AF0      2000            mov     b,r2
07BA EB        2001            mov     a,r3
07BB 120000    2002            lcall   ___fslt
07BE AD82      2003            mov     r5,dpl
07C0 E581      2004            mov     a,sp
07C2 24FC      2005            add     a,#0xfc
07C4 F581      2006            mov     sp,a
07C6 D001      2007            pop     ar1
07C8 D000      2008            pop     ar0
07CA D004      2009            pop     ar4
07CC D003      2010            pop     ar3
07CE D002      2011            pop     ar2
07D0 ED        2012            mov     a,r5
07D1 7000      2013            jnz     L025020?
07D3 75C001    2014            mov     _LCDprint_PARM_2,#0x01
07D6 D210      2015            setb    _LCDprint_PARM_3
07D8 90CBD0    2016            mov     dptr,#__str_8
07DB 75F080    2017            mov     b,#0x80
07DE C002      2018            push    ar2
07E0 C003      2019            push    ar3
07E2 C000      2020            push    ar0
07E4 C001      2021            push    ar1
07E6 120000    2022            lcall   _LCDprint
07E9 D001      2023            pop     ar1
07EB D000      2024            pop     ar0
07ED D003      2025            pop     ar3
07EF D002      2026            pop     ar2
07F1 8000      2027            sjmp    L025021?
07F3           2028   L025020?:
07F3           2029   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:439: else if (freq_Hz <= MIN_FREQ_HZ) LCDprint("ERROR : HIGH C", 1, 1);
07F3 EC        2030            mov     a,r4
07F4 7000      2031            jnz     L025021?
07F6 75C001    2032            mov     _LCDprint_PARM_2,#0x01
07F9 D210      2033            setb    _LCDprint_PARM_3
07FB 90CC50    2034            mov     dptr,#__str_9
07FE 75F080    2035            mov     b,#0x80
0801 C002      2036            push    ar2
0803 C003      2037            push    ar3
0805 C000      2038            push    ar0
0807 C001      2039            push    ar1
0809 120000    2040            lcall   _LCDprint
080C D001      2041            pop     ar1
080E D000      2042            pop     ar0
0810 D003      2043            pop     ar3
0812 D002      2044            pop     ar2
0814           2045   L025021?:
0814           2046   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:441: LCDprint("                ", 2, 1);
0814 75C002    2047            mov     _LCDprint_PARM_2,#0x02
0817 D210      2048            setb    _LCDprint_PARM_3
0819 90CC90    2049            mov     dptr,#__str_10
081C 75F080    2050            mov     b,#0x80
081F C002      2051            push    ar2
0821 C003      2052            push    ar3
0823 C000      2053            push    ar0
0825 C001      2054            push    ar1
0827 120000    2055            lcall   _LCDprint
082A           2056   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:442: waitms(250); // Wait for 250 ms
082A 9000FA    2057            mov     dptr,#0x00FA
082D 120000    2058            lcall   _waitms
0830 D001      2059            pop     ar1
0832 D000      2060            pop     ar0
0834 D003      2061            pop     ar3
0836 D002      2062            pop     ar2
0838 8000      2063            sjmp    L025024?
083A           2064   L025023?:
083A           2065   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:444: success_count += 1;
083A 0550      2066            inc     _main_success_count_1_75
083C E4        2067            clr     a
083D B55010    2068            cjne    a,_main_success_count_1_75,L025057?
0840 0551      2069            inc     (_main_success_count_1_75 + 1)
0842           2070   L025057?:
0842           2071   L025024?:
0842           2072   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:447: if (success_count >= SUCCESS_THRESHOLD) {
0842 C3        2073            clr     c
0843 E550      2074            mov     a,_main_success_count_1_75
0845 9403      2075            subb    a,#0x03
0847 E551      2076            mov     a,(_main_success_count_1_75 + 1)
0849 6480      2077            xrl     a,#0x80
084B 9480      2078            subb    a,#0x80
084D 5000      2079            jnc     L025058?
084F 020000    2080            ljmp    L025029?
0852           2081   L025058?:
0852           2082   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:448: waitms(250); // Wait for 250 ms
0852 9000FA    2083            mov     dptr,#0x00FA
0855 C002      2084            push    ar2
0857 C003      2085            push    ar3
0859 C000      2086            push    ar0
085B C001      2087            push    ar1
085D 120000    2088            lcall   _waitms
0860 D001      2089            pop     ar1
0862 D000      2090            pop     ar0
0864 D003      2091            pop     ar3
0866 D002      2092            pop     ar2
0868           2093   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:449: printf("\nF(kHz) = %f\r\n", freq_Hz / KILO_MULTIPLIER); // Print Frequency to Serial Port
0868 E4        2094            clr     a
0869 C0E0      2095            push    acc
086B C0E0      2096            push    acc
086D 747A      2097            mov     a,#0x7A
086F C0E0      2098            push    acc
0871 7444      2099            mov     a,#0x44
0873 C0E0      2100            push    acc
0875 8882      2101            mov     dpl,r0
0877 8983      2102            mov     dph,r1
0879 8AF0      2103            mov     b,r2
087B EB        2104            mov     a,r3
087C 120000    2105            lcall   ___fsdiv
087F AA82      2106            mov     r2,dpl
0881 AB83      2107            mov     r3,dph
0883 ACF0      2108            mov     r4,b
0885 FD        2109            mov     r5,a
0886 E581      2110            mov     a,sp
0888 24FC      2111            add     a,#0xfc
088A F581      2112            mov     sp,a
088C C002      2113            push    ar2
088E C003      2114            push    ar3
0890 C004      2115            push    ar4
0892 C005      2116            push    ar5
0894 C002      2117            push    ar2
0896 C003      2118            push    ar3
0898 C004      2119            push    ar4
089A C005      2120            push    ar5
089C 7490      2121            mov     a,#__str_11
089E C0E0      2122            push    acc
08A0 74CD      2123            mov     a,#(__str_11 >> 8)
08A2 C0E0      2124            push    acc
08A4 7480      2125            mov     a,#0x80
08A6 C0E0      2126            push    acc
08A8 120000    2127            lcall   _printf
08AB E581      2128            mov     a,sp
08AD 24F9      2129            add     a,#0xf9
08AF F581      2130            mov     sp,a
08B1 D005      2131            pop     ar5
08B3 D004      2132            pop     ar4
08B5 D003      2133            pop     ar3
08B7 D002      2134            pop     ar2
08B9           2135   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:450: display_freq_kHz(freq_Hz / KILO_MULTIPLIER); // Display Frequency on LCD
08B9 8A82      2136            mov     dpl,r2
08BB 8B83      2137            mov     dph,r3
08BD 8CF0      2138            mov     b,r4
08BF ED        2139            mov     a,r5
08C0 120000    2140            lcall   _display_freq_kHz
08C3           2141   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:452: waitms(250); // Wait for 250 ms
08C3 9000FA    2142            mov     dptr,#0x00FA
08C6 120000    2143            lcall   _waitms
08C9           2144   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:453: printf("\rC(nF) = %f\r\n", capacitance_nF); // Print Capacitance in Nanofarads
08C9 C000      2145            push    _main_capacitance_nF_1_75
08CB C001      2146            push    (_main_capacitance_nF_1_75 + 1)
08CD C002      2147            push    (_main_capacitance_nF_1_75 + 2)
08CF C003      2148            push    (_main_capacitance_nF_1_75 + 3)
08D1 74D0      2149            mov     a,#__str_12
08D3 C0E0      2150            push    acc
08D5 74CD      2151            mov     a,#(__str_12 >> 8)
08D7 C0E0      2152            push    acc
08D9 7480      2153            mov     a,#0x80
08DB C0E0      2154            push    acc
08DD 120000    2155            lcall   _printf
08E0 E581      2156            mov     a,sp
08E2 24F9      2157            add     a,#0xf9
08E4 F581      2158            mov     sp,a
08E6           2159   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:454: display_capacitance_nF(capacitance_nF);
08E6 850082    2160            mov     dpl,_main_capacitance_nF_1_75
08E9 850183    2161            mov     dph,(_main_capacitance_nF_1_75 + 1)
08EC 8502F0    2162            mov     b,(_main_capacitance_nF_1_75 + 2)
08EF E503      2163            mov     a,(_main_capacitance_nF_1_75 + 3)
08F1 120000    2164            lcall   _display_capacitance_nF
08F4 020000    2165            ljmp    L025029?
08F7           2166            rseg R_CSEG
08F7           2167   
0000           2168            rseg R_XINIT
0000           2169   
0000           2170            rseg R_CONST
0000           2171   __str_0:
0000 1B        2172            db 0x1B
0001 5B324A    2173            db '[2J'
0004 00        2174            db 0x00
0005           2175   __str_1:
0005 54797065  2176            db 'Type Intended Display in Line 2 (16 Char Max): '
     20496E74
     656E6465
     64204469
     73706C61
     7920696E
     204C696E
     65203220
     28313620
     43686172
     204D6178
     293A20
0034 00        2177            db 0x00
0035           2178   __str_2:
0035 0A        2179            db 0x0A
0036 00        2180            db 0x00
0037           2181   __str_3:
0037 543A2025  2182            db 'T: %.3f s'
     2E336620
     73
0040 00        2183            db 0x00
0041           2184   __str_4:
0041 463A2025  2185            db 'F: %.3f kHz'
     2E336620
     6B487A
004C 00        2186            db 0x00
004D           2187   __str_5:
004D 433A2025  2188            db 'C: %.3f nF'
     2E336620
     6E46
0057 00        2189            db 0x00
0058           2190   __str_6:
0058 565F4C45  2191            db 'V_LED = %f'
     44203D20
     2566
0062 0D        2192            db 0x0D
0063 0A        2193            db 0x0A
0064 00        2194            db 0x00
0065           2195   __str_7:
0065 565F5220  2196            db 'V_R = %f'
     3D202566
006D 0D        2197            db 0x0D
006E 0A        2198            db 0x0A
006F 00        2199            db 0x00
0070           2200   __str_8:
0070 4552524F  2201            db 'ERROR : LOW C'
     52203A20
     4C4F5720
     43
007D 00        2202            db 0x00
007E           2203   __str_9:
007E 4552524F  2204            db 'ERROR : HIGH C'
     52203A20
     48494748
     2043
008C 00        2205            db 0x00
008D           2206   __str_10:
008D 20202020  2207            db '                '
     20202020
     20202020
     20202020
009D 00        2208            db 0x00
009E           2209   __str_11:
009E 0A        2210            db 0x0A
009F 46286B48  2211            db 'F(kHz) = %f'
     7A29203D
     202566
00AA 0D        2212            db 0x0D
00AB 0A        2213            db 0x0A
00AC 00        2214            db 0x00
00AD           2215   __str_12:
00AD 0D        2216            db 0x0D
00AE 43286E46  2217            db 'C(nF) = %f'
     29203D20
     2566
00B8 0D        2218            db 0x0D
00B9 0A        2219            db 0x0A
00BA 00        2220            db 0x00
00BB           2221   
0003           2222            CSEG
0003           2223   
0003           2224   end
