0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Feb 28 19:49:52 2024
0000              5   ;--------------------------------------------------------
                  5   $name Lab4
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Check_Mode_Button
0000             30            public _calculate_resistance_k0hms
0000             31            public _calculate_capacitance_nF
0000             32            public _calculate_freq_Hz
0000             33            public _calculate_period_s
0000             34            public _display_resistance_kOhms
0000             35            public _display_capacitance_nF
0000             36            public _display_freq_kHz
0000             37            public _display_period
0000             38            public _display_rx
0000             39            public _write_rx
0000             40            public _LCDprint
0000             41            public _LCD_4BIT
0000             42            public _WriteCommand
0000             43            public _WriteData
0000             44            public _LCD_byte
0000             45            public _LCD_pulse
0000             46            public _Serial_Init
0000             47            public _TIMER0_Init
0000             48            public _waitms
0000             49            public _Timer3us
0000             50            public _Volts_at_Pin
0000             51            public _ADC_at_Pin
0000             52            public _InitPinADC
0000             53            public _InitADC
0000             54            public __c51_external_startup
0000             55            public _LCDprint_PARM_3
0000             56            public _calculate_period_s_PARM_3
0000             57            public _calculate_period_s_PARM_2
0000             58            public _display_rx_PARM_2
0000             59            public _write_rx_PARM_2
0000             60            public _LCDprint_PARM_2
0000             61            public _LCD_BUFF
0000             62            public _overflow_count
0000             63   ;--------------------------------------------------------
0000             64   ; Special Function Registers
0000             65   ;--------------------------------------------------------
0000             66   _ACC            DATA 0xe0
0000             67   _ADC0ASAH       DATA 0xb6
0000             68   _ADC0ASAL       DATA 0xb5
0000             69   _ADC0ASCF       DATA 0xa1
0000             70   _ADC0ASCT       DATA 0xc7
0000             71   _ADC0CF0        DATA 0xbc
0000             72   _ADC0CF1        DATA 0xb9
0000             73   _ADC0CF2        DATA 0xdf
0000             74   _ADC0CN0        DATA 0xe8
0000             75   _ADC0CN1        DATA 0xb2
0000             76   _ADC0CN2        DATA 0xb3
0000             77   _ADC0GTH        DATA 0xc4
0000             78   _ADC0GTL        DATA 0xc3
0000             79   _ADC0H          DATA 0xbe
0000             80   _ADC0L          DATA 0xbd
0000             81   _ADC0LTH        DATA 0xc6
0000             82   _ADC0LTL        DATA 0xc5
0000             83   _ADC0MX         DATA 0xbb
0000             84   _B              DATA 0xf0
0000             85   _CKCON0         DATA 0x8e
0000             86   _CKCON1         DATA 0xa6
0000             87   _CLEN0          DATA 0xc6
0000             88   _CLIE0          DATA 0xc7
0000             89   _CLIF0          DATA 0xe8
0000             90   _CLKSEL         DATA 0xa9
0000             91   _CLOUT0         DATA 0xd1
0000             92   _CLU0CF         DATA 0xb1
0000             93   _CLU0FN         DATA 0xaf
0000             94   _CLU0MX         DATA 0x84
0000             95   _CLU1CF         DATA 0xb3
0000             96   _CLU1FN         DATA 0xb2
0000             97   _CLU1MX         DATA 0x85
0000             98   _CLU2CF         DATA 0xb6
0000             99   _CLU2FN         DATA 0xb5
0000            100   _CLU2MX         DATA 0x91
0000            101   _CLU3CF         DATA 0xbf
0000            102   _CLU3FN         DATA 0xbe
0000            103   _CLU3MX         DATA 0xae
0000            104   _CMP0CN0        DATA 0x9b
0000            105   _CMP0CN1        DATA 0x99
0000            106   _CMP0MD         DATA 0x9d
0000            107   _CMP0MX         DATA 0x9f
0000            108   _CMP1CN0        DATA 0xbf
0000            109   _CMP1CN1        DATA 0xac
0000            110   _CMP1MD         DATA 0xab
0000            111   _CMP1MX         DATA 0xaa
0000            112   _CRC0CN0        DATA 0xce
0000            113   _CRC0CN1        DATA 0x86
0000            114   _CRC0CNT        DATA 0xd3
0000            115   _CRC0DAT        DATA 0xcb
0000            116   _CRC0FLIP       DATA 0xcf
0000            117   _CRC0IN         DATA 0xca
0000            118   _CRC0ST         DATA 0xd2
0000            119   _DAC0CF0        DATA 0x91
0000            120   _DAC0CF1        DATA 0x92
0000            121   _DAC0H          DATA 0x85
0000            122   _DAC0L          DATA 0x84
0000            123   _DAC1CF0        DATA 0x93
0000            124   _DAC1CF1        DATA 0x94
0000            125   _DAC1H          DATA 0x8a
0000            126   _DAC1L          DATA 0x89
0000            127   _DAC2CF0        DATA 0x95
0000            128   _DAC2CF1        DATA 0x96
0000            129   _DAC2H          DATA 0x8c
0000            130   _DAC2L          DATA 0x8b
0000            131   _DAC3CF0        DATA 0x9a
0000            132   _DAC3CF1        DATA 0x9c
0000            133   _DAC3H          DATA 0x8e
0000            134   _DAC3L          DATA 0x8d
0000            135   _DACGCF0        DATA 0x88
0000            136   _DACGCF1        DATA 0x98
0000            137   _DACGCF2        DATA 0xa2
0000            138   _DERIVID        DATA 0xad
0000            139   _DEVICEID       DATA 0xb5
0000            140   _DPH            DATA 0x83
0000            141   _DPL            DATA 0x82
0000            142   _EIE1           DATA 0xe6
0000            143   _EIE2           DATA 0xf3
0000            144   _EIP1           DATA 0xbb
0000            145   _EIP1H          DATA 0xee
0000            146   _EIP2           DATA 0xed
0000            147   _EIP2H          DATA 0xf6
0000            148   _EMI0CN         DATA 0xe7
0000            149   _FLKEY          DATA 0xb7
0000            150   _HFO0CAL        DATA 0xc7
0000            151   _HFO1CAL        DATA 0xd6
0000            152   _HFOCN          DATA 0xef
0000            153   _I2C0ADM        DATA 0xff
0000            154   _I2C0CN0        DATA 0xba
0000            155   _I2C0DIN        DATA 0xbc
0000            156   _I2C0DOUT       DATA 0xbb
0000            157   _I2C0FCN0       DATA 0xad
0000            158   _I2C0FCN1       DATA 0xab
0000            159   _I2C0FCT        DATA 0xf5
0000            160   _I2C0SLAD       DATA 0xbd
0000            161   _I2C0STAT       DATA 0xb9
0000            162   _IE             DATA 0xa8
0000            163   _IP             DATA 0xb8
0000            164   _IPH            DATA 0xf2
0000            165   _IT01CF         DATA 0xe4
0000            166   _LFO0CN         DATA 0xb1
0000            167   _P0             DATA 0x80
0000            168   _P0MASK         DATA 0xfe
0000            169   _P0MAT          DATA 0xfd
0000            170   _P0MDIN         DATA 0xf1
0000            171   _P0MDOUT        DATA 0xa4
0000            172   _P0SKIP         DATA 0xd4
0000            173   _P1             DATA 0x90
0000            174   _P1MASK         DATA 0xee
0000            175   _P1MAT          DATA 0xed
0000            176   _P1MDIN         DATA 0xf2
0000            177   _P1MDOUT        DATA 0xa5
0000            178   _P1SKIP         DATA 0xd5
0000            179   _P2             DATA 0xa0
0000            180   _P2MASK         DATA 0xfc
0000            181   _P2MAT          DATA 0xfb
0000            182   _P2MDIN         DATA 0xf3
0000            183   _P2MDOUT        DATA 0xa6
0000            184   _P2SKIP         DATA 0xcc
0000            185   _P3             DATA 0xb0
0000            186   _P3MDIN         DATA 0xf4
0000            187   _P3MDOUT        DATA 0x9c
0000            188   _PCA0CENT       DATA 0x9e
0000            189   _PCA0CLR        DATA 0x9c
0000            190   _PCA0CN0        DATA 0xd8
0000            191   _PCA0CPH0       DATA 0xfc
0000            192   _PCA0CPH1       DATA 0xea
0000            193   _PCA0CPH2       DATA 0xec
0000            194   _PCA0CPH3       DATA 0xf5
0000            195   _PCA0CPH4       DATA 0x85
0000            196   _PCA0CPH5       DATA 0xde
0000            197   _PCA0CPL0       DATA 0xfb
0000            198   _PCA0CPL1       DATA 0xe9
0000            199   _PCA0CPL2       DATA 0xeb
0000            200   _PCA0CPL3       DATA 0xf4
0000            201   _PCA0CPL4       DATA 0x84
0000            202   _PCA0CPL5       DATA 0xdd
0000            203   _PCA0CPM0       DATA 0xda
0000            204   _PCA0CPM1       DATA 0xdb
0000            205   _PCA0CPM2       DATA 0xdc
0000            206   _PCA0CPM3       DATA 0xae
0000            207   _PCA0CPM4       DATA 0xaf
0000            208   _PCA0CPM5       DATA 0xcc
0000            209   _PCA0H          DATA 0xfa
0000            210   _PCA0L          DATA 0xf9
0000            211   _PCA0MD         DATA 0xd9
0000            212   _PCA0POL        DATA 0x96
0000            213   _PCA0PWM        DATA 0xf7
0000            214   _PCON0          DATA 0x87
0000            215   _PCON1          DATA 0xcd
0000            216   _PFE0CN         DATA 0xc1
0000            217   _PRTDRV         DATA 0xf6
0000            218   _PSCTL          DATA 0x8f
0000            219   _PSTAT0         DATA 0xaa
0000            220   _PSW            DATA 0xd0
0000            221   _REF0CN         DATA 0xd1
0000            222   _REG0CN         DATA 0xc9
0000            223   _REVID          DATA 0xb6
0000            224   _RSTSRC         DATA 0xef
0000            225   _SBCON1         DATA 0x94
0000            226   _SBRLH1         DATA 0x96
0000            227   _SBRLL1         DATA 0x95
0000            228   _SBUF           DATA 0x99
0000            229   _SBUF0          DATA 0x99
0000            230   _SBUF1          DATA 0x92
0000            231   _SCON           DATA 0x98
0000            232   _SCON0          DATA 0x98
0000            233   _SCON1          DATA 0xc8
0000            234   _SFRPAGE        DATA 0xa7
0000            235   _SFRPGCN        DATA 0xbc
0000            236   _SFRSTACK       DATA 0xd7
0000            237   _SMB0ADM        DATA 0xd6
0000            238   _SMB0ADR        DATA 0xd7
0000            239   _SMB0CF         DATA 0xc1
0000            240   _SMB0CN0        DATA 0xc0
0000            241   _SMB0DAT        DATA 0xc2
0000            242   _SMB0FCN0       DATA 0xc3
0000            243   _SMB0FCN1       DATA 0xc4
0000            244   _SMB0FCT        DATA 0xef
0000            245   _SMB0RXLN       DATA 0xc5
0000            246   _SMB0TC         DATA 0xac
0000            247   _SMOD1          DATA 0x93
0000            248   _SP             DATA 0x81
0000            249   _SPI0CFG        DATA 0xa1
0000            250   _SPI0CKR        DATA 0xa2
0000            251   _SPI0CN0        DATA 0xf8
0000            252   _SPI0DAT        DATA 0xa3
0000            253   _SPI0FCN0       DATA 0x9a
0000            254   _SPI0FCN1       DATA 0x9b
0000            255   _SPI0FCT        DATA 0xf7
0000            256   _SPI0PCF        DATA 0xdf
0000            257   _TCON           DATA 0x88
0000            258   _TH0            DATA 0x8c
0000            259   _TH1            DATA 0x8d
0000            260   _TL0            DATA 0x8a
0000            261   _TL1            DATA 0x8b
0000            262   _TMOD           DATA 0x89
0000            263   _TMR2CN0        DATA 0xc8
0000            264   _TMR2CN1        DATA 0xfd
0000            265   _TMR2H          DATA 0xcf
0000            266   _TMR2L          DATA 0xce
0000            267   _TMR2RLH        DATA 0xcb
0000            268   _TMR2RLL        DATA 0xca
0000            269   _TMR3CN0        DATA 0x91
0000            270   _TMR3CN1        DATA 0xfe
0000            271   _TMR3H          DATA 0x95
0000            272   _TMR3L          DATA 0x94
0000            273   _TMR3RLH        DATA 0x93
0000            274   _TMR3RLL        DATA 0x92
0000            275   _TMR4CN0        DATA 0x98
0000            276   _TMR4CN1        DATA 0xff
0000            277   _TMR4H          DATA 0xa5
0000            278   _TMR4L          DATA 0xa4
0000            279   _TMR4RLH        DATA 0xa3
0000            280   _TMR4RLL        DATA 0xa2
0000            281   _TMR5CN0        DATA 0xc0
0000            282   _TMR5CN1        DATA 0xf1
0000            283   _TMR5H          DATA 0xd5
0000            284   _TMR5L          DATA 0xd4
0000            285   _TMR5RLH        DATA 0xd3
0000            286   _TMR5RLL        DATA 0xd2
0000            287   _UART0PCF       DATA 0xd9
0000            288   _UART1FCN0      DATA 0x9d
0000            289   _UART1FCN1      DATA 0xd8
0000            290   _UART1FCT       DATA 0xfa
0000            291   _UART1LIN       DATA 0x9e
0000            292   _UART1PCF       DATA 0xda
0000            293   _VDM0CN         DATA 0xff
0000            294   _WDTCN          DATA 0x97
0000            295   _XBR0           DATA 0xe1
0000            296   _XBR1           DATA 0xe2
0000            297   _XBR2           DATA 0xe3
0000            298   _XOSC0CN        DATA 0x86
0000            299   _DPTR           DATA 0x8382
0000            300   _TMR2RL         DATA 0xcbca
0000            301   _TMR3RL         DATA 0x9392
0000            302   _TMR4RL         DATA 0xa3a2
0000            303   _TMR5RL         DATA 0xd3d2
0000            304   _TMR0           DATA 0x8c8a
0000            305   _TMR1           DATA 0x8d8b
0000            306   _TMR2           DATA 0xcfce
0000            307   _TMR3           DATA 0x9594
0000            308   _TMR4           DATA 0xa5a4
0000            309   _TMR5           DATA 0xd5d4
0000            310   _SBRL1          DATA 0x9695
0000            311   _PCA0           DATA 0xfaf9
0000            312   _PCA0CP0        DATA 0xfcfb
0000            313   _PCA0CP1        DATA 0xeae9
0000            314   _PCA0CP2        DATA 0xeceb
0000            315   _PCA0CP3        DATA 0xf5f4
0000            316   _PCA0CP4        DATA 0x8584
0000            317   _PCA0CP5        DATA 0xdedd
0000            318   _ADC0ASA        DATA 0xb6b5
0000            319   _ADC0GT         DATA 0xc4c3
0000            320   _ADC0           DATA 0xbebd
0000            321   _ADC0LT         DATA 0xc6c5
0000            322   _DAC0           DATA 0x8584
0000            323   _DAC1           DATA 0x8a89
0000            324   _DAC2           DATA 0x8c8b
0000            325   _DAC3           DATA 0x8e8d
0000            326   ;--------------------------------------------------------
0000            327   ; special function bits
0000            328   ;--------------------------------------------------------
0000            329   _ACC_0          BIT 0xe0
0000            330   _ACC_1          BIT 0xe1
0000            331   _ACC_2          BIT 0xe2
0000            332   _ACC_3          BIT 0xe3
0000            333   _ACC_4          BIT 0xe4
0000            334   _ACC_5          BIT 0xe5
0000            335   _ACC_6          BIT 0xe6
0000            336   _ACC_7          BIT 0xe7
0000            337   _TEMPE          BIT 0xe8
0000            338   _ADGN0          BIT 0xe9
0000            339   _ADGN1          BIT 0xea
0000            340   _ADWINT         BIT 0xeb
0000            341   _ADBUSY         BIT 0xec
0000            342   _ADINT          BIT 0xed
0000            343   _IPOEN          BIT 0xee
0000            344   _ADEN           BIT 0xef
0000            345   _B_0            BIT 0xf0
0000            346   _B_1            BIT 0xf1
0000            347   _B_2            BIT 0xf2
0000            348   _B_3            BIT 0xf3
0000            349   _B_4            BIT 0xf4
0000            350   _B_5            BIT 0xf5
0000            351   _B_6            BIT 0xf6
0000            352   _B_7            BIT 0xf7
0000            353   _C0FIF          BIT 0xe8
0000            354   _C0RIF          BIT 0xe9
0000            355   _C1FIF          BIT 0xea
0000            356   _C1RIF          BIT 0xeb
0000            357   _C2FIF          BIT 0xec
0000            358   _C2RIF          BIT 0xed
0000            359   _C3FIF          BIT 0xee
0000            360   _C3RIF          BIT 0xef
0000            361   _D1SRC0         BIT 0x88
0000            362   _D1SRC1         BIT 0x89
0000            363   _D1AMEN         BIT 0x8a
0000            364   _D01REFSL       BIT 0x8b
0000            365   _D3SRC0         BIT 0x8c
0000            366   _D3SRC1         BIT 0x8d
0000            367   _D3AMEN         BIT 0x8e
0000            368   _D23REFSL       BIT 0x8f
0000            369   _D0UDIS         BIT 0x98
0000            370   _D1UDIS         BIT 0x99
0000            371   _D2UDIS         BIT 0x9a
0000            372   _D3UDIS         BIT 0x9b
0000            373   _EX0            BIT 0xa8
0000            374   _ET0            BIT 0xa9
0000            375   _EX1            BIT 0xaa
0000            376   _ET1            BIT 0xab
0000            377   _ES0            BIT 0xac
0000            378   _ET2            BIT 0xad
0000            379   _ESPI0          BIT 0xae
0000            380   _EA             BIT 0xaf
0000            381   _PX0            BIT 0xb8
0000            382   _PT0            BIT 0xb9
0000            383   _PX1            BIT 0xba
0000            384   _PT1            BIT 0xbb
0000            385   _PS0            BIT 0xbc
0000            386   _PT2            BIT 0xbd
0000            387   _PSPI0          BIT 0xbe
0000            388   _P0_0           BIT 0x80
0000            389   _P0_1           BIT 0x81
0000            390   _P0_2           BIT 0x82
0000            391   _P0_3           BIT 0x83
0000            392   _P0_4           BIT 0x84
0000            393   _P0_5           BIT 0x85
0000            394   _P0_6           BIT 0x86
0000            395   _P0_7           BIT 0x87
0000            396   _P1_0           BIT 0x90
0000            397   _P1_1           BIT 0x91
0000            398   _P1_2           BIT 0x92
0000            399   _P1_3           BIT 0x93
0000            400   _P1_4           BIT 0x94
0000            401   _P1_5           BIT 0x95
0000            402   _P1_6           BIT 0x96
0000            403   _P1_7           BIT 0x97
0000            404   _P2_0           BIT 0xa0
0000            405   _P2_1           BIT 0xa1
0000            406   _P2_2           BIT 0xa2
0000            407   _P2_3           BIT 0xa3
0000            408   _P2_4           BIT 0xa4
0000            409   _P2_5           BIT 0xa5
0000            410   _P2_6           BIT 0xa6
0000            411   _P3_0           BIT 0xb0
0000            412   _P3_1           BIT 0xb1
0000            413   _P3_2           BIT 0xb2
0000            414   _P3_3           BIT 0xb3
0000            415   _P3_4           BIT 0xb4
0000            416   _P3_7           BIT 0xb7
0000            417   _CCF0           BIT 0xd8
0000            418   _CCF1           BIT 0xd9
0000            419   _CCF2           BIT 0xda
0000            420   _CCF3           BIT 0xdb
0000            421   _CCF4           BIT 0xdc
0000            422   _CCF5           BIT 0xdd
0000            423   _CR             BIT 0xde
0000            424   _CF             BIT 0xdf
0000            425   _PARITY         BIT 0xd0
0000            426   _F1             BIT 0xd1
0000            427   _OV             BIT 0xd2
0000            428   _RS0            BIT 0xd3
0000            429   _RS1            BIT 0xd4
0000            430   _F0             BIT 0xd5
0000            431   _AC             BIT 0xd6
0000            432   _CY             BIT 0xd7
0000            433   _RI             BIT 0x98
0000            434   _TI             BIT 0x99
0000            435   _RB8            BIT 0x9a
0000            436   _TB8            BIT 0x9b
0000            437   _REN            BIT 0x9c
0000            438   _CE             BIT 0x9d
0000            439   _SMODE          BIT 0x9e
0000            440   _RI1            BIT 0xc8
0000            441   _TI1            BIT 0xc9
0000            442   _RBX1           BIT 0xca
0000            443   _TBX1           BIT 0xcb
0000            444   _REN1           BIT 0xcc
0000            445   _PERR1          BIT 0xcd
0000            446   _OVR1           BIT 0xce
0000            447   _SI             BIT 0xc0
0000            448   _ACK            BIT 0xc1
0000            449   _ARBLOST        BIT 0xc2
0000            450   _ACKRQ          BIT 0xc3
0000            451   _STO            BIT 0xc4
0000            452   _STA            BIT 0xc5
0000            453   _TXMODE         BIT 0xc6
0000            454   _MASTER         BIT 0xc7
0000            455   _SPIEN          BIT 0xf8
0000            456   _TXNF           BIT 0xf9
0000            457   _NSSMD0         BIT 0xfa
0000            458   _NSSMD1         BIT 0xfb
0000            459   _RXOVRN         BIT 0xfc
0000            460   _MODF           BIT 0xfd
0000            461   _WCOL           BIT 0xfe
0000            462   _SPIF           BIT 0xff
0000            463   _IT0            BIT 0x88
0000            464   _IE0            BIT 0x89
0000            465   _IT1            BIT 0x8a
0000            466   _IE1            BIT 0x8b
0000            467   _TR0            BIT 0x8c
0000            468   _TF0            BIT 0x8d
0000            469   _TR1            BIT 0x8e
0000            470   _TF1            BIT 0x8f
0000            471   _T2XCLK0        BIT 0xc8
0000            472   _T2XCLK1        BIT 0xc9
0000            473   _TR2            BIT 0xca
0000            474   _T2SPLIT        BIT 0xcb
0000            475   _TF2CEN         BIT 0xcc
0000            476   _TF2LEN         BIT 0xcd
0000            477   _TF2L           BIT 0xce
0000            478   _TF2H           BIT 0xcf
0000            479   _T4XCLK0        BIT 0x98
0000            480   _T4XCLK1        BIT 0x99
0000            481   _TR4            BIT 0x9a
0000            482   _T4SPLIT        BIT 0x9b
0000            483   _TF4CEN         BIT 0x9c
0000            484   _TF4LEN         BIT 0x9d
0000            485   _TF4L           BIT 0x9e
0000            486   _TF4H           BIT 0x9f
0000            487   _T5XCLK0        BIT 0xc0
0000            488   _T5XCLK1        BIT 0xc1
0000            489   _TR5            BIT 0xc2
0000            490   _T5SPLIT        BIT 0xc3
0000            491   _TF5CEN         BIT 0xc4
0000            492   _TF5LEN         BIT 0xc5
0000            493   _TF5L           BIT 0xc6
0000            494   _TF5H           BIT 0xc7
0000            495   _RIE            BIT 0xd8
0000            496   _RXTO0          BIT 0xd9
0000            497   _RXTO1          BIT 0xda
0000            498   _RFRQ           BIT 0xdb
0000            499   _TIE            BIT 0xdc
0000            500   _TXHOLD         BIT 0xdd
0000            501   _TXNF1          BIT 0xde
0000            502   _TFRQ           BIT 0xdf
0000            503   ;--------------------------------------------------------
0000            504   ; overlayable register banks
0000            505   ;--------------------------------------------------------
0000            506            rbank0 segment data overlay
0000            507   ;--------------------------------------------------------
0000            508   ; internal ram data
0000            509   ;--------------------------------------------------------
0000            510            rseg R_DSEG
0000            511   _overflow_count:
0000            512            ds 1
0001            513   _LCD_BUFF:
0001            514            ds 16
0011            515   _LCDprint_PARM_2:
0011            516            ds 1
0012            517   _write_rx_PARM_2:
0012            518            ds 2
0014            519   _write_rx_buff_1_55:
0014            520            ds 3
0017            521   _write_rx_sloc0_1_0:
0017            522            ds 2
0019            523   _display_rx_PARM_2:
0019            524            ds 2
001B            525   _calculate_period_s_PARM_2:
001B            526            ds 2
001D            527   _calculate_period_s_PARM_3:
001D            528            ds 2
001F            529   _main_V_R_1_85:
001F            530            ds 4
0023            531   _main_R_kOhms_1_85:
0023            532            ds 4
0027            533   _main_period_s_1_85:
0027            534            ds 4
002B            535   _main_capacitance_nF_1_85:
002B            536            ds 4
002F            537   _main_success_count_1_85:
002F            538            ds 2
0031            539   ;--------------------------------------------------------
0031            540   ; overlayable items in internal ram 
0031            541   ;--------------------------------------------------------
0000            542            rseg    R_OSEG
0000            543   _InitPinADC_PARM_2:
0000            544            ds 1
0001            545            rseg    R_OSEG
0001            546            rseg    R_OSEG
0001            547   ;--------------------------------------------------------
0001            548   ; indirectly addressable internal ram data
0001            549   ;--------------------------------------------------------
0000            550            rseg R_ISEG
0000            551   ;--------------------------------------------------------
0000            552   ; absolute internal ram data
0000            553   ;--------------------------------------------------------
0000            554            DSEG
0000            555   ;--------------------------------------------------------
0000            556   ; bit data
0000            557   ;--------------------------------------------------------
0000            558            rseg R_BSEG
0000            559   _LCDprint_PARM_3:
0000            560            DBIT    1
0001            561   ;--------------------------------------------------------
0001            562   ; paged external ram data
0001            563   ;--------------------------------------------------------
0000            564            rseg R_PSEG
0000            565   ;--------------------------------------------------------
0000            566   ; external ram data
0000            567   ;--------------------------------------------------------
0000            568            rseg R_XSEG
0000            569   ;--------------------------------------------------------
0000            570   ; absolute external ram data
0000            571   ;--------------------------------------------------------
0000            572            XSEG
0000            573   ;--------------------------------------------------------
0000            574   ; external initialized ram data
0000            575   ;--------------------------------------------------------
0000            576            rseg R_IXSEG
0000            577            rseg R_HOME
0000            578            rseg R_GSINIT
0000            579            rseg R_CSEG
0000            580   ;--------------------------------------------------------
0000            581   ; Reset entry point and interrupt vectors
0000            582   ;--------------------------------------------------------
0000            583            CSEG at 0x0000
0000 020000     584            ljmp    _crt0
0003            585   ;--------------------------------------------------------
0003            586   ; global & static initialisations
0003            587   ;--------------------------------------------------------
0000            588            rseg R_HOME
0000            589            rseg R_GSINIT
0000            590            rseg R_GSINIT
0000            591   ;--------------------------------------------------------
0000            592   ; data variables initialization
0000            593   ;--------------------------------------------------------
0000            594            rseg R_DINIT
0000            595            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            596   ;--------------------------------------------------------
0000            597   ; code
0000            598   ;--------------------------------------------------------
0000            599            rseg R_CSEG
0000            600   ;------------------------------------------------------------
0000            601   ;Allocation info for local variables in function '_c51_external_startup'
0000            602   ;------------------------------------------------------------
0000            603   ;------------------------------------------------------------
0000            604   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:67: char _c51_external_startup(void) {
0000            605   ;        -----------------------------------------
0000            606   ;         function _c51_external_startup
0000            607   ;        -----------------------------------------
0000            608   __c51_external_startup:
0000            609            using   0
0000            610   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:69: SFRPAGE = 0x00;
0000 75A700     611            mov     _SFRPAGE,#0x00
0003            612   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:70: WDTCN = 0xDE; // First Key
0003 7597DE     613            mov     _WDTCN,#0xDE
0006            614   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:71: WDTCN = 0xAD; // Second Key
0006 7597AD     615            mov     _WDTCN,#0xAD
0009            616   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:73: VDM0CN |= 0x80;
0009 43FF80     617            orl     _VDM0CN,#0x80
000C            618   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:74: RSTSRC=0x02|0x04;  // Enable Reset on Missing Clock Detector and VDD
000C 75EF06     619            mov     _RSTSRC,#0x06
000F            620   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:82: SFRPAGE = 0x10;
000F 75A710     621            mov     _SFRPAGE,#0x10
0012            622   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:83: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     623            mov     _PFE0CN,#0x20
0015            624   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:84: SFRPAGE = 0x00;
0015 75A700     625            mov     _SFRPAGE,#0x00
0018            626   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:106: CLKSEL = 0x00;
0018 75A900     627            mov     _CLKSEL,#0x00
001B            628   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:107: CLKSEL = 0x00;
001B 75A900     629            mov     _CLKSEL,#0x00
001E            630   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:108: while ((CLKSEL & 0x80) == 0);
001E            631   L002001?:
001E E5A9       632            mov     a,_CLKSEL
0020 30E7F8     633            jnb     acc.7,L002001?
0023            634   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:109: CLKSEL = 0x03;
0023 75A903     635            mov     _CLKSEL,#0x03
0026            636   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:110: CLKSEL = 0x03;
0026 75A903     637            mov     _CLKSEL,#0x03
0029            638   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:111: while ((CLKSEL & 0x80) == 0);
0029            639   L002004?:
0029 E5A9       640            mov     a,_CLKSEL
002B 30E778     641            jnb     acc.7,L002004?
002E            642   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:116: P0MDOUT |= 0x10; // Enable UART0 TX As Push-Pull Output
002E 43A410     643            orl     _P0MDOUT,#0x10
0031            644   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:117: XBR0     = 0x01; // Enable UART0 on P0.4 (TX) and P0.5 (RX)
0031 75E101     645            mov     _XBR0,#0x01
0034            646   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:118: XBR1     = 0X00; // Enable T0 on P0.0
0034 75E200     647            mov     _XBR1,#0x00
0037            648   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:119: XBR2     = 0x40; // Enable Crossbar and Weak Pull-Ups
0037 75E340     649            mov     _XBR2,#0x40
003A            650   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:126: SCON0 = 0x10;
003A 759810     651            mov     _SCON0,#0x10
003D            652   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:127: CKCON0 |= 0b_0000_0000 ; // Timer 1 Uses SYSCLK / 12
003D 858E8E     653            mov     _CKCON0,_CKCON0
0040            654   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:128: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L)); // Set Timer1 Reload Value, Initial Value
0040 758DE6     655            mov     _TH1,#0xE6
0043            656   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:129: TL1 = TH1;      // Init Timer1
0043 858D8B     657            mov     _TL1,_TH1
0046            658   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:130: TMOD &= ~0xf0;  // TMOD: Timer 1 in 8-bit auto-reload
0046 53890F     659            anl     _TMOD,#0x0F
0049            660   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:131: TMOD |=  0x20;
0049 438920     661            orl     _TMOD,#0x20
004C            662   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:132: TR1 = 1; // Start Timer1
004C D28E       663            setb    _TR1
004E            664   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:133: TI = 1;  // Indicate TX0 Ready
004E D299       665            setb    _TI
0050            666   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:135: return 0;
0050 758200     667            mov     dpl,#0x00
0053 22         668            ret
0054            669   ;------------------------------------------------------------
0054            670   ;Allocation info for local variables in function 'InitADC'
0054            671   ;------------------------------------------------------------
0054            672   ;------------------------------------------------------------
0054            673   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:138: void InitADC(void) {
0054            674   ;        -----------------------------------------
0054            675   ;         function InitADC
0054            676   ;        -----------------------------------------
0054            677   _InitADC:
0054            678   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:139: SFRPAGE = 0x00;
0054 75A700     679            mov     _SFRPAGE,#0x00
0057            680   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:140: ADEN=0; // Disable ADC
0057 C2EF       681            clr     _ADEN
0059            682   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:145: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     683            mov     _ADC0CN1,#0x80
005C            684   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:149: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     685            mov     _ADC0CF0,#0x20
005F            686   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:153: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     687            mov     _ADC0CF1,#0x1E
0062            688   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:162: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     689            mov     _ADC0CN0,#0x00
0065            690   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:167: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     691            mov     _ADC0CF2,#0x3F
0068            692   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:171: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     693            mov     _ADC0CN2,#0x00
006B            694   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:173: ADEN=1; // Enable ADC
006B D2EF       695            setb    _ADEN
006D 22         696            ret
006E            697   ;------------------------------------------------------------
006E            698   ;Allocation info for local variables in function 'InitPinADC'
006E            699   ;------------------------------------------------------------
006E            700   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
006E            701   ;portno                    Allocated to registers r2 
006E            702   ;mask                      Allocated to registers r3 
006E            703   ;------------------------------------------------------------
006E            704   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:176: void InitPinADC(unsigned char portno, unsigned char pinno) {
006E            705   ;        -----------------------------------------
006E            706   ;         function InitPinADC
006E            707   ;        -----------------------------------------
006E            708   _InitPinADC:
006E AA82       709            mov     r2,dpl
0070            710   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:179: mask = 1 << pinno;
0070 8560F0     711            mov     b,_InitPinADC_PARM_2
0073 05F0       712            inc     b
0075 7401       713            mov     a,#0x01
0077 8000       714            sjmp    L004013?
0079            715   L004011?:
0079 25E0       716            add     a,acc
007B            717   L004013?:
007B D5F078     718            djnz    b,L004011?
007E FB         719            mov     r3,a
007F            720   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:181: SFRPAGE = 0x20;
007F 75A720     721            mov     _SFRPAGE,#0x20
0082            722   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:182: switch(portno) {
0082 BA00B8     723            cjne    r2,#0x00,L004014?
0085 8000       724            sjmp    L004001?
0087            725   L004014?:
0087 BA0138     726            cjne    r2,#0x01,L004015?
008A 8000       727            sjmp    L004002?
008C            728   L004015?:
008C            729   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:183: case 0:
008C BA02B8     730            cjne    r2,#0x02,L004005?
008F 8000       731            sjmp    L004003?
0091            732   L004001?:
0091            733   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:184: P0MDIN &= (~mask); // Set Pin as Analog Input
0091 EB         734            mov     a,r3
0092 F4         735            cpl     a
0093 FA         736            mov     r2,a
0094 52F1       737            anl     _P0MDIN,a
0096            738   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:185: P0SKIP |= mask; // Skip Crossbar Decoding for this Pin
0096 EB         739            mov     a,r3
0097 42D4       740            orl     _P0SKIP,a
0099            741   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:186: break;
0099            742   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:187: case 1:
0099 8000       743            sjmp    L004005?
009B            744   L004002?:
009B            745   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:188: P1MDIN &= (~mask); // Set Pin as Analog Input
009B EB         746            mov     a,r3
009C F4         747            cpl     a
009D FA         748            mov     r2,a
009E 52F2       749            anl     _P1MDIN,a
00A0            750   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:189: P1SKIP |= mask; // Skip Crossbar Decoding for this Pin
00A0 EB         751            mov     a,r3
00A1 42D5       752            orl     _P1SKIP,a
00A3            753   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:190: break;
00A3            754   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:191: case 2:
00A3 8000       755            sjmp    L004005?
00A5            756   L004003?:
00A5            757   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:192: P2MDIN &= (~mask); // Set Pin as Analog Input
00A5 EB         758            mov     a,r3
00A6 F4         759            cpl     a
00A7 FA         760            mov     r2,a
00A8 52F3       761            anl     _P2MDIN,a
00AA            762   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:193: P2SKIP |= mask; // Skip Crossbar Decoding for this Pin
00AA EB         763            mov     a,r3
00AB 42CC       764            orl     _P2SKIP,a
00AD            765   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:197: }
00AD            766   L004005?:
00AD            767   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:198: SFRPAGE = 0x00;
00AD 75A700     768            mov     _SFRPAGE,#0x00
00B0 22         769            ret
00B1            770   ;------------------------------------------------------------
00B1            771   ;Allocation info for local variables in function 'ADC_at_Pin'
00B1            772   ;------------------------------------------------------------
00B1            773   ;pin                       Allocated to registers 
00B1            774   ;------------------------------------------------------------
00B1            775   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:201: unsigned int ADC_at_Pin(unsigned char pin) {
00B1            776   ;        -----------------------------------------
00B1            777   ;         function ADC_at_Pin
00B1            778   ;        -----------------------------------------
00B1            779   _ADC_at_Pin:
00B1 8582BB     780            mov     _ADC0MX,dpl
00B4            781   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:203: ADINT = 0;
00B4 C2ED       782            clr     _ADINT
00B6            783   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:204: ADBUSY = 1;     // Convert Voltage at the Pin
00B6 D2EC       784            setb    _ADBUSY
00B8            785   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:205: while (!ADINT); // Wait for Conversion to Complete
00B8            786   L005001?:
00B8 30ED38     787            jnb     _ADINT,L005001?
00BB            788   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:206: return (ADC0);
00BB 85BD82     789            mov     dpl,_ADC0
00BE 85BE83     790            mov     dph,(_ADC0 >> 8)
00C1 22         791            ret
00C2            792   ;------------------------------------------------------------
00C2            793   ;Allocation info for local variables in function 'Volts_at_Pin'
00C2            794   ;------------------------------------------------------------
00C2            795   ;pin                       Allocated to registers r2 
00C2            796   ;------------------------------------------------------------
00C2            797   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:209: float Volts_at_Pin(unsigned char pin) {
00C2            798   ;        -----------------------------------------
00C2            799   ;         function Volts_at_Pin
00C2            800   ;        -----------------------------------------
00C2            801   _Volts_at_Pin:
00C2            802   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:211: (ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111
00C2 120000     803            lcall   _ADC_at_Pin
00C5 120000     804            lcall   ___uint2fs
00C8 AA82       805            mov     r2,dpl
00CA AB83       806            mov     r3,dph
00CC ACF0       807            mov     r4,b
00CE FD         808            mov     r5,a
00CF C002       809            push    ar2
00D1 C003       810            push    ar3
00D3 C004       811            push    ar4
00D5 C005       812            push    ar5
00D7 906C8B     813            mov     dptr,#0x6C8B
00DA 75F053     814            mov     b,#0x53
00DD 7440       815            mov     a,#0x40
00DF 120000     816            lcall   ___fsmul
00E2 AA82       817            mov     r2,dpl
00E4 AB83       818            mov     r3,dph
00E6 ACF0       819            mov     r4,b
00E8 FD         820            mov     r5,a
00E9 E581       821            mov     a,sp
00EB 24FC       822            add     a,#0xfc
00ED F581       823            mov     sp,a
00EF E4         824            clr     a
00F0 C0E0       825            push    acc
00F2 74FC       826            mov     a,#0xFC
00F4 C0E0       827            push    acc
00F6 747F       828            mov     a,#0x7F
00F8 C0E0       829            push    acc
00FA 7446       830            mov     a,#0x46
00FC C0E0       831            push    acc
00FE 8A82       832            mov     dpl,r2
0100 8B83       833            mov     dph,r3
0102 8CF0       834            mov     b,r4
0104 ED         835            mov     a,r5
0105 120000     836            lcall   ___fsdiv
0108 AA82       837            mov     r2,dpl
010A AB83       838            mov     r3,dph
010C ACF0       839            mov     r4,b
010E FD         840            mov     r5,a
010F E581       841            mov     a,sp
0111 24FC       842            add     a,#0xfc
0113 F581       843            mov     sp,a
0115 8A82       844            mov     dpl,r2
0117 8B83       845            mov     dph,r3
0119 8CF0       846            mov     b,r4
011B ED         847            mov     a,r5
011C 22         848            ret
011D            849   ;------------------------------------------------------------
011D            850   ;Allocation info for local variables in function 'Timer3us'
011D            851   ;------------------------------------------------------------
011D            852   ;us                        Allocated to registers r2 
011D            853   ;i                         Allocated to registers r3 
011D            854   ;------------------------------------------------------------
011D            855   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:218: void Timer3us(unsigned char us) {
011D            856   ;        -----------------------------------------
011D            857   ;         function Timer3us
011D            858   ;        -----------------------------------------
011D            859   _Timer3us:
011D AA82       860            mov     r2,dpl
011F            861   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:222: CKCON0 |= 0b_0100_0000;
011F 438E40     862            orl     _CKCON0,#0x40
0122            863   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:224: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to Overflow in 1us
0122 7592B8     864            mov     _TMR3RL,#0xB8
0125 7593FF     865            mov     (_TMR3RL >> 8),#0xFF
0128            866   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:225: TMR3 = TMR3RL;                 // Initialize Timer3 for First Overflow
0128 859294     867            mov     _TMR3,_TMR3RL
012B 859395     868            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
012E            869   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:227: TMR3CN0 = 0x04;                 // Start Timer3 and Clear Overflow Flag
012E 759104     870            mov     _TMR3CN0,#0x04
0131            871   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:228: for (i = 0; i < us; i++) {      // Count Overflows (#Microseconds)
0131 7B00       872            mov     r3,#0x00
0133            873   L007004?:
0133 C3         874            clr     c
0134 EB         875            mov     a,r3
0135 9A         876            subb    a,r2
0136 5000       877            jnc     L007007?
0138            878   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:229: while (!(TMR3CN0 & 0x80));  // Wait for Overflow
0138            879   L007001?:
0138 E591       880            mov     a,_TMR3CN0
013A 30E740     881            jnb     acc.7,L007001?
013D            882   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:230: TMR3CN0 &= ~(0x80);         // Clear Overflow Indicator
013D 53917F     883            anl     _TMR3CN0,#0x7F
0140            884   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:228: for (i = 0; i < us; i++) {      // Count Overflows (#Microseconds)
0140 0B         885            inc     r3
0141 8000       886            sjmp    L007004?
0143            887   L007007?:
0143            888   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:232: TMR3CN0 = 0 ;                   // Stop Timer3 and Clear Overflow Flag
0143 759100     889            mov     _TMR3CN0,#0x00
0146 22         890            ret
0147            891   ;------------------------------------------------------------
0147            892   ;Allocation info for local variables in function 'waitms'
0147            893   ;------------------------------------------------------------
0147            894   ;ms                        Allocated to registers r2 r3 
0147            895   ;j                         Allocated to registers r4 r5 
0147            896   ;k                         Allocated to registers r6 
0147            897   ;------------------------------------------------------------
0147            898   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:235: void waitms(unsigned int ms) {
0147            899   ;        -----------------------------------------
0147            900   ;         function waitms
0147            901   ;        -----------------------------------------
0147            902   _waitms:
0147 AA82       903            mov     r2,dpl
0149 AB83       904            mov     r3,dph
014B            905   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:238: for (j=0; j<ms; j++)
014B 7C00       906            mov     r4,#0x00
014D 7D00       907            mov     r5,#0x00
014F            908   L008005?:
014F C3         909            clr     c
0150 EC         910            mov     a,r4
0151 9A         911            subb    a,r2
0152 ED         912            mov     a,r5
0153 9B         913            subb    a,r3
0154 5000       914            jnc     L008009?
0156            915   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:239: for (k=0; k<4; k++) Timer3us(250);
0156 7E00       916            mov     r6,#0x00
0158            917   L008001?:
0158 BE0440     918            cjne    r6,#0x04,L008018?
015B            919   L008018?:
015B 5000       920            jnc     L008007?
015D 7582FA     921            mov     dpl,#0xFA
0160 C002       922            push    ar2
0162 C003       923            push    ar3
0164 C004       924            push    ar4
0166 C005       925            push    ar5
0168 C006       926            push    ar6
016A 120000     927            lcall   _Timer3us
016D D006       928            pop     ar6
016F D005       929            pop     ar5
0171 D004       930            pop     ar4
0173 D003       931            pop     ar3
0175 D002       932            pop     ar2
0177 0E         933            inc     r6
0178 8000       934            sjmp    L008001?
017A            935   L008007?:
017A            936   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:238: for (j=0; j<ms; j++)
017A 0C         937            inc     r4
017B BC0080     938            cjne    r4,#0x00,L008005?
017E 0D         939            inc     r5
017F 8000       940            sjmp    L008005?
0181            941   L008009?:
0181 22         942            ret
0182            943   ;------------------------------------------------------------
0182            944   ;Allocation info for local variables in function 'TIMER0_Init'
0182            945   ;------------------------------------------------------------
0182            946   ;------------------------------------------------------------
0182            947   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:242: void TIMER0_Init(void) {
0182            948   ;        -----------------------------------------
0182            949   ;         function TIMER0_Init
0182            950   ;        -----------------------------------------
0182            951   _TIMER0_Init:
0182            952   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:243: TMOD &= 0b_1111_0000; // Set the Bits of Timer/Counter 0 to 0
0182 5389F0     953            anl     _TMOD,#0xF0
0185            954   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:244: TMOD |= 0b_0000_0001; // Timer/Counter 0 Used As 16-Bit Timer
0185 438901     955            orl     _TMOD,#0x01
0188            956   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:245: TR0 = 0; // Stop Timer/Counter 0
0188 C28C       957            clr     _TR0
018A 22         958            ret
018B            959   ;------------------------------------------------------------
018B            960   ;Allocation info for local variables in function 'Serial_Init'
018B            961   ;------------------------------------------------------------
018B            962   ;------------------------------------------------------------
018B            963   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:248: void Serial_Init(void) {
018B            964   ;        -----------------------------------------
018B            965   ;         function Serial_Init
018B            966   ;        -----------------------------------------
018B            967   _Serial_Init:
018B            968   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:249: waitms(500); // Give Putty a chance to start.
018B 9001F4     969            mov     dptr,#0x01F4
018E 120000     970            lcall   _waitms
0191            971   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:250: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0191 74C0       972            mov     a,#__str_0
0193 C0E0       973            push    acc
0195 74C1       974            mov     a,#(__str_0 >> 8)
0197 C0E0       975            push    acc
0199 7480       976            mov     a,#0x80
019B C0E0       977            push    acc
019D 120000     978            lcall   _printf
01A0 1581       979            dec     sp
01A2 1581       980            dec     sp
01A4 1581       981            dec     sp
01A6 22         982            ret
01A7            983   ;------------------------------------------------------------
01A7            984   ;Allocation info for local variables in function 'LCD_pulse'
01A7            985   ;------------------------------------------------------------
01A7            986   ;------------------------------------------------------------
01A7            987   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:253: void LCD_pulse(void) {
01A7            988   ;        -----------------------------------------
01A7            989   ;         function LCD_pulse
01A7            990   ;        -----------------------------------------
01A7            991   _LCD_pulse:
01A7            992   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:254: LCD_E = 1; // Pulse the Enable Pin
01A7 D2A0       993            setb    _P2_0
01A9            994   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:255: Timer3us(40); // Wait for 40us
01A9 758228     995            mov     dpl,#0x28
01AC 120000     996            lcall   _Timer3us
01AF            997   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:256: LCD_E = 0; // Pulse the Enable Pin
01AF C2A0       998            clr     _P2_0
01B1 22         999            ret
01B2           1000   ;------------------------------------------------------------
01B2           1001   ;Allocation info for local variables in function 'LCD_byte'
01B2           1002   ;------------------------------------------------------------
01B2           1003   ;x                         Allocated to registers r2 
01B2           1004   ;------------------------------------------------------------
01B2           1005   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:259: void LCD_byte(unsigned char x) {
01B2           1006   ;        -----------------------------------------
01B2           1007   ;         function LCD_byte
01B2           1008   ;        -----------------------------------------
01B2           1009   _LCD_byte:
01B2 AA82      1010            mov     r2,dpl
01B4           1011   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:262: ACC = x; // Send High Nibble
01B4 8AE0      1012            mov     _ACC,r2
01B6           1013   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:263: LCD_D7 = ACC_7;
01B6 A2E7      1014            mov     c,_ACC_7
01B8 9290      1015            mov     _P1_0,c
01BA           1016   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:264: LCD_D6 = ACC_6;
01BA A2E6      1017            mov     c,_ACC_6
01BC 9291      1018            mov     _P1_1,c
01BE           1019   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:265: LCD_D5 = ACC_5;
01BE A2E5      1020            mov     c,_ACC_5
01C0 9292      1021            mov     _P1_2,c
01C2           1022   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:266: LCD_D4 = ACC_4;
01C2 A2E4      1023            mov     c,_ACC_4
01C4 9293      1024            mov     _P1_3,c
01C6           1025   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:267: LCD_pulse();
01C6 C002      1026            push    ar2
01C8 120000    1027            lcall   _LCD_pulse
01CB           1028   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:269: Timer3us(40); // Wait for 40us
01CB 758228    1029            mov     dpl,#0x28
01CE 120000    1030            lcall   _Timer3us
01D1 D002      1031            pop     ar2
01D3           1032   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:271: ACC = x; // Send Low Nibble
01D3 8AE0      1033            mov     _ACC,r2
01D5           1034   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:272: LCD_D7 = ACC_3;
01D5 A2E3      1035            mov     c,_ACC_3
01D7 9290      1036            mov     _P1_0,c
01D9           1037   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:273: LCD_D6 = ACC_2;
01D9 A2E2      1038            mov     c,_ACC_2
01DB 9291      1039            mov     _P1_1,c
01DD           1040   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:274: LCD_D5 = ACC_1;
01DD A2E1      1041            mov     c,_ACC_1
01DF 9292      1042            mov     _P1_2,c
01E1           1043   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:275: LCD_D4 = ACC_0;
01E1 A2E0      1044            mov     c,_ACC_0
01E3 9293      1045            mov     _P1_3,c
01E5           1046   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:276: LCD_pulse();
01E5 020000    1047            ljmp    _LCD_pulse
01E8           1048   ;------------------------------------------------------------
01E8           1049   ;Allocation info for local variables in function 'WriteData'
01E8           1050   ;------------------------------------------------------------
01E8           1051   ;x                         Allocated to registers r2 
01E8           1052   ;------------------------------------------------------------
01E8           1053   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:279: void WriteData(unsigned char x) {
01E8           1054   ;        -----------------------------------------
01E8           1055   ;         function WriteData
01E8           1056   ;        -----------------------------------------
01E8           1057   _WriteData:
01E8 AA82      1058            mov     r2,dpl
01EA           1059   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:280: LCD_RS = 1; // Set LCD to Data Mode
01EA D297      1060            setb    _P1_7
01EC           1061   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:281: LCD_byte(x); // Write the Data
01EC 8A82      1062            mov     dpl,r2
01EE 120000    1063            lcall   _LCD_byte
01F1           1064   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:282: waitms(2); // Wait for 2ms
01F1 900002    1065            mov     dptr,#0x0002
01F4 020000    1066            ljmp    _waitms
01F7           1067   ;------------------------------------------------------------
01F7           1068   ;Allocation info for local variables in function 'WriteCommand'
01F7           1069   ;------------------------------------------------------------
01F7           1070   ;x                         Allocated to registers r2 
01F7           1071   ;------------------------------------------------------------
01F7           1072   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:285: void WriteCommand(unsigned char x) {
01F7           1073   ;        -----------------------------------------
01F7           1074   ;         function WriteCommand
01F7           1075   ;        -----------------------------------------
01F7           1076   _WriteCommand:
01F7 AA82      1077            mov     r2,dpl
01F9           1078   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:286: LCD_RS = 0; // Set LCD to Command Mode
01F9 C297      1079            clr     _P1_7
01FB           1080   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:287: LCD_byte(x); // Write the Command
01FB 8A82      1081            mov     dpl,r2
01FD 120000    1082            lcall   _LCD_byte
0200           1083   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:288: waitms(5); // Wait for 5ms
0200 900005    1084            mov     dptr,#0x0005
0203 020000    1085            ljmp    _waitms
0206           1086   ;------------------------------------------------------------
0206           1087   ;Allocation info for local variables in function 'LCD_4BIT'
0206           1088   ;------------------------------------------------------------
0206           1089   ;------------------------------------------------------------
0206           1090   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:291: void LCD_4BIT(void) {
0206           1091   ;        -----------------------------------------
0206           1092   ;         function LCD_4BIT
0206           1093   ;        -----------------------------------------
0206           1094   _LCD_4BIT:
0206           1095   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:292: LCD_E = 0; // Resting State of LCD Enable Pin is 0.
0206 C2A0      1096            clr     _P2_0
0208           1097   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:293: waitms(20); // Wait for 20ms
0208 900014    1098            mov     dptr,#0x0014
020B 120000    1099            lcall   _waitms
020E           1100   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:296: WriteCommand(0x33); // Change to 8-bit Mode
020E 758233    1101            mov     dpl,#0x33
0211 120000    1102            lcall   _WriteCommand
0214           1103   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:297: WriteCommand(0x33); // Change to 8-bit Mode
0214 758233    1104            mov     dpl,#0x33
0217 120000    1105            lcall   _WriteCommand
021A           1106   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:298: WriteCommand(0x32); // Change to 4-bit Mode
021A 758232    1107            mov     dpl,#0x32
021D 120000    1108            lcall   _WriteCommand
0220           1109   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:301: WriteCommand(0x28); // 4-bit, 2 Line, 5x7 Dots
0220 758228    1110            mov     dpl,#0x28
0223 120000    1111            lcall   _WriteCommand
0226           1112   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:302: WriteCommand(0x0c); // Display On, No Cursor, No Blink
0226 75820C    1113            mov     dpl,#0x0C
0229 120000    1114            lcall   _WriteCommand
022C           1115   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:303: WriteCommand(0x01); // Clear Screen Command (Takes Some Time)
022C 758201    1116            mov     dpl,#0x01
022F 120000    1117            lcall   _WriteCommand
0232           1118   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:304: waitms(20); // Wait 20ms for Clear Screen Command to Finish
0232 900014    1119            mov     dptr,#0x0014
0235 020000    1120            ljmp    _waitms
0238           1121   ;------------------------------------------------------------
0238           1122   ;Allocation info for local variables in function 'LCDprint'
0238           1123   ;------------------------------------------------------------
0238           1124   ;line                      Allocated with name '_LCDprint_PARM_2'
0238           1125   ;string                    Allocated to registers r2 r3 r4 
0238           1126   ;j                         Allocated to registers r5 r6 
0238           1127   ;------------------------------------------------------------
0238           1128   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:307: void LCDprint(char * string, unsigned char line, bit clear) {
0238           1129   ;        -----------------------------------------
0238           1130   ;         function LCDprint
0238           1131   ;        -----------------------------------------
0238           1132   _LCDprint:
0238 AA82      1133            mov     r2,dpl
023A AB83      1134            mov     r3,dph
023C ACF0      1135            mov     r4,b
023E           1136   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:310: WriteCommand(line == 2 ? 0xc0 : 0x80); // Set Cursor
023E 7402      1137            mov     a,#0x02
0240 B51840    1138            cjne    a,_LCDprint_PARM_2,L016013?
0243 7DC0      1139            mov     r5,#0xC0
0245 8000      1140            sjmp    L016014?
0247           1141   L016013?:
0247 7D80      1142            mov     r5,#0x80
0249           1143   L016014?:
0249 8D82      1144            mov     dpl,r5
024B C002      1145            push    ar2
024D C003      1146            push    ar3
024F C004      1147            push    ar4
0251 120000    1148            lcall   _WriteCommand
0254           1149   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:311: waitms(5); // Wait for 5ms
0254 900005    1150            mov     dptr,#0x0005
0257 120000    1151            lcall   _waitms
025A D004      1152            pop     ar4
025C D003      1153            pop     ar3
025E D002      1154            pop     ar2
0260           1155   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:312: for (j = 0; string[j] != 0; j++) WriteData(string[j]); // Write Message
0260 7D00      1156            mov     r5,#0x00
0262 7E00      1157            mov     r6,#0x00
0264           1158   L016003?:
0264 ED        1159            mov     a,r5
0265 2A        1160            add     a,r2
0266 FF        1161            mov     r7,a
0267 EE        1162            mov     a,r6
0268 3B        1163            addc    a,r3
0269 F8        1164            mov     r0,a
026A 8C01      1165            mov     ar1,r4
026C 8F82      1166            mov     dpl,r7
026E 8883      1167            mov     dph,r0
0270 89F0      1168            mov     b,r1
0272 120000    1169            lcall   __gptrget
0275 FF        1170            mov     r7,a
0276 6000      1171            jz      L016006?
0278 8F82      1172            mov     dpl,r7
027A C002      1173            push    ar2
027C C003      1174            push    ar3
027E C004      1175            push    ar4
0280 C005      1176            push    ar5
0282 C006      1177            push    ar6
0284 120000    1178            lcall   _WriteData
0287 D006      1179            pop     ar6
0289 D005      1180            pop     ar5
028B D004      1181            pop     ar4
028D D003      1182            pop     ar3
028F D002      1183            pop     ar2
0291 0D        1184            inc     r5
0292 BD00C0    1185            cjne    r5,#0x00,L016003?
0295 0E        1186            inc     r6
0296 8000      1187            sjmp    L016003?
0298           1188   L016006?:
0298           1189   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:313: if (clear) for (; j < CHARS_PER_LINE; j++) WriteData(' '); // Clear Rest of Line
0298 300080    1190            jnb     _LCDprint_PARM_3,L016011?
029B 8D02      1191            mov     ar2,r5
029D 8E03      1192            mov     ar3,r6
029F           1193   L016007?:
029F C3        1194            clr     c
02A0 EA        1195            mov     a,r2
02A1 9410      1196            subb    a,#0x10
02A3 EB        1197            mov     a,r3
02A4 6480      1198            xrl     a,#0x80
02A6 9480      1199            subb    a,#0x80
02A8 5000      1200            jnc     L016011?
02AA 758220    1201            mov     dpl,#0x20
02AD C002      1202            push    ar2
02AF C003      1203            push    ar3
02B1 120000    1204            lcall   _WriteData
02B4 D003      1205            pop     ar3
02B6 D002      1206            pop     ar2
02B8 0A        1207            inc     r2
02B9 BA00C0    1208            cjne    r2,#0x00,L016007?
02BC 0B        1209            inc     r3
02BD 8000      1210            sjmp    L016007?
02BF           1211   L016011?:
02BF 22        1212            ret
02C0           1213   ;------------------------------------------------------------
02C0           1214   ;Allocation info for local variables in function 'write_rx'
02C0           1215   ;------------------------------------------------------------
02C0           1216   ;len                       Allocated with name '_write_rx_PARM_2'
02C0           1217   ;buff                      Allocated with name '_write_rx_buff_1_55'
02C0           1218   ;j                         Allocated with name '_write_rx_sloc0_1_0'
02C0           1219   ;c                         Allocated to registers r3 
02C0           1220   ;sloc0                     Allocated with name '_write_rx_sloc0_1_0'
02C0           1221   ;------------------------------------------------------------
02C0           1222   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:316: int write_rx(char* buff, int len) {
02C0           1223   ;        -----------------------------------------
02C0           1224   ;         function write_rx
02C0           1225   ;        -----------------------------------------
02C0           1226   _write_rx:
02C0 8582A8    1227            mov     _write_rx_buff_1_55,dpl
02C3 8583A9    1228            mov     (_write_rx_buff_1_55 + 1),dph
02C6 85F0AA    1229            mov     (_write_rx_buff_1_55 + 2),b
02C9           1230   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:320: for (j = 0; j < (len-1); j++) {
02C9 E4        1231            clr     a
02CA F5F8      1232            mov     _write_rx_sloc0_1_0,a
02CC F5F9      1233            mov     (_write_rx_sloc0_1_0 + 1),a
02CE E5C8      1234            mov     a,_write_rx_PARM_2
02D0 24FF      1235            add     a,#0xff
02D2 FF        1236            mov     r7,a
02D3 E5C9      1237            mov     a,(_write_rx_PARM_2 + 1)
02D5 34FF      1238            addc    a,#0xff
02D7 F8        1239            mov     r0,a
02D8 7900      1240            mov     r1,#0x00
02DA 7A00      1241            mov     r2,#0x00
02DC           1242   L017005?:
02DC C3        1243            clr     c
02DD E9        1244            mov     a,r1
02DE 9F        1245            subb    a,r7
02DF EA        1246            mov     a,r2
02E0 6480      1247            xrl     a,#0x80
02E2 88F0      1248            mov     b,r0
02E4 63F080    1249            xrl     b,#0x80
02E7 95F0      1250            subb    a,b
02E9 5000      1251            jnc     L017008?
02EB           1252   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:321: c = getchar();
02EB C002      1253            push    ar2
02ED C007      1254            push    ar7
02EF C000      1255            push    ar0
02F1 C001      1256            push    ar1
02F3 120000    1257            lcall   _getchar
02F6 AB82      1258            mov     r3,dpl
02F8 D001      1259            pop     ar1
02FA D000      1260            pop     ar0
02FC D007      1261            pop     ar7
02FE D002      1262            pop     ar2
0300           1263   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:322: if ( (c == '\n') || (c == '\r') ) {
0300 BB0AC0    1264            cjne    r3,#0x0A,L017015?
0303 8000      1265            sjmp    L017001?
0305           1266   L017015?:
0305 BB0D40    1267            cjne    r3,#0x0D,L017002?
0308           1268   L017001?:
0308           1269   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:323: buff[j] = 0;
0308 E5F8      1270            mov     a,_write_rx_sloc0_1_0
030A 25A8      1271            add     a,_write_rx_buff_1_55
030C FC        1272            mov     r4,a
030D E5F9      1273            mov     a,(_write_rx_sloc0_1_0 + 1)
030F 35A9      1274            addc    a,(_write_rx_buff_1_55 + 1)
0311 FD        1275            mov     r5,a
0312 AEAA      1276            mov     r6,(_write_rx_buff_1_55 + 2)
0314 8C82      1277            mov     dpl,r4
0316 8D83      1278            mov     dph,r5
0318 8EF0      1279            mov     b,r6
031A E4        1280            clr     a
031B 120000    1281            lcall   __gptrput
031E           1282   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:324: return j;
031E 85F882    1283            mov     dpl,_write_rx_sloc0_1_0
0321 85F983    1284            mov     dph,(_write_rx_sloc0_1_0 + 1)
0324 22        1285            ret
0325           1286   L017002?:
0325           1287   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:326: buff[j] = c;
0325 E9        1288            mov     a,r1
0326 25A8      1289            add     a,_write_rx_buff_1_55
0328 FC        1290            mov     r4,a
0329 EA        1291            mov     a,r2
032A 35A9      1292            addc    a,(_write_rx_buff_1_55 + 1)
032C FD        1293            mov     r5,a
032D AEAA      1294            mov     r6,(_write_rx_buff_1_55 + 2)
032F 8C82      1295            mov     dpl,r4
0331 8D83      1296            mov     dph,r5
0333 8EF0      1297            mov     b,r6
0335 EB        1298            mov     a,r3
0336 120000    1299            lcall   __gptrput
0339           1300   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:320: for (j = 0; j < (len-1); j++) {
0339 09        1301            inc     r1
033A B900C0    1302            cjne    r1,#0x00,L017018?
033D 0A        1303            inc     r2
033E           1304   L017018?:
033E 89F8      1305            mov     _write_rx_sloc0_1_0,r1
0340 8AF9      1306            mov     (_write_rx_sloc0_1_0 + 1),r2
0342 8000      1307            sjmp    L017005?
0344           1308   L017008?:
0344           1309   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:329: buff[j] = 0;
0344 E5F8      1310            mov     a,_write_rx_sloc0_1_0
0346 25A8      1311            add     a,_write_rx_buff_1_55
0348 FA        1312            mov     r2,a
0349 E5F9      1313            mov     a,(_write_rx_sloc0_1_0 + 1)
034B 35A9      1314            addc    a,(_write_rx_buff_1_55 + 1)
034D FB        1315            mov     r3,a
034E ACAA      1316            mov     r4,(_write_rx_buff_1_55 + 2)
0350 8A82      1317            mov     dpl,r2
0352 8B83      1318            mov     dph,r3
0354 8CF0      1319            mov     b,r4
0356 E4        1320            clr     a
0357 120000    1321            lcall   __gptrput
035A           1322   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:330: return len;
035A 85C882    1323            mov     dpl,_write_rx_PARM_2
035D 85C983    1324            mov     dph,(_write_rx_PARM_2 + 1)
0360 22        1325            ret
0361           1326   ;------------------------------------------------------------
0361           1327   ;Allocation info for local variables in function 'display_rx'
0361           1328   ;------------------------------------------------------------
0361           1329   ;len                       Allocated with name '_display_rx_PARM_2'
0361           1330   ;buff                      Allocated to registers r2 r3 r4 
0361           1331   ;------------------------------------------------------------
0361           1332   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:333: void display_rx(char* buff, int len) {
0361           1333   ;        -----------------------------------------
0361           1334   ;         function display_rx
0361           1335   ;        -----------------------------------------
0361           1336   _display_rx:
0361 AA82      1337            mov     r2,dpl
0363 AB83      1338            mov     r3,dph
0365 ACF0      1339            mov     r4,b
0367           1340   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:334: printf("Type Intended Display in Line 2 (16 Char Max): ");
0367 C002      1341            push    ar2
0369 C003      1342            push    ar3
036B C004      1343            push    ar4
036D 7400      1344            mov     a,#__str_1
036F C0E0      1345            push    acc
0371 74C6      1346            mov     a,#(__str_1 >> 8)
0373 C0E0      1347            push    acc
0375 7480      1348            mov     a,#0x80
0377 C0E0      1349            push    acc
0379 120000    1350            lcall   _printf
037C 1581      1351            dec     sp
037E 1581      1352            dec     sp
0380 1581      1353            dec     sp
0382 D004      1354            pop     ar4
0384 D003      1355            pop     ar3
0386 D002      1356            pop     ar2
0388           1357   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:335: write_rx(buff, len);
0388 8578C8    1358            mov     _write_rx_PARM_2,_display_rx_PARM_2
038B 8579C9    1359            mov     (_write_rx_PARM_2 + 1),(_display_rx_PARM_2 + 1)
038E 8A82      1360            mov     dpl,r2
0390 8B83      1361            mov     dph,r3
0392 8CF0      1362            mov     b,r4
0394 C002      1363            push    ar2
0396 C003      1364            push    ar3
0398 C004      1365            push    ar4
039A 120000    1366            lcall   _write_rx
039D           1367   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:336: printf("\n");
039D 7440      1368            mov     a,#__str_2
039F C0E0      1369            push    acc
03A1 74C6      1370            mov     a,#(__str_2 >> 8)
03A3 C0E0      1371            push    acc
03A5 7480      1372            mov     a,#0x80
03A7 C0E0      1373            push    acc
03A9 120000    1374            lcall   _printf
03AC 1581      1375            dec     sp
03AE 1581      1376            dec     sp
03B0 1581      1377            dec     sp
03B2 D004      1378            pop     ar4
03B4 D003      1379            pop     ar3
03B6 D002      1380            pop     ar2
03B8           1381   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:337: LCDprint(buff, 1, 1);
03B8 751801    1382            mov     _LCDprint_PARM_2,#0x01
03BB D200      1383            setb    _LCDprint_PARM_3
03BD 8A82      1384            mov     dpl,r2
03BF 8B83      1385            mov     dph,r3
03C1 8CF0      1386            mov     b,r4
03C3 020000    1387            ljmp    _LCDprint
03C6           1388   ;------------------------------------------------------------
03C6           1389   ;Allocation info for local variables in function 'display_period'
03C6           1390   ;------------------------------------------------------------
03C6           1391   ;period                    Allocated to registers r2 r3 r4 r5 
03C6           1392   ;------------------------------------------------------------
03C6           1393   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:340: void display_period(float period) {
03C6           1394   ;        -----------------------------------------
03C6           1395   ;         function display_period
03C6           1396   ;        -----------------------------------------
03C6           1397   _display_period:
03C6 AA82      1398            mov     r2,dpl
03C8 AB83      1399            mov     r3,dph
03CA ACF0      1400            mov     r4,b
03CC FD        1401            mov     r5,a
03CD           1402   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:341: sprintf(LCD_BUFF, "T: %.3f s", period); // Format the Period Value
03CD C002      1403            push    ar2
03CF C003      1404            push    ar3
03D1 C004      1405            push    ar4
03D3 C005      1406            push    ar5
03D5 7480      1407            mov     a,#__str_3
03D7 C0E0      1408            push    acc
03D9 74C6      1409            mov     a,#(__str_3 >> 8)
03DB C0E0      1410            push    acc
03DD 7480      1411            mov     a,#0x80
03DF C0E0      1412            push    acc
03E1 7458      1413            mov     a,#_LCD_BUFF
03E3 C0E0      1414            push    acc
03E5 744B      1415            mov     a,#(_LCD_BUFF >> 8)
03E7 C0E0      1416            push    acc
03E9 7440      1417            mov     a,#0x40
03EB C0E0      1418            push    acc
03ED 120000    1419            lcall   _sprintf
03F0 E581      1420            mov     a,sp
03F2 24F6      1421            add     a,#0xf6
03F4 F581      1422            mov     sp,a
03F6           1423   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:342: LCDprint(LCD_BUFF, 2, 1); // Write to LCD
03F6 751802    1424            mov     _LCDprint_PARM_2,#0x02
03F9 D200      1425            setb    _LCDprint_PARM_3
03FB 904B58    1426            mov     dptr,#_LCD_BUFF
03FE 75F040    1427            mov     b,#0x40
0401 020000    1428            ljmp    _LCDprint
0404           1429   ;------------------------------------------------------------
0404           1430   ;Allocation info for local variables in function 'display_freq_kHz'
0404           1431   ;------------------------------------------------------------
0404           1432   ;freq_kHz                  Allocated to registers r2 r3 r4 r5 
0404           1433   ;------------------------------------------------------------
0404           1434   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:345: void display_freq_kHz(float freq_kHz) {
0404           1435   ;        -----------------------------------------
0404           1436   ;         function display_freq_kHz
0404           1437   ;        -----------------------------------------
0404           1438   _display_freq_kHz:
0404 AA82      1439            mov     r2,dpl
0406 AB83      1440            mov     r3,dph
0408 ACF0      1441            mov     r4,b
040A FD        1442            mov     r5,a
040B           1443   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:346: sprintf(LCD_BUFF, "F: %.3f kHz", freq_kHz); // Format the Frequency Value
040B C002      1444            push    ar2
040D C003      1445            push    ar3
040F C004      1446            push    ar4
0411 C005      1447            push    ar5
0413 7400      1448            mov     a,#__str_4
0415 C0E0      1449            push    acc
0417 74C7      1450            mov     a,#(__str_4 >> 8)
0419 C0E0      1451            push    acc
041B 7480      1452            mov     a,#0x80
041D C0E0      1453            push    acc
041F 7458      1454            mov     a,#_LCD_BUFF
0421 C0E0      1455            push    acc
0423 744B      1456            mov     a,#(_LCD_BUFF >> 8)
0425 C0E0      1457            push    acc
0427 7440      1458            mov     a,#0x40
0429 C0E0      1459            push    acc
042B 120000    1460            lcall   _sprintf
042E E581      1461            mov     a,sp
0430 24F6      1462            add     a,#0xf6
0432 F581      1463            mov     sp,a
0434           1464   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:347: LCDprint(LCD_BUFF, 1, 1); // Write to LCD
0434 751801    1465            mov     _LCDprint_PARM_2,#0x01
0437 D200      1466            setb    _LCDprint_PARM_3
0439 904B58    1467            mov     dptr,#_LCD_BUFF
043C 75F040    1468            mov     b,#0x40
043F 020000    1469            ljmp    _LCDprint
0442           1470   ;------------------------------------------------------------
0442           1471   ;Allocation info for local variables in function 'display_capacitance_nF'
0442           1472   ;------------------------------------------------------------
0442           1473   ;capacitance_nF            Allocated to registers r2 r3 r4 r5 
0442           1474   ;------------------------------------------------------------
0442           1475   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:350: void display_capacitance_nF(float capacitance_nF) {
0442           1476   ;        -----------------------------------------
0442           1477   ;         function display_capacitance_nF
0442           1478   ;        -----------------------------------------
0442           1479   _display_capacitance_nF:
0442 AA82      1480            mov     r2,dpl
0444 AB83      1481            mov     r3,dph
0446 ACF0      1482            mov     r4,b
0448 FD        1483            mov     r5,a
0449           1484   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:351: sprintf(LCD_BUFF, "C: %.3f nF", capacitance_nF); // Format the Capacitance Value
0449 C002      1485            push    ar2
044B C003      1486            push    ar3
044D C004      1487            push    ar4
044F C005      1488            push    ar5
0451 7440      1489            mov     a,#__str_5
0453 C0E0      1490            push    acc
0455 74C7      1491            mov     a,#(__str_5 >> 8)
0457 C0E0      1492            push    acc
0459 7480      1493            mov     a,#0x80
045B C0E0      1494            push    acc
045D 7458      1495            mov     a,#_LCD_BUFF
045F C0E0      1496            push    acc
0461 744B      1497            mov     a,#(_LCD_BUFF >> 8)
0463 C0E0      1498            push    acc
0465 7440      1499            mov     a,#0x40
0467 C0E0      1500            push    acc
0469 120000    1501            lcall   _sprintf
046C E581      1502            mov     a,sp
046E 24F6      1503            add     a,#0xf6
0470 F581      1504            mov     sp,a
0472           1505   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:352: LCDprint(LCD_BUFF, 2, 1); // Write to LCD
0472 751802    1506            mov     _LCDprint_PARM_2,#0x02
0475 D200      1507            setb    _LCDprint_PARM_3
0477 904B58    1508            mov     dptr,#_LCD_BUFF
047A 75F040    1509            mov     b,#0x40
047D 020000    1510            ljmp    _LCDprint
0480           1511   ;------------------------------------------------------------
0480           1512   ;Allocation info for local variables in function 'display_resistance_kOhms'
0480           1513   ;------------------------------------------------------------
0480           1514   ;resistance_kOhms          Allocated to registers r2 r3 r4 r5 
0480           1515   ;------------------------------------------------------------
0480           1516   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:355: void display_resistance_kOhms(float resistance_kOhms) {
0480           1517   ;        -----------------------------------------
0480           1518   ;         function display_resistance_kOhms
0480           1519   ;        -----------------------------------------
0480           1520   _display_resistance_kOhms:
0480 AA82      1521            mov     r2,dpl
0482 AB83      1522            mov     r3,dph
0484 ACF0      1523            mov     r4,b
0486 FD        1524            mov     r5,a
0487           1525   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:356: sprintf(LCD_BUFF, "R: %.3f kOhms", resistance_kOhms); // Format the Resistance Value
0487 C002      1526            push    ar2
0489 C003      1527            push    ar3
048B C004      1528            push    ar4
048D C005      1529            push    ar5
048F 7480      1530            mov     a,#__str_6
0491 C0E0      1531            push    acc
0493 74C7      1532            mov     a,#(__str_6 >> 8)
0495 C0E0      1533            push    acc
0497 7480      1534            mov     a,#0x80
0499 C0E0      1535            push    acc
049B 7458      1536            mov     a,#_LCD_BUFF
049D C0E0      1537            push    acc
049F 744B      1538            mov     a,#(_LCD_BUFF >> 8)
04A1 C0E0      1539            push    acc
04A3 7440      1540            mov     a,#0x40
04A5 C0E0      1541            push    acc
04A7 120000    1542            lcall   _sprintf
04AA E581      1543            mov     a,sp
04AC 24F6      1544            add     a,#0xf6
04AE F581      1545            mov     sp,a
04B0           1546   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:357: LCDprint(LCD_BUFF, 1, 1); // Write to LCD
04B0 751801    1547            mov     _LCDprint_PARM_2,#0x01
04B3 D200      1548            setb    _LCDprint_PARM_3
04B5 904B58    1549            mov     dptr,#_LCD_BUFF
04B8 75F040    1550            mov     b,#0x40
04BB 120000    1551            lcall   _LCDprint
04BE           1552   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:358: LCDprint("                ", 2, 1); // Clear Second Line
04BE 751802    1553            mov     _LCDprint_PARM_2,#0x02
04C1 D200      1554            setb    _LCDprint_PARM_3
04C3 90C7C0    1555            mov     dptr,#__str_7
04C6 75F080    1556            mov     b,#0x80
04C9 020000    1557            ljmp    _LCDprint
04CC           1558   ;------------------------------------------------------------
04CC           1559   ;Allocation info for local variables in function 'calculate_period_s'
04CC           1560   ;------------------------------------------------------------
04CC           1561   ;TH0                       Allocated with name '_calculate_period_s_PARM_2'
04CC           1562   ;TL0                       Allocated with name '_calculate_period_s_PARM_3'
04CC           1563   ;overflow_count            Allocated to registers r2 r3 
04CC           1564   ;------------------------------------------------------------
04CC           1565   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:361: float calculate_period_s(int overflow_count, int TH0, int TL0) {
04CC           1566   ;        -----------------------------------------
04CC           1567   ;         function calculate_period_s
04CC           1568   ;        -----------------------------------------
04CC           1569   _calculate_period_s:
04CC           1570   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:362: return ((overflow_count * MAX_16_BIT)  + (TH0 * MAX_8_BIT) + TL0) * (12.0 / SYSCLK);
04CC 120000    1571            lcall   ___sint2fs
04CF AA82      1572            mov     r2,dpl
04D1 AB83      1573            mov     r3,dph
04D3 ACF0      1574            mov     r4,b
04D5 FD        1575            mov     r5,a
04D6 C002      1576            push    ar2
04D8 C003      1577            push    ar3
04DA C004      1578            push    ar4
04DC C005      1579            push    ar5
04DE 900000    1580            mov     dptr,#0x0000
04E1 75F080    1581            mov     b,#0x80
04E4 7447      1582            mov     a,#0x47
04E6 120000    1583            lcall   ___fsmul
04E9 AA82      1584            mov     r2,dpl
04EB AB83      1585            mov     r3,dph
04ED ACF0      1586            mov     r4,b
04EF FD        1587            mov     r5,a
04F0 E581      1588            mov     a,sp
04F2 24FC      1589            add     a,#0xfc
04F4 F581      1590            mov     sp,a
04F6 852882    1591            mov     dpl,_calculate_period_s_PARM_2
04F9 852983    1592            mov     dph,(_calculate_period_s_PARM_2 + 1)
04FC C002      1593            push    ar2
04FE C003      1594            push    ar3
0500 C004      1595            push    ar4
0502 C005      1596            push    ar5
0504 120000    1597            lcall   ___sint2fs
0507 AE82      1598            mov     r6,dpl
0509 AF83      1599            mov     r7,dph
050B A8F0      1600            mov     r0,b
050D F9        1601            mov     r1,a
050E C006      1602            push    ar6
0510 C007      1603            push    ar7
0512 C000      1604            push    ar0
0514 C001      1605            push    ar1
0516 900000    1606            mov     dptr,#0x0000
0519 75F080    1607            mov     b,#0x80
051C 7443      1608            mov     a,#0x43
051E 120000    1609            lcall   ___fsmul
0521 AE82      1610            mov     r6,dpl
0523 AF83      1611            mov     r7,dph
0525 A8F0      1612            mov     r0,b
0527 F9        1613            mov     r1,a
0528 E581      1614            mov     a,sp
052A 24FC      1615            add     a,#0xfc
052C F581      1616            mov     sp,a
052E D005      1617            pop     ar5
0530 D004      1618            pop     ar4
0532 D003      1619            pop     ar3
0534 D002      1620            pop     ar2
0536 C006      1621            push    ar6
0538 C007      1622            push    ar7
053A C000      1623            push    ar0
053C C001      1624            push    ar1
053E 8A82      1625            mov     dpl,r2
0540 8B83      1626            mov     dph,r3
0542 8CF0      1627            mov     b,r4
0544 ED        1628            mov     a,r5
0545 120000    1629            lcall   ___fsadd
0548 AA82      1630            mov     r2,dpl
054A AB83      1631            mov     r3,dph
054C ACF0      1632            mov     r4,b
054E FD        1633            mov     r5,a
054F E581      1634            mov     a,sp
0551 24FC      1635            add     a,#0xfc
0553 F581      1636            mov     sp,a
0555 85D882    1637            mov     dpl,_calculate_period_s_PARM_3
0558 85D983    1638            mov     dph,(_calculate_period_s_PARM_3 + 1)
055B C002      1639            push    ar2
055D C003      1640            push    ar3
055F C004      1641            push    ar4
0561 C005      1642            push    ar5
0563 120000    1643            lcall   ___sint2fs
0566 AE82      1644            mov     r6,dpl
0568 AF83      1645            mov     r7,dph
056A A8F0      1646            mov     r0,b
056C F9        1647            mov     r1,a
056D D005      1648            pop     ar5
056F D004      1649            pop     ar4
0571 D003      1650            pop     ar3
0573 D002      1651            pop     ar2
0575 C006      1652            push    ar6
0577 C007      1653            push    ar7
0579 C000      1654            push    ar0
057B C001      1655            push    ar1
057D 8A82      1656            mov     dpl,r2
057F 8B83      1657            mov     dph,r3
0581 8CF0      1658            mov     b,r4
0583 ED        1659            mov     a,r5
0584 120000    1660            lcall   ___fsadd
0587 AA82      1661            mov     r2,dpl
0589 AB83      1662            mov     r3,dph
058B ACF0      1663            mov     r4,b
058D FD        1664            mov     r5,a
058E E581      1665            mov     a,sp
0590 24FC      1666            add     a,#0xfc
0592 F581      1667            mov     sp,a
0594 C002      1668            push    ar2
0596 C003      1669            push    ar3
0598 C004      1670            push    ar4
059A C005      1671            push    ar5
059C 90F4FC    1672            mov     dptr,#0xF4FC
059F 75F032    1673            mov     b,#0x32
05A2 7434      1674            mov     a,#0x34
05A4 120000    1675            lcall   ___fsmul
05A7 AA82      1676            mov     r2,dpl
05A9 AB83      1677            mov     r3,dph
05AB ACF0      1678            mov     r4,b
05AD FD        1679            mov     r5,a
05AE E581      1680            mov     a,sp
05B0 24FC      1681            add     a,#0xfc
05B2 F581      1682            mov     sp,a
05B4 8A82      1683            mov     dpl,r2
05B6 8B83      1684            mov     dph,r3
05B8 8CF0      1685            mov     b,r4
05BA ED        1686            mov     a,r5
05BB 22        1687            ret
05BC           1688   ;------------------------------------------------------------
05BC           1689   ;Allocation info for local variables in function 'calculate_freq_Hz'
05BC           1690   ;------------------------------------------------------------
05BC           1691   ;period_s                  Allocated to registers r2 r3 r4 r5 
05BC           1692   ;------------------------------------------------------------
05BC           1693   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:365: float calculate_freq_Hz(float period_s) {
05BC           1694   ;        -----------------------------------------
05BC           1695   ;         function calculate_freq_Hz
05BC           1696   ;        -----------------------------------------
05BC           1697   _calculate_freq_Hz:
05BC AA82      1698            mov     r2,dpl
05BE AB83      1699            mov     r3,dph
05C0 ACF0      1700            mov     r4,b
05C2 FD        1701            mov     r5,a
05C3           1702   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:366: return (1.0 / period_s);
05C3 C002      1703            push    ar2
05C5 C003      1704            push    ar3
05C7 C004      1705            push    ar4
05C9 C005      1706            push    ar5
05CB 900000    1707            mov     dptr,#0x0000
05CE 75F080    1708            mov     b,#0x80
05D1 743F      1709            mov     a,#0x3F
05D3 120000    1710            lcall   ___fsdiv
05D6 AA82      1711            mov     r2,dpl
05D8 AB83      1712            mov     r3,dph
05DA ACF0      1713            mov     r4,b
05DC FD        1714            mov     r5,a
05DD E581      1715            mov     a,sp
05DF 24FC      1716            add     a,#0xfc
05E1 F581      1717            mov     sp,a
05E3 8A82      1718            mov     dpl,r2
05E5 8B83      1719            mov     dph,r3
05E7 8CF0      1720            mov     b,r4
05E9 ED        1721            mov     a,r5
05EA 22        1722            ret
05EB           1723   ;------------------------------------------------------------
05EB           1724   ;Allocation info for local variables in function 'calculate_capacitance_nF'
05EB           1725   ;------------------------------------------------------------
05EB           1726   ;period_s                  Allocated to registers r2 r3 r4 r5 
05EB           1727   ;------------------------------------------------------------
05EB           1728   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:369: float calculate_capacitance_nF(float period_s) {
05EB           1729   ;        -----------------------------------------
05EB           1730   ;         function calculate_capacitance_nF
05EB           1731   ;        -----------------------------------------
05EB           1732   _calculate_capacitance_nF:
05EB AA82      1733            mov     r2,dpl
05ED AB83      1734            mov     r3,dph
05EF ACF0      1735            mov     r4,b
05F1 FD        1736            mov     r5,a
05F2           1737   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:370: return (1.44 * period_s / (R_A + 2 * R_B)) * GIGA_MULTIPLIER; // Convert to Nanofarads
05F2 C002      1738            push    ar2
05F4 C003      1739            push    ar3
05F6 C004      1740            push    ar4
05F8 C005      1741            push    ar5
05FA 9051EC    1742            mov     dptr,#0x51EC
05FD 75F0B8    1743            mov     b,#0xB8
0600 743F      1744            mov     a,#0x3F
0602 120000    1745            lcall   ___fsmul
0605 AA82      1746            mov     r2,dpl
0607 AB83      1747            mov     r3,dph
0609 ACF0      1748            mov     r4,b
060B FD        1749            mov     r5,a
060C E581      1750            mov     a,sp
060E 24FC      1751            add     a,#0xfc
0610 F581      1752            mov     sp,a
0612 E4        1753            clr     a
0613 C0E0      1754            push    acc
0615 74A0      1755            mov     a,#0xA0
0617 C0E0      1756            push    acc
0619 748C      1757            mov     a,#0x8C
061B C0E0      1758            push    acc
061D 7445      1759            mov     a,#0x45
061F C0E0      1760            push    acc
0621 8A82      1761            mov     dpl,r2
0623 8B83      1762            mov     dph,r3
0625 8CF0      1763            mov     b,r4
0627 ED        1764            mov     a,r5
0628 120000    1765            lcall   ___fsdiv
062B AA82      1766            mov     r2,dpl
062D AB83      1767            mov     r3,dph
062F ACF0      1768            mov     r4,b
0631 FD        1769            mov     r5,a
0632 E581      1770            mov     a,sp
0634 24FC      1771            add     a,#0xfc
0636 F581      1772            mov     sp,a
0638 C002      1773            push    ar2
063A C003      1774            push    ar3
063C C004      1775            push    ar4
063E C005      1776            push    ar5
0640 906B28    1777            mov     dptr,#0x6B28
0643 75F06E    1778            mov     b,#0x6E
0646 744E      1779            mov     a,#0x4E
0648 120000    1780            lcall   ___fsmul
064B AA82      1781            mov     r2,dpl
064D AB83      1782            mov     r3,dph
064F ACF0      1783            mov     r4,b
0651 FD        1784            mov     r5,a
0652 E581      1785            mov     a,sp
0654 24FC      1786            add     a,#0xfc
0656 F581      1787            mov     sp,a
0658 8A82      1788            mov     dpl,r2
065A 8B83      1789            mov     dph,r3
065C 8CF0      1790            mov     b,r4
065E ED        1791            mov     a,r5
065F 22        1792            ret
0660           1793   ;------------------------------------------------------------
0660           1794   ;Allocation info for local variables in function 'calculate_resistance_k0hms'
0660           1795   ;------------------------------------------------------------
0660           1796   ;voltage_across_resistor   Allocated to registers r2 r3 r4 r5 
0660           1797   ;current                   Allocated to registers r6 r7 r0 r1 
0660           1798   ;------------------------------------------------------------
0660           1799   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:373: float calculate_resistance_k0hms(float voltage_across_resistor) {
0660           1800   ;        -----------------------------------------
0660           1801   ;         function calculate_resistance_k0hms
0660           1802   ;        -----------------------------------------
0660           1803   _calculate_resistance_k0hms:
0660 AA82      1804            mov     r2,dpl
0662 AB83      1805            mov     r3,dph
0664 ACF0      1806            mov     r4,b
0666 FD        1807            mov     r5,a
0667           1808   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:374: float current = ((VSS - voltage_across_resistor) / R_REF) / MEGA_MULTIPLIER; // Calculate Current (Amps)
0667 C002      1809            push    ar2
0669 C003      1810            push    ar3
066B C004      1811            push    ar4
066D C005      1812            push    ar5
066F C002      1813            push    ar2
0671 C003      1814            push    ar3
0673 C004      1815            push    ar4
0675 C005      1816            push    ar5
0677 90999A    1817            mov     dptr,#0x999A
067A 75F099    1818            mov     b,#0x99
067D 7440      1819            mov     a,#0x40
067F 120000    1820            lcall   ___fssub
0682 AE82      1821            mov     r6,dpl
0684 AF83      1822            mov     r7,dph
0686 A8F0      1823            mov     r0,b
0688 F9        1824            mov     r1,a
0689 E581      1825            mov     a,sp
068B 24FC      1826            add     a,#0xfc
068D F581      1827            mov     sp,a
068F 7471      1828            mov     a,#0x71
0691 C0E0      1829            push    acc
0693 743D      1830            mov     a,#0x3D
0695 C0E0      1831            push    acc
0697 74C5      1832            mov     a,#0xC5
0699 C0E0      1833            push    acc
069B 7442      1834            mov     a,#0x42
069D C0E0      1835            push    acc
069F 8E82      1836            mov     dpl,r6
06A1 8F83      1837            mov     dph,r7
06A3 88F0      1838            mov     b,r0
06A5 E9        1839            mov     a,r1
06A6 120000    1840            lcall   ___fsdiv
06A9 AE82      1841            mov     r6,dpl
06AB AF83      1842            mov     r7,dph
06AD A8F0      1843            mov     r0,b
06AF F9        1844            mov     r1,a
06B0 E581      1845            mov     a,sp
06B2 24FC      1846            add     a,#0xfc
06B4 F581      1847            mov     sp,a
06B6 C006      1848            push    ar6
06B8 C007      1849            push    ar7
06BA C000      1850            push    ar0
06BC C001      1851            push    ar1
06BE 900000    1852            mov     dptr,#0x0000
06C1 75F07A    1853            mov     b,#0x7A
06C4 7444      1854            mov     a,#0x44
06C6 120000    1855            lcall   ___fsmul
06C9 AE82      1856            mov     r6,dpl
06CB AF83      1857            mov     r7,dph
06CD A8F0      1858            mov     r0,b
06CF F9        1859            mov     r1,a
06D0 E581      1860            mov     a,sp
06D2 24FC      1861            add     a,#0xfc
06D4 F581      1862            mov     sp,a
06D6 E4        1863            clr     a
06D7 C0E0      1864            push    acc
06D9 7424      1865            mov     a,#0x24
06DB C0E0      1866            push    acc
06DD 7474      1867            mov     a,#0x74
06DF C0E0      1868            push    acc
06E1 7449      1869            mov     a,#0x49
06E3 C0E0      1870            push    acc
06E5 8E82      1871            mov     dpl,r6
06E7 8F83      1872            mov     dph,r7
06E9 88F0      1873            mov     b,r0
06EB E9        1874            mov     a,r1
06EC 120000    1875            lcall   ___fsdiv
06EF AE82      1876            mov     r6,dpl
06F1 AF83      1877            mov     r7,dph
06F3 A8F0      1878            mov     r0,b
06F5 F9        1879            mov     r1,a
06F6 E581      1880            mov     a,sp
06F8 24FC      1881            add     a,#0xfc
06FA F581      1882            mov     sp,a
06FC D005      1883            pop     ar5
06FE D004      1884            pop     ar4
0700 D003      1885            pop     ar3
0702 D002      1886            pop     ar2
0704           1887   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:379: return (voltage_across_resistor / current) / KILO_MULTIPLIER; // Calculate Resistance (Kilohms)
0704 C006      1888            push    ar6
0706 C007      1889            push    ar7
0708 C000      1890            push    ar0
070A C001      1891            push    ar1
070C 8A82      1892            mov     dpl,r2
070E 8B83      1893            mov     dph,r3
0710 8CF0      1894            mov     b,r4
0712 ED        1895            mov     a,r5
0713 120000    1896            lcall   ___fsdiv
0716 AA82      1897            mov     r2,dpl
0718 AB83      1898            mov     r3,dph
071A ACF0      1899            mov     r4,b
071C FD        1900            mov     r5,a
071D E581      1901            mov     a,sp
071F 24FC      1902            add     a,#0xfc
0721 F581      1903            mov     sp,a
0723 E4        1904            clr     a
0724 C0E0      1905            push    acc
0726 C0E0      1906            push    acc
0728 747A      1907            mov     a,#0x7A
072A C0E0      1908            push    acc
072C 7444      1909            mov     a,#0x44
072E C0E0      1910            push    acc
0730 8A82      1911            mov     dpl,r2
0732 8B83      1912            mov     dph,r3
0734 8CF0      1913            mov     b,r4
0736 ED        1914            mov     a,r5
0737 120000    1915            lcall   ___fsdiv
073A AA82      1916            mov     r2,dpl
073C AB83      1917            mov     r3,dph
073E ACF0      1918            mov     r4,b
0740 FD        1919            mov     r5,a
0741 E581      1920            mov     a,sp
0743 24FC      1921            add     a,#0xfc
0745 F581      1922            mov     sp,a
0747 8A82      1923            mov     dpl,r2
0749 8B83      1924            mov     dph,r3
074B 8CF0      1925            mov     b,r4
074D ED        1926            mov     a,r5
074E 22        1927            ret
074F           1928   ;------------------------------------------------------------
074F           1929   ;Allocation info for local variables in function 'Check_Mode_Button'
074F           1930   ;------------------------------------------------------------
074F           1931   ;mode                      Allocated to registers r2 r3 
074F           1932   ;current_mode              Allocated to registers r4 r5 
074F           1933   ;------------------------------------------------------------
074F           1934   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:395: int Check_Mode_Button(int mode) {
074F           1935   ;        -----------------------------------------
074F           1936   ;         function Check_Mode_Button
074F           1937   ;        -----------------------------------------
074F           1938   _Check_Mode_Button:
074F AA82      1939            mov     r2,dpl
0751 AB83      1940            mov     r3,dph
0753           1941   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:396: int current_mode = mode;
0753 8A04      1942            mov     ar4,r2
0755 8B05      1943            mov     ar5,r3
0757           1944   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:397: if (MODE_PIN == 0) waitms(50); // De-bounce
0757 20B1C0    1945            jb      _P3_1,L027002?
075A 900032    1946            mov     dptr,#0x0032
075D C002      1947            push    ar2
075F C003      1948            push    ar3
0761 C004      1949            push    ar4
0763 C005      1950            push    ar5
0765 120000    1951            lcall   _waitms
0768 D005      1952            pop     ar5
076A D004      1953            pop     ar4
076C D003      1954            pop     ar3
076E D002      1955            pop     ar2
0770 8000      1956            sjmp    L027003?
0772           1957   L027002?:
0772           1958   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:398: else return current_mode;
0772 8A82      1959            mov     dpl,r2
0774 8B83      1960            mov     dph,r3
0776 22        1961            ret
0777           1962   L027003?:
0777           1963   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:400: if(MODE_PIN == 0) {
0777 20B140    1964            jb      _P3_1,L027011?
077A           1965   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:401: while(MODE_PIN==0);
077A           1966   L027004?:
077A 30B180    1967            jnb     _P3_1,L027004?
077D           1968   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:403: printf("\rMode: %d\r\n", !current_mode);
077D EC        1969            mov     a,r4
077E 4D        1970            orl     a,r5
077F B401C0    1971            cjne    a,#0x01,L027022?
0782           1972   L027022?:
0782 E4        1973            clr     a
0783 33        1974            rlc     a
0784 FC        1975            mov     r4,a
0785 7D00      1976            mov     r5,#0x00
0787 C002      1977            push    ar2
0789 C003      1978            push    ar3
078B C004      1979            push    ar4
078D C005      1980            push    ar5
078F 7400      1981            mov     a,#__str_8
0791 C0E0      1982            push    acc
0793 74CA      1983            mov     a,#(__str_8 >> 8)
0795 C0E0      1984            push    acc
0797 7480      1985            mov     a,#0x80
0799 C0E0      1986            push    acc
079B 120000    1987            lcall   _printf
079E E581      1988            mov     a,sp
07A0 24FB      1989            add     a,#0xfb
07A2 F581      1990            mov     sp,a
07A4 D003      1991            pop     ar3
07A6 D002      1992            pop     ar2
07A8           1993   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:404: if (mode == MODE_CAPACITANCE) {
07A8 EA        1994            mov     a,r2
07A9 4B        1995            orl     a,r3
07AA 7000      1996            jnz     L027008?
07AC           1997   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:405: return MODE_RESISTANCE;
07AC 900001    1998            mov     dptr,#0x0001
07AF 22        1999            ret
07B0           2000   L027008?:
07B0           2001   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:407: return MODE_CAPACITANCE;
07B0 900000    2002            mov     dptr,#0x0000
07B3 22        2003            ret
07B4           2004   L027011?:
07B4           2005   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:410: return current_mode;
07B4 8A82      2006            mov     dpl,r2
07B6 8B83      2007            mov     dph,r3
07B8 22        2008            ret
07B9           2009   ;------------------------------------------------------------
07B9           2010   ;Allocation info for local variables in function 'main'
07B9           2011   ;------------------------------------------------------------
07B9           2012   ;mode                      Allocated to registers r2 r3 
07B9           2013   ;V_LED                     Allocated to registers 
07B9           2014   ;V_R                       Allocated with name '_main_V_R_1_85'
07B9           2015   ;R_kOhms                   Allocated with name '_main_R_kOhms_1_85'
07B9           2016   ;period_s                  Allocated with name '_main_period_s_1_85'
07B9           2017   ;freq_Hz                   Allocated to registers r6 r7 r4 r5 
07B9           2018   ;capacitance_nF            Allocated with name '_main_capacitance_nF_1_85'
07B9           2019   ;success_count             Allocated with name '_main_success_count_1_85'
07B9           2020   ;------------------------------------------------------------
07B9           2021   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:414: void main(void) {
07B9           2022   ;        -----------------------------------------
07B9           2023   ;         function main
07B9           2024   ;        -----------------------------------------
07B9           2025   _main:
07B9           2026   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:415: int mode = MODE_CAPACITANCE;
07B9           2027   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:418: int success_count = 0;
07B9 E4        2028            clr     a
07BA FA        2029            mov     r2,a
07BB FB        2030            mov     r3,a
07BC F578      2031            mov     _main_success_count_1_85,a
07BE F579      2032            mov     (_main_success_count_1_85 + 1),a
07C0           2033   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:421: TIMER0_Init(); // Initialize Timer 0
07C0 C002      2034            push    ar2
07C2 C003      2035            push    ar3
07C4 120000    2036            lcall   _TIMER0_Init
07C7           2037   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:422: Serial_Init(); // Initialize Serial Communication
07C7 120000    2038            lcall   _Serial_Init
07CA           2039   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:423: LCD_4BIT();     // Configure the LCD
07CA 120000    2040            lcall   _LCD_4BIT
07CD           2041   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:426: InitPinADC(0, 1); // Configure P0.1 as Analog Input
07CD 756001    2042            mov     _InitPinADC_PARM_2,#0x01
07D0 758200    2043            mov     dpl,#0x00
07D3 120000    2044            lcall   _InitPinADC
07D6           2045   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:427: InitPinADC(2, 1); // Configure P2.1 as Analog Input
07D6 756001    2046            mov     _InitPinADC_PARM_2,#0x01
07D9 758202    2047            mov     dpl,#0x02
07DC 120000    2048            lcall   _InitPinADC
07DF           2049   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:428: InitADC();
07DF 120000    2050            lcall   _InitADC
07E2 D003      2051            pop     ar3
07E4 D002      2052            pop     ar2
07E6           2053   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:430: while(1) {
07E6           2054   L028036?:
07E6           2055   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:431: mode = Check_Mode_Button(mode);
07E6 8A82      2056            mov     dpl,r2
07E8 8B83      2057            mov     dph,r3
07EA 120000    2058            lcall   _Check_Mode_Button
07ED AA82      2059            mov     r2,dpl
07EF AB83      2060            mov     r3,dph
07F1           2061   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:433: V_LED = Volts_at_Pin(QFP32_MUX_P0_1); // Measure the Voltage at the LED
07F1 758200    2062            mov     dpl,#0x00
07F4 C002      2063            push    ar2
07F6 C003      2064            push    ar3
07F8 120000    2065            lcall   _Volts_at_Pin
07FB           2066   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:434: V_R = Volts_at_Pin(QFP32_MUX_P2_1); // Measure the Voltage at the Resistor
07FB 75820E    2067            mov     dpl,#0x0E
07FE 120000    2068            lcall   _Volts_at_Pin
0801           2069   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:435: R_kOhms = calculate_resistance_k0hms(V_R);
0801 858238    2070            mov     _main_V_R_1_85,dpl
0804 858339    2071            mov     (_main_V_R_1_85 + 1),dph
0807 85F03A    2072            mov     (_main_V_R_1_85 + 2),b
080A F53B      2073            mov     (_main_V_R_1_85 + 3),a
080C 120000    2074            lcall   _calculate_resistance_k0hms
080F 858288    2075            mov     _main_R_kOhms_1_85,dpl
0812 858389    2076            mov     (_main_R_kOhms_1_85 + 1),dph
0815 85F08A    2077            mov     (_main_R_kOhms_1_85 + 2),b
0818 F58B      2078            mov     (_main_R_kOhms_1_85 + 3),a
081A D003      2079            pop     ar3
081C D002      2080            pop     ar2
081E           2081   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:442: TL0 = 0;
081E 758A00    2082            mov     _TL0,#0x00
0821           2083   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:443: TH0 = 0;
0821 758C00    2084            mov     _TH0,#0x00
0824           2085   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:444: TF0 = 0;
0824 C28D      2086            clr     _TF0
0826           2087   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:445: overflow_count = 0;
0826 759800    2088            mov     _overflow_count,#0x00
0829           2089   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:447: while (EFM8_SIGNAL != 0); // Wait for Signal == 0
0829           2090   L028001?:
0829 20B3C0    2091            jb      _P3_3,L028001?
082C           2092   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:448: while (EFM8_SIGNAL != 1); // Wait for Signal == 1
082C           2093   L028004?:
082C 30B300    2094            jnb     _P3_3,L028004?
082F           2095   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:450: TR0 = 1; // Start Timer
082F D28C      2096            setb    _TR0
0831           2097   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:452: while (EFM8_SIGNAL != 0) { // Wait for Signal == 0
0831           2098   L028009?:
0831 30B380    2099            jnb     _P3_3,L028014?
0834           2100   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:453: if (TF0 == 1) { // Did 16-Bit Timer Overflow?
0834           2101   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:454: TF0 = 0;
0834 108DC0    2102            jbc     _TF0,L028061?
0837 8000      2103            sjmp    L028009?
0839           2104   L028061?:
0839           2105   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:455: overflow_count++;
0839 0598      2106            inc     _overflow_count
083B           2107   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:458: while (EFM8_SIGNAL != 1) { // Wait for Signal == 1
083B 8000      2108            sjmp    L028009?
083D           2109   L028014?:
083D 20B300    2110            jb      _P3_3,L028016?
0840           2111   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:459: if (TF0 == 1) { // Did 16-Bit Timer Overflow?
0840           2112   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:460: TF0 = 0;
0840 108D40    2113            jbc     _TF0,L028063?
0843 8000      2114            sjmp    L028014?
0845           2115   L028063?:
0845           2116   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:461: overflow_count++;
0845 0598      2117            inc     _overflow_count
0847 8000      2118            sjmp    L028014?
0849           2119   L028016?:
0849           2120   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:465: TR0 = 0; // Stop Timer 0. The 24-bit number [overflow_count-TH0-TL0] has the period!
0849 C28C      2121            clr     _TR0
084B           2122   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:466: period_s = calculate_period_s(overflow_count, TH0, TL0);
084B A898      2123            mov     r0,_overflow_count
084D 7900      2124            mov     r1,#0x00
084F 858C28    2125            mov     _calculate_period_s_PARM_2,_TH0
0852 752900    2126            mov     (_calculate_period_s_PARM_2 + 1),#0x00
0855 858AD8    2127            mov     _calculate_period_s_PARM_3,_TL0
0858 75D900    2128            mov     (_calculate_period_s_PARM_3 + 1),#0x00
085B 8882      2129            mov     dpl,r0
085D 8983      2130            mov     dph,r1
085F C002      2131            push    ar2
0861 C003      2132            push    ar3
0863 120000    2133            lcall   _calculate_period_s
0866           2134   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:467: freq_Hz = calculate_freq_Hz(period_s);
0866 8582D8    2135            mov     _main_period_s_1_85,dpl
0869 8583D9    2136            mov     (_main_period_s_1_85 + 1),dph
086C 85F0DA    2137            mov     (_main_period_s_1_85 + 2),b
086F F5DB      2138            mov     (_main_period_s_1_85 + 3),a
0871 120000    2139            lcall   _calculate_freq_Hz
0874 AE82      2140            mov     r6,dpl
0876 AF83      2141            mov     r7,dph
0878 ACF0      2142            mov     r4,b
087A FD        2143            mov     r5,a
087B           2144   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:468: capacitance_nF = calculate_capacitance_nF(period_s);
087B 85D882    2145            mov     dpl,_main_period_s_1_85
087E 85D983    2146            mov     dph,(_main_period_s_1_85 + 1)
0881 85DAF0    2147            mov     b,(_main_period_s_1_85 + 2)
0884 E5DB      2148            mov     a,(_main_period_s_1_85 + 3)
0886 C004      2149            push    ar4
0888 C005      2150            push    ar5
088A C006      2151            push    ar6
088C C007      2152            push    ar7
088E 120000    2153            lcall   _calculate_capacitance_nF
0891 858228    2154            mov     _main_capacitance_nF_1_85,dpl
0894 858329    2155            mov     (_main_capacitance_nF_1_85 + 1),dph
0897 85F02A    2156            mov     (_main_capacitance_nF_1_85 + 2),b
089A F52B      2157            mov     (_main_capacitance_nF_1_85 + 3),a
089C D007      2158            pop     ar7
089E D006      2159            pop     ar6
08A0 D005      2160            pop     ar5
08A2 D004      2161            pop     ar4
08A4 D003      2162            pop     ar3
08A6 D002      2163            pop     ar2
08A8           2164   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:470: if ((mode == MODE_RESISTANCE) && (V_R < VDD)) display_resistance_kOhms(R_kOhms);
08A8 E4        2165            clr     a
08A9 BA0180    2166            cjne    r2,#0x01,L028064?
08AC BB0080    2167            cjne    r3,#0x00,L028064?
08AF 04        2168            inc     a
08B0           2169   L028064?:
08B0 F8        2170            mov     r0,a
08B1 6000      2171            jz      L028018?
08B3 C002      2172            push    ar2
08B5 C003      2173            push    ar3
08B7 C004      2174            push    ar4
08B9 C005      2175            push    ar5
08BB C006      2176            push    ar6
08BD C007      2177            push    ar7
08BF C000      2178            push    ar0
08C1 748B      2179            mov     a,#0x8B
08C3 C0E0      2180            push    acc
08C5 746C      2181            mov     a,#0x6C
08C7 C0E0      2182            push    acc
08C9 7453      2183            mov     a,#0x53
08CB C0E0      2184            push    acc
08CD 7440      2185            mov     a,#0x40
08CF C0E0      2186            push    acc
08D1 853882    2187            mov     dpl,_main_V_R_1_85
08D4 853983    2188            mov     dph,(_main_V_R_1_85 + 1)
08D7 853AF0    2189            mov     b,(_main_V_R_1_85 + 2)
08DA E53B      2190            mov     a,(_main_V_R_1_85 + 3)
08DC 120000    2191            lcall   ___fslt
08DF A982      2192            mov     r1,dpl
08E1 E581      2193            mov     a,sp
08E3 24FC      2194            add     a,#0xfc
08E5 F581      2195            mov     sp,a
08E7 D000      2196            pop     ar0
08E9 D007      2197            pop     ar7
08EB D006      2198            pop     ar6
08ED D005      2199            pop     ar5
08EF D004      2200            pop     ar4
08F1 D003      2201            pop     ar3
08F3 D002      2202            pop     ar2
08F5 E9        2203            mov     a,r1
08F6 6000      2204            jz      L028018?
08F8 858882    2205            mov     dpl,_main_R_kOhms_1_85
08FB 858983    2206            mov     dph,(_main_R_kOhms_1_85 + 1)
08FE 858AF0    2207            mov     b,(_main_R_kOhms_1_85 + 2)
0901 E58B      2208            mov     a,(_main_R_kOhms_1_85 + 3)
0903 C002      2209            push    ar2
0905 C003      2210            push    ar3
0907 C004      2211            push    ar4
0909 C005      2212            push    ar5
090B C006      2213            push    ar6
090D C007      2214            push    ar7
090F C000      2215            push    ar0
0911 120000    2216            lcall   _display_resistance_kOhms
0914 D000      2217            pop     ar0
0916 D007      2218            pop     ar7
0918 D006      2219            pop     ar6
091A D005      2220            pop     ar5
091C D004      2221            pop     ar4
091E D003      2222            pop     ar3
0920 D002      2223            pop     ar2
0922           2224   L028018?:
0922           2225   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:478: if ((mode == MODE_CAPACITANCE) && (freq_Hz <= MIN_FREQ_HZ || freq_Hz >= MAX_FREQ_HZ)) {
0922 EA        2226            mov     a,r2
0923 4B        2227            orl     a,r3
0924 6000      2228            jz      L028068?
0926 020000    2229            ljmp    L028025?
0929           2230   L028068?:
0929 C002      2231            push    ar2
092B C003      2232            push    ar3
092D C004      2233            push    ar4
092F C005      2234            push    ar5
0931 C006      2235            push    ar6
0933 C007      2236            push    ar7
0935 C000      2237            push    ar0
0937 E4        2238            clr     a
0938 C0E0      2239            push    acc
093A C0E0      2240            push    acc
093C 7448      2241            mov     a,#0x48
093E C0E0      2242            push    acc
0940 7443      2243            mov     a,#0x43
0942 C0E0      2244            push    acc
0944 8E82      2245            mov     dpl,r6
0946 8F83      2246            mov     dph,r7
0948 8CF0      2247            mov     b,r4
094A ED        2248            mov     a,r5
094B 120000    2249            lcall   ___fsgt
094E A982      2250            mov     r1,dpl
0950 E581      2251            mov     a,sp
0952 24FC      2252            add     a,#0xfc
0954 F581      2253            mov     sp,a
0956 D000      2254            pop     ar0
0958 D007      2255            pop     ar7
095A D006      2256            pop     ar6
095C D005      2257            pop     ar5
095E D004      2258            pop     ar4
0960 D003      2259            pop     ar3
0962 D002      2260            pop     ar2
0964 E9        2261            mov     a,r1
0965 6000      2262            jz      L028024?
0967 C002      2263            push    ar2
0969 C003      2264            push    ar3
096B C004      2265            push    ar4
096D C005      2266            push    ar5
096F C006      2267            push    ar6
0971 C007      2268            push    ar7
0973 C000      2269            push    ar0
0975 E4        2270            clr     a
0976 C0E0      2271            push    acc
0978 7450      2272            mov     a,#0x50
097A C0E0      2273            push    acc
097C 74C3      2274            mov     a,#0xC3
097E C0E0      2275            push    acc
0980 7448      2276            mov     a,#0x48
0982 C0E0      2277            push    acc
0984 8E82      2278            mov     dpl,r6
0986 8F83      2279            mov     dph,r7
0988 8CF0      2280            mov     b,r4
098A ED        2281            mov     a,r5
098B 120000    2282            lcall   ___fslt
098E A982      2283            mov     r1,dpl
0990 E581      2284            mov     a,sp
0992 24FC      2285            add     a,#0xfc
0994 F581      2286            mov     sp,a
0996 D000      2287            pop     ar0
0998 D007      2288            pop     ar7
099A D006      2289            pop     ar6
099C D005      2290            pop     ar5
099E D004      2291            pop     ar4
09A0 D003      2292            pop     ar3
09A2 D002      2293            pop     ar2
09A4 E9        2294            mov     a,r1
09A5 7000      2295            jnz     L028025?
09A7           2296   L028024?:
09A7           2297   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:479: success_count = 0;
09A7 E4        2298            clr     a
09A8 F578      2299            mov     _main_success_count_1_85,a
09AA F579      2300            mov     (_main_success_count_1_85 + 1),a
09AC           2301   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:483: LCDprint("                ", 2, 1);
09AC 751802    2302            mov     _LCDprint_PARM_2,#0x02
09AF D200      2303            setb    _LCDprint_PARM_3
09B1 90C7C0    2304            mov     dptr,#__str_7
09B4 75F080    2305            mov     b,#0x80
09B7 C002      2306            push    ar2
09B9 C003      2307            push    ar3
09BB C004      2308            push    ar4
09BD C005      2309            push    ar5
09BF C006      2310            push    ar6
09C1 C007      2311            push    ar7
09C3 C000      2312            push    ar0
09C5 120000    2313            lcall   _LCDprint
09C8           2314   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:484: waitms(500); // Wait for 500 ms
09C8 9001F4    2315            mov     dptr,#0x01F4
09CB 120000    2316            lcall   _waitms
09CE D000      2317            pop     ar0
09D0 D007      2318            pop     ar7
09D2 D006      2319            pop     ar6
09D4 D005      2320            pop     ar5
09D6 D004      2321            pop     ar4
09D8 D003      2322            pop     ar3
09DA D002      2323            pop     ar2
09DC 020000    2324            ljmp    L028033?
09DF           2325   L028025?:
09DF           2326   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:485: } else if ((mode == MODE_RESISTANCE) && (V_R >= VDD)) {
09DF E8        2327            mov     a,r0
09E0 7000      2328            jnz     L028071?
09E2 020000    2329            ljmp    L028021?
09E5           2330   L028071?:
09E5 C002      2331            push    ar2
09E7 C003      2332            push    ar3
09E9 C004      2333            push    ar4
09EB C005      2334            push    ar5
09ED C006      2335            push    ar6
09EF C007      2336            push    ar7
09F1 C000      2337            push    ar0
09F3 748B      2338            mov     a,#0x8B
09F5 C0E0      2339            push    acc
09F7 746C      2340            mov     a,#0x6C
09F9 C0E0      2341            push    acc
09FB 7453      2342            mov     a,#0x53
09FD C0E0      2343            push    acc
09FF 7440      2344            mov     a,#0x40
0A01 C0E0      2345            push    acc
0A03 853882    2346            mov     dpl,_main_V_R_1_85
0A06 853983    2347            mov     dph,(_main_V_R_1_85 + 1)
0A09 853AF0    2348            mov     b,(_main_V_R_1_85 + 2)
0A0C E53B      2349            mov     a,(_main_V_R_1_85 + 3)
0A0E 120000    2350            lcall   ___fslt
0A11 A982      2351            mov     r1,dpl
0A13 E581      2352            mov     a,sp
0A15 24FC      2353            add     a,#0xfc
0A17 F581      2354            mov     sp,a
0A19 D000      2355            pop     ar0
0A1B D007      2356            pop     ar7
0A1D D006      2357            pop     ar6
0A1F D005      2358            pop     ar5
0A21 D004      2359            pop     ar4
0A23 D003      2360            pop     ar3
0A25 D002      2361            pop     ar2
0A27 E9        2362            mov     a,r1
0A28           2363   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:486: success_count = 0;
0A28 7000      2364            jnz     L028021?
0A2A F578      2365            mov     _main_success_count_1_85,a
0A2C F579      2366            mov     (_main_success_count_1_85 + 1),a
0A2E           2367   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:487: LCDprint("ERROR : HIGH R", 1, 1);
0A2E 751801    2368            mov     _LCDprint_PARM_2,#0x01
0A31 D200      2369            setb    _LCDprint_PARM_3
0A33 90CF00    2370            mov     dptr,#__str_9
0A36 75F080    2371            mov     b,#0x80
0A39 C002      2372            push    ar2
0A3B C003      2373            push    ar3
0A3D C004      2374            push    ar4
0A3F C005      2375            push    ar5
0A41 C006      2376            push    ar6
0A43 C007      2377            push    ar7
0A45 C000      2378            push    ar0
0A47 120000    2379            lcall   _LCDprint
0A4A           2380   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:489: LCDprint("                ", 2, 1);
0A4A 751802    2381            mov     _LCDprint_PARM_2,#0x02
0A4D D200      2382            setb    _LCDprint_PARM_3
0A4F 90C7C0    2383            mov     dptr,#__str_7
0A52 75F080    2384            mov     b,#0x80
0A55 120000    2385            lcall   _LCDprint
0A58           2386   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:490: waitms(500); // Wait for 500 ms
0A58 9001F4    2387            mov     dptr,#0x01F4
0A5B 120000    2388            lcall   _waitms
0A5E D000      2389            pop     ar0
0A60 D007      2390            pop     ar7
0A62 D006      2391            pop     ar6
0A64 D005      2392            pop     ar5
0A66 D004      2393            pop     ar4
0A68 D003      2394            pop     ar3
0A6A D002      2395            pop     ar2
0A6C 8000      2396            sjmp    L028033?
0A6E           2397   L028021?:
0A6E           2398   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:492: success_count += 1;
0A6E 0578      2399            inc     _main_success_count_1_85
0A70 E4        2400            clr     a
0A71 B57840    2401            cjne    a,_main_success_count_1_85,L028073?
0A74 0579      2402            inc     (_main_success_count_1_85 + 1)
0A76           2403   L028073?:
0A76           2404   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:495: if (1) {
0A76           2405   L028033?:
0A76           2406   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:497: waitms(200); // Wait for 200 ms
0A76 9000C8    2407            mov     dptr,#0x00C8
0A79 C002      2408            push    ar2
0A7B C003      2409            push    ar3
0A7D C004      2410            push    ar4
0A7F C005      2411            push    ar5
0A81 C006      2412            push    ar6
0A83 C007      2413            push    ar7
0A85 C000      2414            push    ar0
0A87 120000    2415            lcall   _waitms
0A8A D000      2416            pop     ar0
0A8C D007      2417            pop     ar7
0A8E D006      2418            pop     ar6
0A90 D005      2419            pop     ar5
0A92 D004      2420            pop     ar4
0A94 D003      2421            pop     ar3
0A96 D002      2422            pop     ar2
0A98           2423   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:498: if (mode == MODE_RESISTANCE) {
0A98 E8        2424            mov     a,r0
0A99 6000      2425            jz      L028030?
0A9B           2426   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:499: printf("\rR(kOhm) = %f\r\n", R_kOhms); // Print Resistance in Kilohms
0A9B C002      2427            push    ar2
0A9D C003      2428            push    ar3
0A9F C004      2429            push    ar4
0AA1 C005      2430            push    ar5
0AA3 C006      2431            push    ar6
0AA5 C007      2432            push    ar7
0AA7 C088      2433            push    _main_R_kOhms_1_85
0AA9 C089      2434            push    (_main_R_kOhms_1_85 + 1)
0AAB C08A      2435            push    (_main_R_kOhms_1_85 + 2)
0AAD C08B      2436            push    (_main_R_kOhms_1_85 + 3)
0AAF 74C0      2437            mov     a,#__str_10
0AB1 C0E0      2438            push    acc
0AB3 74CF      2439            mov     a,#(__str_10 >> 8)
0AB5 C0E0      2440            push    acc
0AB7 7480      2441            mov     a,#0x80
0AB9 C0E0      2442            push    acc
0ABB 120000    2443            lcall   _printf
0ABE E581      2444            mov     a,sp
0AC0 24F9      2445            add     a,#0xf9
0AC2 F581      2446            mov     sp,a
0AC4 D007      2447            pop     ar7
0AC6 D006      2448            pop     ar6
0AC8 D005      2449            pop     ar5
0ACA D004      2450            pop     ar4
0ACC D003      2451            pop     ar3
0ACE D002      2452            pop     ar2
0AD0           2453   L028030?:
0AD0           2454   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:501: printf("\rF(kHz) = %f\r\n", freq_Hz / KILO_MULTIPLIER); // Print Frequency to Serial Port
0AD0 C002      2455            push    ar2
0AD2 C003      2456            push    ar3
0AD4 E4        2457            clr     a
0AD5 C0E0      2458            push    acc
0AD7 C0E0      2459            push    acc
0AD9 747A      2460            mov     a,#0x7A
0ADB C0E0      2461            push    acc
0ADD 7444      2462            mov     a,#0x44
0ADF C0E0      2463            push    acc
0AE1 8E82      2464            mov     dpl,r6
0AE3 8F83      2465            mov     dph,r7
0AE5 8CF0      2466            mov     b,r4
0AE7 ED        2467            mov     a,r5
0AE8 120000    2468            lcall   ___fsdiv
0AEB AC82      2469            mov     r4,dpl
0AED AD83      2470            mov     r5,dph
0AEF AEF0      2471            mov     r6,b
0AF1 FF        2472            mov     r7,a
0AF2 E581      2473            mov     a,sp
0AF4 24FC      2474            add     a,#0xfc
0AF6 F581      2475            mov     sp,a
0AF8 C004      2476            push    ar4
0AFA C005      2477            push    ar5
0AFC C006      2478            push    ar6
0AFE C007      2479            push    ar7
0B00 C004      2480            push    ar4
0B02 C005      2481            push    ar5
0B04 C006      2482            push    ar6
0B06 C007      2483            push    ar7
0B08 7400      2484            mov     a,#__str_11
0B0A C0E0      2485            push    acc
0B0C 74D0      2486            mov     a,#(__str_11 >> 8)
0B0E C0E0      2487            push    acc
0B10 7480      2488            mov     a,#0x80
0B12 C0E0      2489            push    acc
0B14 120000    2490            lcall   _printf
0B17 E581      2491            mov     a,sp
0B19 24F9      2492            add     a,#0xf9
0B1B F581      2493            mov     sp,a
0B1D           2494   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:502: printf("\rC(nF) = %f\r\n", capacitance_nF); // Print Capacitance in Nanofarads
0B1D C028      2495            push    _main_capacitance_nF_1_85
0B1F C029      2496            push    (_main_capacitance_nF_1_85 + 1)
0B21 C02A      2497            push    (_main_capacitance_nF_1_85 + 2)
0B23 C02B      2498            push    (_main_capacitance_nF_1_85 + 3)
0B25 7440      2499            mov     a,#__str_12
0B27 C0E0      2500            push    acc
0B29 74D0      2501            mov     a,#(__str_12 >> 8)
0B2B C0E0      2502            push    acc
0B2D 7480      2503            mov     a,#0x80
0B2F C0E0      2504            push    acc
0B31 120000    2505            lcall   _printf
0B34 E581      2506            mov     a,sp
0B36 24F9      2507            add     a,#0xf9
0B38 F581      2508            mov     sp,a
0B3A D007      2509            pop     ar7
0B3C D006      2510            pop     ar6
0B3E D005      2511            pop     ar5
0B40 D004      2512            pop     ar4
0B42 D003      2513            pop     ar3
0B44 D002      2514            pop     ar2
0B46           2515   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:504: if (mode == MODE_CAPACITANCE) {
0B46 EA        2516            mov     a,r2
0B47 4B        2517            orl     a,r3
0B48 6000      2518            jz      L028075?
0B4A 020000    2519            ljmp    L028036?
0B4D           2520   L028075?:
0B4D           2521   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:505: display_freq_kHz(freq_Hz / KILO_MULTIPLIER); // Display Frequency on LCD
0B4D 8C82      2522            mov     dpl,r4
0B4F 8D83      2523            mov     dph,r5
0B51 8EF0      2524            mov     b,r6
0B53 EF        2525            mov     a,r7
0B54 C002      2526            push    ar2
0B56 C003      2527            push    ar3
0B58 120000    2528            lcall   _display_freq_kHz
0B5B           2529   ;        C:\Muntakim_Files\School\School_Work\Engineering_Bachelors\2023\ELEC_291\Lab_4\ELEC291_Lab4\Lab4.c:506: display_capacitance_nF(capacitance_nF);
0B5B 852882    2530            mov     dpl,_main_capacitance_nF_1_85
0B5E 852983    2531            mov     dph,(_main_capacitance_nF_1_85 + 1)
0B61 852AF0    2532            mov     b,(_main_capacitance_nF_1_85 + 2)
0B64 E52B      2533            mov     a,(_main_capacitance_nF_1_85 + 3)
0B66 120000    2534            lcall   _display_capacitance_nF
0B69 D003      2535            pop     ar3
0B6B D002      2536            pop     ar2
0B6D 020000    2537            ljmp    L028036?
0B70           2538            rseg R_CSEG
0B70           2539   
0000           2540            rseg R_XINIT
0000           2541   
0000           2542            rseg R_CONST
0000           2543   __str_0:
0000 1B        2544            db 0x1B
0001 5B324A    2545            db '[2J'
0004 00        2546            db 0x00
0005           2547   __str_1:
0005 54797065  2548            db 'Type Intended Display in Line 2 (16 Char Max): '
     20496E74
     656E6465
     64204469
     73706C61
     7920696E
     204C696E
     65203220
     28313620
     43686172
     204D6178
     293A20
0034 00        2549            db 0x00
0035           2550   __str_2:
0035 0A        2551            db 0x0A
0036 00        2552            db 0x00
0037           2553   __str_3:
0037 543A2025  2554            db 'T: %.3f s'
     2E336620
     73
0040 00        2555            db 0x00
0041           2556   __str_4:
0041 463A2025  2557            db 'F: %.3f kHz'
     2E336620
     6B487A
004C 00        2558            db 0x00
004D           2559   __str_5:
004D 433A2025  2560            db 'C: %.3f nF'
     2E336620
     6E46
0057 00        2561            db 0x00
0058           2562   __str_6:
0058 523A2025  2563            db 'R: %.3f kOhms'
     2E336620
     6B4F686D
     73
0065 00        2564            db 0x00
0066           2565   __str_7:
0066 20202020  2566            db '                '
     20202020
     20202020
     20202020
0076 00        2567            db 0x00
0077           2568   __str_8:
0077 0D        2569            db 0x0D
0078 4D6F6465  2570            db 'Mode: %d'
     3A202564
0080 0D        2571            db 0x0D
0081 0A        2572            db 0x0A
0082 00        2573            db 0x00
0083           2574   __str_9:
0083 4552524F  2575            db 'ERROR : HIGH R'
     52203A20
     48494748
     2052
0091 00        2576            db 0x00
0092           2577   __str_10:
0092 0D        2578            db 0x0D
0093 52286B4F  2579            db 'R(kOhm) = %f'
     686D2920
     3D202566
009F 0D        2580            db 0x0D
00A0 0A        2581            db 0x0A
00A1 00        2582            db 0x00
00A2           2583   __str_11:
00A2 0D        2584            db 0x0D
00A3 46286B48  2585            db 'F(kHz) = %f'
     7A29203D
     202566
00AE 0D        2586            db 0x0D
00AF 0A        2587            db 0x0A
00B0 00        2588            db 0x00
00B1           2589   __str_12:
00B1 0D        2590            db 0x0D
00B2 43286E46  2591            db 'C(nF) = %f'
     29203D20
     2566
00BC 0D        2592            db 0x0D
00BD 0A        2593            db 0x0A
00BE 00        2594            db 0x00
00BF           2595   
0003           2596            CSEG
0003           2597   
0003           2598   end
